<launch>
  <!-- Debug flag -->
  <arg name="debug" default="0"/>
  <!-- Vehicle's initial pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>
  <arg name="use_ned" default="true"/>

  <arg name="use_geodetic" default="false"/>
  <arg name="latitude" default="0"/>
  <arg name="longitude" default="0"/>
  <arg name="depth" default="0"/>

  <arg name="latitude_ref" default="0"/>
  <arg name="longitude_ref" default="0"/>
  <arg name="altitude_ref" default="0"/>

  <!-- Mode to open different robot configurations as set the in file
  nomenclature standard for the files in /robots
  /robots/<mode>.xacro
  -->
  <!--Pose data GT or GT+noise, values: default, noisy-->
  <arg name="mode" default="default"/>


  <!-- Vehicle's namespace -->
  <arg name="namespace" default="uuv0"/>
  <!-- World Frame -->
  <arg name="world_frame" default="world_ned"/>
  <!--Noise-->
  <arg name="pose_noise" default="0.02"/>

  <arg name="thruster_blade_failure" default="false"/>

  <!-- <arg name="use_simplified_mesh" default="false"/> -->
  <!--<arg name="use_ned_frame" default="false"/>-->

  <group ns="$(arg namespace)">
    <param name="robot_description"
           command="$(find xacro)/xacro '$(find vandy_bluerov)/robots/bluerov2_$(arg mode).xacro' --inorder
                    debug:=$(arg debug)
                    noise:=$(arg pose_noise)
                    inertial_reference_frame:=$(arg world_frame)
                    namespace:=$(arg namespace)
                    thruster_blade_failure:=$(arg thruster_blade_failure)" />

                    <!-- use_simplified_mesh:=$(arg use_simplified_mesh) -->
                    <!-- inertial_reference_frame:=world_ned -->

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <!-- <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description -use_ned $(arg use_ned)"/> -->
    <group if="$(arg use_geodetic)">
     <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
           args="-urdf -latitude $(arg latitude) -longitude $(arg longitude) -depth $(arg depth) -latitude_ref $(arg latitude_ref) -longitude_ref $(arg longitude_ref) -altitude_ref $(arg altitude_ref) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description -use_ned $(arg use_ned)" />
    </group>

    <group unless="$(arg use_geodetic)">
     <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
           args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description -use_ned $(arg use_ned)"/>
    </group>

    <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->

    <!-- Publish robot model for ROS -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
      <param name="publish_frequency" value="50" />
    </node>
  </group>

  <!-- Publish state and tf for in relation to the world frame -->
  <include file="$(find uuv_descriptions)/launch/message_to_tf.launch">
    	<arg name="namespace" value="$(arg namespace)"/>
  </include>

</launch>
