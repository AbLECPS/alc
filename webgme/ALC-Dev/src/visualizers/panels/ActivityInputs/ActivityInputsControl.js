/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Feb 26 2021 15:31:53 GMT-0600 (CST).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function ActivityInputsControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
    }

    ActivityInputsControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    ActivityInputsControl.prototype.selectedObjectChanged = function (nodeId) {
        var desc = this._getObjectDescriptor(nodeId),
            self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
        }

        self._currentNodeId = nodeId;
        self._currentNodeParentId = undefined;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 6};  // Territory "rule"

            self._widget.setTitle(desc.name.toUpperCase());

            if (typeof desc.parentId === 'string') {
                self.$btnModelHierarchyUp.show();
            } else {
                self.$btnModelHierarchyUp.hide();
            }

            self._currentNodeParentId = desc.parentId;

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory

            var parentNodeID, parentNode, parentMetaNode, parentMetaName;
            var constructionMetaType = 'Construction';
            var nodeObj = self._client.getNode(self._currentNodeId);
            parentNodeID = nodeObj.getParentId();
            parentNode = self._client.getNode(parentNodeID);

                        

            while (parentNode) {
                
                parentMetaNode = self._client.getNode(parentNode.getMetaTypeId());
                if (!parentMetaNode)
                    break;

                parentMetaName = parentMetaNode.getAttribute(nodePropertyNames.Attributes.name);

                if (parentMetaName.indexOf(constructionMetaType) != -1) {
                    var constructionid = parentNodeID;
                    self._selfPatterns[constructionid] = {children: 6};
                    break;
                }

            
                parentNodeID = parentNode.getParentId();
                parentNode = self._client.getNode(parentNodeID);

            }

            
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };

    // This next function retrieves the relevant node information for the widget
    ActivityInputsControl.prototype._getObjectDescriptor = function (nodeId) {
        var node = this._client.getNode(nodeId),
            objDescriptor;
        if (node) {
            var results = this.getResults(nodeId);
            var inputs = this.getInputs(nodeId);
            objDescriptor = {
                id: node.getId(),
                name: node.getAttribute(nodePropertyNames.Attributes.name),
                metaName: undefined,
                InputsDict: null,
                ResultsDict: null
            };

            if(inputs != null)
            {
                objDescriptor['InputsDict'] = inputs;
            }

            if(results != null)
            {
               objDescriptor['ResultsDict'] = results;
            }
        }

        return objDescriptor;
    };

    ActivityInputsControl.prototype.getInputs = function (nodeId) {
        self = this;
        var nodeObj = this._client.getNode(this._client.getNode(nodeId).getMetaTypeId());
        if(nodeObj == null)
            return null;
        if(nodeObj.getAttribute("name") === "Activity")
        {
            var children = this._client.getNode(nodeId).getChildrenIds();
            var inputDict = {};
            var inputs = [];
            for(var i = 0;i < children.length;++i)
            {
                
                var obj = this._client.getNode(children[i]);
                if(obj == null)
                    continue;
                var metaObj = this._client.getNode(obj.getMetaTypeId());
                if(metaObj == null)
                    continue;
                if(metaObj.getAttribute("name") === "Input")
                {
                    inputs.push([obj.getAttribute("name"), obj.getId(), obj.getAttribute("multi_dataset")]);
                }
            }
            inputs.sort((a, b) => a[0].localeCompare(b[0]));
            for(var i = 0;i < inputs.length;++i)
            {
                var key = inputs[i][0];
                var val = [inputs[i][1],inputs[i][2]];
                inputDict[key] = val;
            }
            return inputDict;
        }
        return null;
    };

    ActivityInputsControl.prototype.getResults = function (nodeId) {
        var self = this;
        var parentNodeID, parentNode, parentMetaNode, parentMetaName;
        var constructionMetaType = 'Construction';
        var nodeObj = self._client.getNode(nodeId);
        parentNodeID = nodeObj.getParentId();
        parentNode = self._client.getNode(parentNodeID);
        var constructionID = null;

        
        while (parentNode) {
            
            parentMetaNode = self._client.getNode(parentNode.getMetaTypeId());
            if (!parentMetaNode)
                break;

            parentMetaName = parentMetaNode.getAttribute(nodePropertyNames.Attributes.name);

            if (parentMetaName.indexOf(constructionMetaType) != -1) {
                constructionID = parentNodeID;
                break;
            }
            parentNodeID = parentNode.getParentId();
            parentNode = self._client.getNode(parentNodeID);

        }

        if(constructionID == null)
            return null;
        var constructionObj = self._client.getNode(constructionID);
        var ccchildren = constructionObj.getChildrenIds();
        var expDict =  null;
        for(var k = 0;k < ccchildren.length;++k)
        {
            var cccObj = this._client.getNode(ccchildren[k]);
            if(cccObj == null)
                continue;
            //if(cccObj.getAttribute("name") === "Testing" ||
            //    cccObj.getAttribute("name") === "DataCollection")
            {
                var cccchildren = this._client.getNode(ccchildren[k]).getChildrenIds();
                for(var l = 0;l < cccchildren.length;++l)
                {
                    var ccccObj = this._client.getNode(cccchildren[l]);
                    if(ccccObj == null)
                        continue;
                    var expName = ccccObj.getAttribute("name");
                    var results = [];
                    var childMetaId = ccccObj.getMetaTypeId();
                    var cchildObj = this._client.getNode(childMetaId);
                    if(cchildObj == null)
                        continue;
                    //if(cchildObj.getAttribute("name") === "ExperimentSetup")
                    {
                        var ccccchildren = ccccObj.getChildrenIds();
                        for(var x = 0;x < ccccchildren.length;++x)
                        {
                            var ccccObj = this._client.getNode(ccccchildren[x]);
                            if(ccccObj == null)
                                continue;
                            var ccccMetaId = ccccObj.getMetaTypeId();
                            var ccccMetaObj = this._client.getNode(ccccMetaId);
                            if(ccccMetaObj == null)
                                continue;
                            var cccMetaName = ccccMetaObj.getAttribute("name");
                            if(cccMetaName.indexOf("Result") != -1)
                            {
                                var ccccchildren = ccccObj.getChildrenIds();
                                for(var x = 0;x < ccccchildren.length;++x)
                                {
                                    var ccccObj = this._client.getNode(ccccchildren[x]);
                                    if(ccccObj == null)
                                        continue;
                                    results.push([ccccObj.getId(), ccccObj.getAttribute("name")]);
                                }
                            }
                        }
                    }
                    if (expDict == null)
                    {
                        expDict = {};
                    }
                    expDict[expName] = results;
                }
            }
        }
                
        return expDict;
        
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    ActivityInputsControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {

            case CONSTANTS.TERRITORY_EVENT_LOAD:
                this._onLoad(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UPDATE:
                this._onUpdate(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                this._onUnload(event.eid);
                break;
            default:
                break;
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    ActivityInputsControl.prototype._onLoad = function (gmeId) {
        if (this._currentNodeId === gmeId) {
            var description = this._getObjectDescriptor(gmeId);
            this._widget.addNode(description);
         }
    };

    ActivityInputsControl.prototype._onUpdate = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.updateNode(description);
    };

    ActivityInputsControl.prototype._onUnload = function (gmeId) {
        this._widget.removeNode(gmeId);
    };

    ActivityInputsControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ActivityInputsControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    ActivityInputsControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    ActivityInputsControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    ActivityInputsControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    ActivityInputsControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    ActivityInputsControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    ActivityInputsControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    ActivityInputsControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    ActivityInputsControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

    return ActivityInputsControl;
});
