/*globals define, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon May 30 2016 15:16:13 GMT-0500 (Central Daylight Time).
 */

define(['js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (CONSTANTS,
             GMEConcepts,
             nodePropertyNames) {

    'use strict';

    var TVizControl;

    TVizControl = function (options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
		
		this.parentFoldersVisited = 0;
		this.failureLabels= [];
		this.parentFolders = [];
    };
    
    
    // TVizControl.prototype._onAttrChanged = function (id, divid, oldValue, newValue) {
    // var self= this;
    // self._logger.debug('&&&&&&&&&&&&&&&&& attribute change attempted '+ id + ' div id ' + divid + ' old ' + oldValue + ' new ' +newValue );
    // //var targetNodeObj = self._client.getNode(id);
    // if (divid.indexOf('mode')>=0)
    // {
    // self._logger.debug('set mode = '+newValue);
    // self._client.setAttributes(id, 'Activation', newValue);
    // }
    // else if (divid.indexOf('fault')>=0)
    // {
    // self._logger.debug('set fault = '+newValue);
    // self._client.setAttributes(id, 'Marker', newValue);
    // }
	
    // };

    TVizControl.prototype._initWidgetEventHandlers = function (){
        var self = this;
        this._widget.onNodeClick = function (id) {
	  
            var targetNodeObj = self._client.getNode(id);
            if (targetNodeObj) {
                self._logger.debug('*******************got object');
                if (targetNodeObj.getParentId() || targetNodeObj.getParentId() === CONSTANTS.PROJECT_ROOT_ID) {
                    self._logger.debug('*******************got parent id');
                    WebGMEGlobal.State.registerActiveObject(targetNodeObj.getParentId());
                    WebGMEGlobal.State.registerActiveSelection([id]);
                    WebGMEGlobal.State.registerActiveVisualizer('ModelEditor');
                } 
	     
            }
	   
        };
	
        // this._widget.onEditNode = function (id, divid) {
        // self._logger.debug(' on edit 1');
        // var divitem = self._widget._el.find('#'+divid);
        // self._logger.debug(' on edit 2');
        // if (divitem)
        // {
        // self._logger.debug(' on edit 2');
        // divitem.editInPlace({
        // class: '',
        // onChange: function (oldValue, newValue) {
        // self._onAttrChanged(id, divid, oldValue, newValue);
        // }
        // });
		
        // }
        // else{
        // self._logger.debug('++++++++++++widget not found');
        // }
        // self._logger.debug(' on edit 4');
	   
        // };
	
        this._widget.onEditMode = function (id, newValue) {
            self._logger.debug(' on edit onEditMode');
            self._client.setAttributes(id, 'Activation', newValue);
	   
        };
	
        this._widget.onEditFailureLabel = function (id, newValue, labelvalues) {
            self._logger.debug(' on edit onEditFailureLabel');
	 
            var newlabelValue='';
            var i=0;
            var prefix = '';
            for (i=0; i!= newValue.length; i++){
                newlabelValue += prefix;
                newlabelValue += labelvalues[newValue[i]-1];
                prefix =',';
            }
            self._client.setAttributes(id, 'Marker', newlabelValue);
	   
        };
	
	
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    TVizControl.prototype.selectedObjectChanged = function (nodeId) {
        var desc =  undefined,
            self = this;
        this._getObjectDescriptor(nodeId)
           .then(function(desc) {

               self._logger.debug('activeObject nodeId \'' + nodeId + '\'');
               self._logger.debug('metaname of activeobject= '+ desc.metaName);

               // Remove current territory patterns
               if (self._currentNodeId) {
                   self._client.removeUI(self._territoryId);
               }

               self._currentNodeId = nodeId;
               self._currentNodeParentId = undefined;

               if (typeof self._currentNodeId === 'string') {
                   // Put new node's info into territory rules
                   self._selfPatterns = {};
                   self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

                   self._widget.setTitle(desc.name.toUpperCase());

                   if (typeof desc.parentId === 'string') {
                       self.$btnModelHierarchyUp.show();
                   } else {
                       self.$btnModelHierarchyUp.hide();
                   }

                   self._currentNodeParentId = desc.parentId;

                   self._territoryId = self._client.addUI(self, function (events) {
                       self._eventCallback(events);
                   });

                   // Update the territory
                   //self._client.updateTerritory(self._territoryId, self._selfPatterns);

                   self._selfPatterns[nodeId] = {children: 1};
				   var i =0;
				   for(i=0; i!= self.parentFolders.length; i+=1)
				   {
					   self._selfPatterns[self.parentFolders[i]] = {children: 3};
				   }
				   
                   self._client.updateTerritory(self._territoryId, self._selfPatterns);
               }
           });
    };

    // This next function retrieves the relevant node information for the widget
    TVizControl.prototype._getObjectDescriptor = function (nodeId) {
        var self=this;
        var nodeObj = self._client.getNode(nodeId);
        var obj;

        return new Promise(function(resolve,reject) {
	
            if (nodeObj) {
                var objDescriptor = {
                    id: undefined,
                    name: undefined,
                    childrenIds: undefined,
                    parentId: undefined,
                    isConnection: false,
                    metaName:undefined,
                    src: {
                        Id: undefined,
                        name: undefined
                    },
                    dst: {
                        Id: undefined,
                        name: undefined
                    },
                    modelabel : undefined,
                    faultlabel:undefined,
					labels : []
                };
				
				
                var metaObj = self._client.getNode(nodeObj.getMetaTypeId()),
                metaName = undefined,
				id = nodeObj.getId(),
				parentId = nodeObj.getParentId();
				
                if (metaObj) {
                    metaName = metaObj.getAttribute(nodePropertyNames.Attributes.name);
                }
				
				if ((metaName.indexOf("Block") !=-1)&& (!self._currentNodeId))
					self.getParentFolders(nodeObj);

				
					
					
				
				if ((metaName.indexOf("Folder") !=-1))
				{
					objDescriptor.metaName = metaName;
					resolve(objDescriptor);
				}
				
				 
				if ((metaName.indexOf("FailureLabels") !=-1))
				{
					objDescriptor.id = nodeObj.getId();
					objDescriptor.name = nodeObj.getAttribute(nodePropertyNames.Attributes.name);
					objDescriptor.childrenIds = nodeObj.getChildrenIds();
					objDescriptor.childrenNum = objDescriptor.childrenIds.length;
					objDescriptor.parentId = nodeObj.getParentId();
					objDescriptor.metaName = metaName;
					var k =0;
					for (k=0; k<objDescriptor.childrenIds.length; k++)
					{
						var cnode = self._client.getNode( objDescriptor.childrenIds[k]);
						var clobj = self._client.getNode(cnode.getMetaTypeId());
						var clname = clobj.getAttribute(nodePropertyNames.Attributes.name);
						if (clname == 'FailureLabel')
						{
							var lname = cnode.getAttribute(nodePropertyNames.Attributes.name);
							objDescriptor.labels.push(lname);
			
						}
					}
					if (objDescriptor.labels){
						objDescriptor.labels.sort();
					}
					resolve(objDescriptor);
				}
				
				if ((!self._currentNodeId)||(self._currentNodeId == id) || (self._currentNodeId == parentId))
				{	
				
					objDescriptor.id = nodeObj.getId();
					objDescriptor.name = nodeObj.getAttribute(nodePropertyNames.Attributes.name);
					objDescriptor.childrenIds = nodeObj.getChildrenIds();
					objDescriptor.childrenNum = objDescriptor.childrenIds.length;
					objDescriptor.parentId = nodeObj.getParentId();
					objDescriptor.metaName = metaName;
                
					objDescriptor.isConnection = GMEConcepts.isConnection(nodeId);  // GMEConcepts can be helpful
					if ( objDescriptor.isConnection )
					{
						objDescriptor.src.Id = nodeObj.getPointer('src').to;
						objDescriptor.dst.Id = nodeObj.getPointer('dst').to;
						obj = self._client.getNode(objDescriptor.src.Id);
						if (obj)
						{
							objDescriptor.src.name = obj.getAttribute(nodePropertyNames.Attributes.name);
						}
						obj = self._client.getNode(objDescriptor.dst.Id);
						if (obj)
						{
							objDescriptor.dst.name = obj.getAttribute(nodePropertyNames.Attributes.name);
						}
						objDescriptor.modelabel = nodeObj.getAttribute('Activation');
						objDescriptor.faultlabel = nodeObj.getAttribute('Marker');
						self._logger.debug('*******fault label '+objDescriptor.faultlabel );
			
					}
				}
					
				resolve(objDescriptor);
				
				
               
            }
            else {
                resolve(objDescriptor);
            }
        });
    };
	
	TVizControl.prototype.getParentFolders = function (nodeObj) {
		
        var self = this;
		var ret = [];
		if (self.parentFoldersVisited)
			return ret;
		
		self._logger.debug('******* in getParentFolders');
		
		var parentNodeID, parentNode, parentMetaNode, parentMetaName;
		var parentMetaType = 'Folder';
		parentNodeID = nodeObj.getParentId();
		parentNode = self._client.getNode(parentNodeID);
		while (parentNode)
		{
			parentMetaNode = self._client.getNode(parentNode.getMetaTypeId());
			if (!parentMetaNode)
				break;
			
			parentMetaName = parentMetaNode.getAttribute(nodePropertyNames.Attributes.name);
			
			self._logger.debug('******* in getParentFolders ' + parentMetaName);
			
			if (parentMetaName.indexOf('Folder') != -1)
			{
				ret.push(parentNodeID);
				self.parentFolders.push(parentNodeID);
				self._logger.debug('******* in getParentFolders added ' + parentNodeID);
			}
			else if (parentMetaName.indexOf('Models') != -1)
			{
				break;
			}
			
			parentNodeID = parentNode.getParentId();
			parentNode = self._client.getNode(parentNodeID);
			
		}
		
		self.parentFoldersVisited =1;
		
		
	}
    
    TVizControl.prototype._getMetaName = function (nodeObj) {
        var self = this;
        return new Promise(function(resolve,reject) {
            var metaObj = self._client.getNode(nodeObj.getMetaTypeId()),
            metaName = undefined;
            if (metaObj) {
                metaName = metaObj.getAttribute(nodePropertyNames.Attributes.name);
                //self._logger.debug('metaname = '+ metaName);
            }
            resolve(metaName);
        });
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    TVizControl.prototype._eventCallback = function (events) {
        var self = this,
	    i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {
                case CONSTANTS.TERRITORY_EVENT_LOAD:
                    this._onLoad(event.eid,i);
                    break;
                case CONSTANTS.TERRITORY_EVENT_UPDATE:
                    this._onUpdate(event.eid);
                    break;
                case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                    this._onUnload(event.eid);
                    break;
                default:
                    break;
            }
        }
	

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    TVizControl.prototype._onLoad = function (gmeId,count=-1) {
        var self=this;
        this._getObjectDescriptor(gmeId)
          .then(function(description) {
              description.last=-1;
              if (count==1){
                  description.last=1;
              }
              //self._logger.debug('metaname  _onLoad= '+ description.faultlabel);
			  if (description.metaName)
				 self._widget.addNode(description);
          });
    };

        TVizControl.prototype._onUpdate = function (gmeId) {
            var self=this;
            this._getObjectDescriptor(gmeId)
            .then(function(description) {
                //self._logger.debug('metaname  _onUpdate= '+ description.metaName);
                self._widget.updateNode(description);
            });
        
        };

        TVizControl.prototype._onUnload = function (gmeId) {
            this._widget.removeNode(gmeId);
        };

        TVizControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
            if (this._currentNodeId === activeObjectId) {
                // The same node selected as before - do not trigger
            } else {
                this.selectedObjectChanged(activeObjectId);
            }
        };

        /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
        TVizControl.prototype.destroy = function () {
            this._detachClientEventListeners();
            this._removeToolbarItems();
        };

        TVizControl.prototype._attachClientEventListeners = function () {
            this._detachClientEventListeners();
            WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
        };

        TVizControl.prototype._detachClientEventListeners = function () {
            WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
        };

        TVizControl.prototype.onActivate = function () {
            this._attachClientEventListeners();
            this._displayToolbarItems();

            if (typeof this._currentNodeId === 'string') {
                WebGMEGlobal.State.registerSuppressVisualizerFromNode(true);
                WebGMEGlobal.State.registerActiveObject(this._currentNodeId);
                WebGMEGlobal.State.registerSuppressVisualizerFromNode(false);
            }
        };

        TVizControl.prototype.onDeactivate = function () {
            this._detachClientEventListeners();
            this._hideToolbarItems();
        };

        /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
        TVizControl.prototype._displayToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].show();
                }
            } else {
                this._initializeToolbar();
            }
        };

        TVizControl.prototype._hideToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].hide();
                }
            }
        };

        TVizControl.prototype._removeToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].destroy();
                }
            }
        };

        TVizControl.prototype._initializeToolbar = function () {
            var self = this,
                toolBar = WebGMEGlobal.Toolbar;

            this._toolbarItems = [];

            this._toolbarItems.push(toolBar.addSeparator());

            /************** Go to hierarchical parent button ****************/
            this.$btnModelHierarchyUp = toolBar.addButton({
                title: 'Go to parent',
                icon: 'glyphicon glyphicon-circle-arrow-up',
                clickFn: function (/*data*/) {
                    WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
                }
            });
            this._toolbarItems.push(this.$btnModelHierarchyUp);
            this.$btnModelHierarchyUp.hide();

            /************** Checkbox example *******************/

            this.$cbShowConnection = toolBar.addCheckBox({
                title: 'toggle checkbox',
                icon: 'gme icon-gme_diagonal-arrow',
                checkChangedFn: function (data, checked) {
                    self._logger.debug('Checkbox has been clicked!');
                }
            });
            this._toolbarItems.push(this.$cbShowConnection);

            this._toolbarInitialized = true;
        };

        return TVizControl;
    });
