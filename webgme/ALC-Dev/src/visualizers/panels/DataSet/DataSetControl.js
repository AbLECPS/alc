/*globals define, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jul 07 2016 11:24:16 GMT-0500 (Central Daylight Time).
 */

define(['js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (CONSTANTS,
    GMEConcepts,
    nodePropertyNames) {

        'use strict';

        var DataSetControl;

        DataSetControl = function (options) {

            this._logger = options.logger.fork('Control');

            this._client = options.client;

            // Initialize core collections and variables
            this._widget = options.widget;

            this._currentNodeId = null;
            this._currentNodeParentId = undefined;

            this._initWidgetEventHandlers();

            this._logger.debug('ctor finished');

            this.parentFoldersVisited = 0;
            this.parentFolders = [];
            this.type = '';
           
            this.exptTypes = [];
            this.alcid = '';
            this.countlimit =1;
        };

        DataSetControl.prototype._initWidgetEventHandlers = function () {
            var self = this;
            this._widget.onNodeClick = function (id) {
                var targetNodeObj = self._client.getNode(id);
                if (targetNodeObj) {
                    var address = window.location.origin + WebGMEGlobal.gmeConfig.client.mountedPath + '/?project=' + encodeURIComponent(self._client.getActiveProjectId());
                    address += '&branch=' + encodeURIComponent(self._client.getActiveBranchName());
                    address += '&node='+ encodeURIComponent(id);
                    window.open(address, '_blank');
                    window.focus();
                    
                    /*self._logger.debug('*******************got object');
                    if (targetNodeObj.getParentId() || targetNodeObj.getParentId() === CONSTANTS.PROJECT_ROOT_ID) {
                        self._logger.debug('*******************got parent id');
                        WebGMEGlobal.State.registerActiveObject(targetNodeObj.getParentId());
                        WebGMEGlobal.State.registerActiveSelection([id]);
                        WebGMEGlobal.State.registerActiveVisualizer('ModelEditor');
                    }*/

                }

            };


            this._widget.onEditSelectionInfo = function (value) {
                self._logger.debug(' on edit onEditNode1');
                
            };

            this._widget.onEditSetInfo = function (ids) {
                self._logger.debug(' on edit onEditNode1');
               
            };
        };

        /* * * * * * * * Visualizer content update callbacks * * * * * * * */
        // One major concept here is with managing the territory. The territory
        // defines the parts of the project that the visualizer is interested in
        // (this allows the browser to then only load those relevant parts).
        DataSetControl.prototype.selectedObjectChanged = function (nodeId) {

            var desc = undefined,
                self = this;
            self._getObjectDescriptor(nodeId)
                .then(function (desc) {

                    self._logger.debug('activeObject nodeId \'' + nodeId + '\'');
                    self._logger.debug('metaname of activeobject= ' + desc.metaName);

                    // Remove current territory patterns
                    if (self._currentNodeId) {
                        self._client.removeUI(self._territoryId);
                    }

                    self._currentNodeId = nodeId;
                    self._currentNodeParentId = undefined;

                    if (typeof self._currentNodeId === 'string') {
                        // Put new node's info into territory rules
                        self._selfPatterns = {};
                        self._selfPatterns[nodeId] = { children: 0 };  // Territory "rule"

                        self._widget.setTitle("");

                        if (typeof desc.parentId === 'string') {
                            self.$btnModelHierarchyUp.show();
                        } else {
                            self.$btnModelHierarchyUp.hide();
                        }

                        self._currentNodeParentId = desc.parentId;

                        self._territoryId = self._client.addUI(self, function (events) {
                            self._eventCallback(events);
                        });

                        // Update the territory
                        //self._client.updateTerritory(self._territoryId, self._selfPatterns);

                        //self._selfPatterns[nodeId] = {children: 100};
                        //self._client.updateTerritory(self._territoryId, self._selfPatterns);

                        self._selfPatterns[nodeId] = { children: 0 };
                        var i = 0;
                        var depth =3;
                        if (self.alcid != '')
                            depth = 5;

                        for (i = 0; i != self.parentFolders.length; i += 1) {
                            self._selfPatterns[self.parentFolders[i]] = { children: depth };
                        }

                        
                        

                        self._client.updateTerritory(self._territoryId, self._selfPatterns);
                    }
                });
        };

        // This next function retrieves the relevant node information for the widget
        DataSetControl.prototype._getObjectDescriptor = function (nodeId) {
            var self = this;
            var nodeObj = self._client.getNode(nodeId);
            var obj, k;


            return new Promise(function (resolve, reject) {

                if (nodeObj) {
                    var objDescriptor = {
                        id: undefined,
                        childrenIds: undefined,
                        parentId: undefined,
                        metaName: undefined,
                        exptName: undefined,
                        results: {},
                        resultsInfo: {},
                        selected_results: [],
                        hname:undefined,
                        isGSN: 0,
                        use: 0
                    };

                    var metaObj = self._client.getNode(nodeObj.getMetaTypeId()),
                        metaName = undefined,
                        id = nodeObj.getId(),
                        parentId = nodeObj.getParentId(),
                        pMetaName = '',
                        parentObj = '';

                    if (metaObj) {
                        metaName = metaObj.getAttribute(nodePropertyNames.Attributes.name);
                    }

                    if (!self._currentNodeId)
                        self.getParentFolders(nodeObj);



                    if ((metaName=="Result")) {
                        if (parentId) {
                            parentObj = self._client.getNode(parentId);
                            if (parentObj) {

                                var pmetaObj = self._client.getNode(parentObj.getMetaTypeId());
                                if (pmetaObj)
                                    pMetaName = pmetaObj.getAttribute(nodePropertyNames.Attributes.name);

                            }
                        }

                        if (pMetaName && self.checkMetaType(pMetaName)) {
                            objDescriptor.id = nodeObj.getId();
                            objDescriptor.childrenIds = nodeObj.getChildrenIds();
                            objDescriptor.metaName = metaName;
                            objDescriptor.exptName = parentObj.getAttribute(nodePropertyNames.Attributes.name);
                            objDescriptor.exptHierName = self.getHierName(parentId);
							objDescriptor.pMetaName = pMetaName;
                            objDescriptor.results = {};
                            objDescriptor.resultsInfo = {};
                            var k = 0;
                            var lresults = {};
                            var lresultsInfo = {};
                            for (k = 0; k < objDescriptor.childrenIds.length; k++) {
                                var cnode = self._client.getNode(objDescriptor.childrenIds[k]);
                                if (cnode)
                                {
                                    var clobj = self._client.getNode(cnode.getMetaTypeId());
                                    if (clobj)
                                    {
                                        var clname = clobj.getAttribute(nodePropertyNames.Attributes.name);
										if (clname.indexOf('Data') != -1) {
											var datainfo = cnode.getAttribute('datainfo');
											if ((datainfo != '')&& (datainfo != '{}'))
											{
												if (cnode.getAttribute('createdAt') == 0)
													continue;
												var lname = cnode.getAttribute(nodePropertyNames.Attributes.name);
												lresults[lname] = objDescriptor.childrenIds[k];
												objDescriptor.resultsInfo[lname]={};
												objDescriptor.resultsInfo[lname]['id']= objDescriptor.childrenIds[k];
												objDescriptor.resultsInfo[lname]['name']= lname;
												objDescriptor.resultsInfo[lname]['ename']= objDescriptor.exptHierName;
												objDescriptor.resultsInfo[lname]['createdAt']=cnode.getAttribute('createdAt');
												objDescriptor.resultsInfo[lname]['type']=cnode.getAttribute('type');
												objDescriptor.resultsInfo[lname]['hash']=cnode.getAttribute('data');
												objDescriptor.resultsInfo[lname]['activity']=cnode.getAttribute('activity');
												objDescriptor.resultsInfo[lname]['activityid']=parentId;
												objDescriptor.resultsInfo[lname]['datainfo']=cnode.getAttribute('datainfo');
												objDescriptor.resultsInfo[lname]['lecs']=cnode.getMemberIds("LData");
												objDescriptor.resultsInfo[lname]['tdata']=cnode.getMemberIds("TData");
												objDescriptor.resultsInfo[lname]['edata']=cnode.getMemberIds("EData");
												objDescriptor.resultsInfo[lname]['params']=cnode.getAttribute("params");

											}
										}
                                    }
                                }
                            }
                            
                            var sortednames = Object.keys(lresults);
                            sortednames = sortednames.sort();
                            for (k = 0; k < sortednames.length; k++) {
                                objDescriptor.results[sortednames[k]] = lresults[sortednames[k]];
                                //objDescriptor.resultsInfo[sortednames[k]] = lresultsInfo[sortednames[k]];
                            }


                        }

                   

                    }

                    resolve(objDescriptor);

                }
            });
        };

        DataSetControl.prototype.checkMetaType = function (name) {
            var self = this;
            var i = 0;
            for (i = 0; i != self.exptTypes.length; i += 1) {
                if (name.indexOf(self.exptTypes[i])!=-1) {
                    return 1;
                }
            }
            return 0;
        };

        


        DataSetControl.prototype.getHierName = function (nodeid) {
            var self = this;
            var nid = nodeid;
            var nodeObj = self._client.getNode(nid);
            var pid = nodeObj.getParentId();
            
            var ret=[];
            var checkParentID = '';
            if (self.alcid != '')
            {
                checkParentID = self.alcid;
            }
           

            while (pid != checkParentID)
            {
                if (nodeObj)
                {	
                    ret.push(nodeObj.getAttribute(nodePropertyNames.Attributes.name));
                    nid = pid;
                    nodeObj = self._client.getNode(nid);
                    if (nodeObj)
                    {
                        pid = nodeObj.getParentId();

                    }
                    else
                    {
                        break;
                    }
                }
                else{
                    break;
                }
                
            }
            if (nodeObj)
            {
                //ret.push(nodeObj.getAttribute(nodePropertyNames.Attributes.name));
				var nMetaNode = self._client.getNode(nodeObj.getMetaTypeId());
                if (nMetaNode)
				{
                   var nMetaName = nMetaNode.getAttribute(nodePropertyNames.Attributes.name);
				   ret.push(nMetaName);
				}
            }

            var ret1= ret.reverse();
            var ret2 = ret1.join('/');
            return ret2;
                
            
        };

        DataSetControl.prototype.getParentFolders = function (nodeObj) {

            var self = this;
            var ret = [];
            if (self.parentFoldersVisited)
                return ret;

            self._logger.debug('******* in getParentFolders');

            var parentNodeID, parentNode, parentMetaNode, parentMetaName;
            var alcMetaType = 'ALC';
            
            parentNodeID = nodeObj.getParentId();
            parentNode = self._client.getNode(parentNodeID);

            var metaobj = self._client.getNode(nodeObj.getMetaTypeId());
            var metaName = metaobj.getAttribute(nodePropertyNames.Attributes.name);
            self.type = metaName;

           
            self.exptTypes.push("ExperimentSetup");
            self.exptTypes.push("Campaign");
            self.exptTypes.push("SLTrainingSetUp");
            self.exptTypes.push("RLTrainingSetup");
            self.exptTypes.push("AssuranceMonitorSetup");
            //self.exptTypes.push("VerificationSetup");
            


            

            while (parentNode) {
                parentMetaNode = self._client.getNode(parentNode.getMetaTypeId());
                if (!parentMetaNode)
                    break;

                parentMetaName = parentMetaNode.getAttribute(nodePropertyNames.Attributes.name);

                self._logger.debug('******* in getParentFolders ' + parentMetaName);

                
                if (parentMetaName.indexOf(alcMetaType) != -1) {
                    ret.push(parentNodeID);
                    self.parentFolders.push(parentNodeID);
                    self.alcid = parentNodeID;
                    self._logger.debug('******* in getParentFolders added ' + parentNodeID);
                    break;
                }
                else{
                    self._logger.debug('******* not alc');

                }

                parentNodeID = parentNode.getParentId();
                parentNode = self._client.getNode(parentNodeID);

            }

            
            self.parentFoldersVisited = 1;


        };


        /* * * * * * * * Node Event Handling * * * * * * * */
        DataSetControl.prototype._eventCallback = function (events) {
            var i = events ? events.length : 0,
                event;

            this._logger.debug('_eventCallback \'' + i + '\' items');
            

            while (i--) {
                event = events[i];
                switch (event.etype) {
                    case CONSTANTS.TERRITORY_EVENT_LOAD:
                        this._logger.debug('event '+i)
                        this._onLoad(event.eid, i);
                        this.countlimit = i;
                        break;
                    case CONSTANTS.TERRITORY_EVENT_UPDATE:
                        this._onUpdate(event.eid);
                        break;
                    case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                        this._onUnload(event.eid);
                        break;
                    default:
                        break;
                }
            }

            this._logger.debug('event outside  '+i)

            

            this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
        };

       

        DataSetControl.prototype._onLoad = function (gmeId, count = -1) {
            var self = this;
            this._getObjectDescriptor(gmeId)
                .then(function (description) {
                    description.last = -1;
                    if (count == 50)
                    {
                            self._logger.debug('reached here')
                    }
                    self._logger.debug('count = '+ count)
                    if (count == self.countlimit) {
                        
                        description.last = 1;
                        
                    }

                    if (description.metaName || (description.last==1))
                        self._widget.addNode(description);

                });


        };

        DataSetControl.prototype._onUpdate = function (gmeId) {
            var self = this;
            self._getObjectDescriptor(gmeId)
                .then(function (description) {
                    //self._logger.debug('metaname  _onUpdate= '+ description.metaName);
                    self._widget.updateNode(description);
                });
        };

        DataSetControl.prototype._onUnload = function (gmeId) {
            this._widget.removeNode(gmeId);
        };

        DataSetControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
            if (this._currentNodeId === activeObjectId) {
                // The same node selected as before - do not trigger
            } else {
                this.selectedObjectChanged(activeObjectId);
            }
        };

        /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
        DataSetControl.prototype.destroy = function () {
            this._detachClientEventListeners();
            this._removeToolbarItems();
        };

        DataSetControl.prototype._attachClientEventListeners = function () {
            this._detachClientEventListeners();
            WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
        };

        DataSetControl.prototype._detachClientEventListeners = function () {
            WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
        };

        DataSetControl.prototype.onActivate = function () {
            this._attachClientEventListeners();
            this._displayToolbarItems();

            if (typeof this._currentNodeId === 'string') {
                WebGMEGlobal.State.registerSuppressVisualizerFromNode(true);
                WebGMEGlobal.State.registerActiveObject(this._currentNodeId);
                WebGMEGlobal.State.registerSuppressVisualizerFromNode(false);
            }
        };

        DataSetControl.prototype.onDeactivate = function () {
            this._detachClientEventListeners();
            this._hideToolbarItems();
        };

        /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
        DataSetControl.prototype._displayToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].show();
                }
            } else {
                this._initializeToolbar();
            }
        };

        DataSetControl.prototype._hideToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].hide();
                }
            }
        };

        DataSetControl.prototype._removeToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].destroy();
                }
            }
        };

        DataSetControl.prototype._initializeToolbar = function () {
            var self = this,
                toolBar = WebGMEGlobal.Toolbar;

            this._toolbarItems = [];

            this._toolbarItems.push(toolBar.addSeparator());

            /************** Go to hierarchical parent button ****************/
            this.$btnModelHierarchyUp = toolBar.addButton({
                title: 'Go to parent',
                icon: 'glyphicon glyphicon-circle-arrow-up',
                clickFn: function (/*data*/) {
                    WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
                }
            });
            this._toolbarItems.push(this.$btnModelHierarchyUp);
            this.$btnModelHierarchyUp.hide();

            /************** Checkbox example *******************/

            this.$cbShowConnection = toolBar.addCheckBox({
                title: 'toggle checkbox',
                icon: 'gme icon-gme_diagonal-arrow',
                checkChangedFn: function (data, checked) {
                    self._logger.debug('Checkbox has been clicked!');
                }
            });
            this._toolbarItems.push(this.$cbShowConnection);

            this._toolbarInitialized = true;
        };

        return DataSetControl;
    });
