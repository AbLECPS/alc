/*globals define, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jul 07 2016 11:24:16 GMT-0500 (Central Daylight Time).
 */

define(['js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (CONSTANTS,
             GMEConcepts,
             nodePropertyNames) {

    'use strict';

    var ModesControl;

    ModesControl = function (options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
    };

    ModesControl.prototype._initWidgetEventHandlers = function () {
        var self = this;
        this._widget.onNodeClick = function (id) {
            var targetNodeObj = self._client.getNode(id);
            if (targetNodeObj) {
                self._logger.debug('*******************got object');
                if (targetNodeObj.getParentId() || targetNodeObj.getParentId() === CONSTANTS.PROJECT_ROOT_ID) {
                    self._logger.debug('*******************got parent id');
                    WebGMEGlobal.State.registerActiveObject(targetNodeObj.getParentId());
                    WebGMEGlobal.State.registerActiveSelection([id]);
                    WebGMEGlobal.State.registerActiveVisualizer('ModelEditor');
                } 
	     
            }
	   
        };
	
        	
        this._widget.onEditModeInfo = function (id, newValue, modevalues,compname) {
            self._logger.debug(' on edit onEditNode1');
            var i=0;
            var prefix = '';
            var newmodeValue='';
            for (i=0; i!= newValue.length; i++){
                newmodeValue += prefix;
                newmodeValue += modevalues[newValue[i]-1];
                prefix =',';
            }
            var modenode = self._client.getNode(id);
            var oldvalue='';
            if (modenode)
			{
                oldvalue = modenode.getAttribute(compname);
				if (oldvalue)
					self._logger.debug( 'old mode value' + oldvalue);
				self._client.setAttributes(id,compname, newmodeValue);
				// if (!oldvalue)
				// {
					// var attrmeta = modenode.getAttributeMeta(compname);
					// attrmeta.hidden = true;
					// modenode.setAttributeMeta(compname,attrmeta);
				// }
				self._logger.debug( 'new mode value' + newmodeValue);
			}
	  
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    ModesControl.prototype.selectedObjectChanged = function (nodeId) {
    
        var desc =  undefined,
                self = this;
        self._getObjectDescriptor(nodeId)
            .then(function(desc) {

                self._logger.debug('activeObject nodeId \'' + nodeId + '\'');
                self._logger.debug('metaname of activeobject= '+ desc.metaName);
        
                // Remove current territory patterns
                if (self._currentNodeId) {
                    self._client.removeUI(self._territoryId);
                }

                self._currentNodeId = nodeId;
                self._currentNodeParentId = undefined;

                if (typeof self._currentNodeId === 'string') {
                    // Put new node's info into territory rules
                    self._selfPatterns = {};
                    self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

                    self._widget.setTitle("Mode Mapping");

                    if (typeof desc.parentId === 'string') {
                        self.$btnModelHierarchyUp.show();
                    } else {
                        self.$btnModelHierarchyUp.hide();
                    }

                    self._currentNodeParentId = desc.parentId;

                    self._territoryId = self._client.addUI(self, function (events) {
                        self._eventCallback(events);
                    });

                    // Update the territory
                    self._client.updateTerritory(self._territoryId, self._selfPatterns);

                    self._selfPatterns[nodeId] = {children: 10};
                    self._client.updateTerritory(self._territoryId, self._selfPatterns);
                }
            });
    };

    // This next function retrieves the relevant node information for the widget
    ModesControl.prototype._getObjectDescriptor = function (nodeId) {
        var self=this;
        var nodeObj = self._client.getNode(nodeId);
        var obj, k;
            
	
        return new Promise(function(resolve,reject) {
	
            if (nodeObj) {
                var objDescriptor = {
                    id: undefined,
					parentId: undefined,
					phname: undefined,
                    name: undefined,
                    modevars: undefined,
					initialmode: undefined,
                    systemmodes: undefined,
					metaName: undefined,
					use: 0
                };

                

                
                var metaObj = self._client.getNode(nodeObj.getMetaTypeId());
				objDescriptor.id = nodeObj.getId();
				objDescriptor.name = nodeObj.getAttribute(nodePropertyNames.Attributes.name);
				objDescriptor.parentId = nodeObj.getParentId();
				
                if (metaObj) {
                    objDescriptor.metaName = metaObj.getAttribute(nodePropertyNames.Attributes.name);
                    if ((self._currentNodeId) && (((objDescriptor.metaName == 'ModeVariable') && (objDescriptor.parentId  != self._currentNodeId)) || ((objDescriptor.metaName == 'System_Model') && (objDescriptor.id  == self._currentNodeId))))
                    {
						var childrenIds = nodeObj.getChildrenIds();
                        objDescriptor.modevars = {};
						objDescriptor.initialmode = "";
						objDescriptor.systemmodes = {};
						
						
						
						
						if (objDescriptor.metaName == 'ModeVariable')
						{
							if (objDescriptor.parentId  != self._currentNodeId)
								objDescriptor.phname = self.getHierName(objDescriptor.parentId );
							else
								objDescriptor.phname = '';
								
						
							for (k=0; k<childrenIds.length; k++)
							{
								var cnode = self._client.getNode(childrenIds[k]);
								var mname = cnode.getAttribute(nodePropertyNames.Attributes.name);
								objDescriptor.modevars[mname] = childrenIds[k];
								var isinitial = cnode.getAttribute("IsInitial");
								if (isinitial)
									objDescriptor.initialmode = mname;
									
							}
							objDescriptor.use=1;
							
						}
						else if (objDescriptor.metaName == 'System_Model')
						{
							for (k=0; k<childrenIds.length; k++)
							{
								var cnode = self._client.getNode( childrenIds[k]);
								var cmetaObj = self._client.getNode(cnode.getMetaTypeId());
								var cmetaname = cmetaObj.getAttribute(nodePropertyNames.Attributes.name);
								if (cmetaname == 'Mode')
								{
									var mname = cnode.getAttribute(nodePropertyNames.Attributes.name);
									objDescriptor.systemmodes[mname] = {id: childrenIds[k], modeselection: {}};
									var attnames = cnode.getAttributeNames();
									var a=0;
									for(a=0; a< attnames.length; a++)
									{
										if (attnames[a]=='name' || attnames[a]=='IsInitial')
											continue;
										var avalue= cnode.getAttribute(attnames[a]);
										objDescriptor.systemmodes[mname].modeselection[attnames[a]]=avalue;
									}
									
								}
								
									
							}
							objDescriptor.use=1;
						}
					}
                    resolve(objDescriptor);
                }
                else {
                    resolve(objDescriptor);
                }
            }
            else {
                resolve(objDescriptor);
            }
        });
    };
    
    ModesControl.prototype.getHierName = function (nodeid) {
        var self = this;
		var pid = nodeid;
		var nodeObj;
		var ret='';
		while (pid != self._currentNodeId)
		{
			nodeObj = self._client.getNode(pid);
			if (nodeObj)
			{	
				if (ret)
					ret += '/';
				ret += nodeObj.getAttribute(nodePropertyNames.Attributes.name);
				pid = nodeObj.getParentId();
			}
			
		}
		return ret;
			
        
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    ModesControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {
                case CONSTANTS.TERRITORY_EVENT_LOAD:
                    this._onLoad(event.eid,i);
                    break;
                case CONSTANTS.TERRITORY_EVENT_UPDATE:
                    this._onUpdate(event.eid);
                    break;
                case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                    this._onUnload(event.eid);
                    break;
                default:
                    break;
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    ModesControl.prototype._onLoad = function(gmeId,count=-1){
		var self= this;
		 this._getObjectDescriptor(gmeId)
          .then(function(description) {
              description.last=-1;
              if (count==1){
                  description.last=1;
              }
              //self._logger.debug('metaname  _onLoad= '+ description.faultlabel);
			  if ((description.last==1)||((description.use ==1 ) && (description.metaName == 'System_Model' || description.metaName == 'ModeVariable')))
			  {
				 
				 self._widget.addNode(description);
			  }
          });
		  
        
    };

        ModesControl.prototype._onUpdate = function (gmeId) {
            var self=this;
            self._getObjectDescriptor(gmeId)
            .then(function(description) {
                //self._logger.debug('metaname  _onUpdate= '+ description.metaName);
                self._widget.updateNode(description);
            });
        };

        ModesControl.prototype._onUnload = function (gmeId) {
            this._widget.removeNode(gmeId);
        };

        ModesControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
            if (this._currentNodeId === activeObjectId) {
                // The same node selected as before - do not trigger
            } else {
                this.selectedObjectChanged(activeObjectId);
            }
        };

        /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
        ModesControl.prototype.destroy = function () {
            this._detachClientEventListeners();
            this._removeToolbarItems();
        };

        ModesControl.prototype._attachClientEventListeners = function () {
            this._detachClientEventListeners();
            WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
        };

        ModesControl.prototype._detachClientEventListeners = function () {
            WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
        };

        ModesControl.prototype.onActivate = function () {
            this._attachClientEventListeners();
            this._displayToolbarItems();

            if (typeof this._currentNodeId === 'string') {
                WebGMEGlobal.State.registerSuppressVisualizerFromNode(true);
                WebGMEGlobal.State.registerActiveObject(this._currentNodeId);
                WebGMEGlobal.State.registerSuppressVisualizerFromNode(false);
            }
        };

        ModesControl.prototype.onDeactivate = function () {
            this._detachClientEventListeners();
            this._hideToolbarItems();
        };

        /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
        ModesControl.prototype._displayToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].show();
                }
            } else {
                this._initializeToolbar();
            }
        };

        ModesControl.prototype._hideToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].hide();
                }
            }
        };

        ModesControl.prototype._removeToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].destroy();
                }
            }
        };

        ModesControl.prototype._initializeToolbar = function () {
            var self = this,
                toolBar = WebGMEGlobal.Toolbar;

            this._toolbarItems = [];

            this._toolbarItems.push(toolBar.addSeparator());

            /************** Go to hierarchical parent button ****************/
            this.$btnModelHierarchyUp = toolBar.addButton({
                title: 'Go to parent',
                icon: 'glyphicon glyphicon-circle-arrow-up',
                clickFn: function (/*data*/) {
                    WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
                }
            });
            this._toolbarItems.push(this.$btnModelHierarchyUp);
            this.$btnModelHierarchyUp.hide();

            /************** Checkbox example *******************/

            this.$cbShowConnection = toolBar.addCheckBox({
                title: 'toggle checkbox',
                icon: 'gme icon-gme_diagonal-arrow',
                checkChangedFn: function (data, checked) {
                    self._logger.debug('Checkbox has been clicked!');
                }
            });
            this._toolbarItems.push(this.$cbShowConnection);

            this._toolbarInitialized = true;
        };

        return ModesControl;
    });
