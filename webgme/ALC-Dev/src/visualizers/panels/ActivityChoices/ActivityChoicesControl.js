/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Dec 04 2020 11:13:23 GMT-0600 (Central Standard Time).
 */

 define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function ActivityChoicesControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
    }

    ActivityChoicesControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    ActivityChoicesControl.prototype.selectedObjectChanged = function (nodeId) {
        var desc = this._getObjectDescriptor(nodeId),
            self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
        }

        self._currentNodeId = nodeId;
        self._currentNodeParentId = undefined;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 6};  // Territory "rule"

            self._widget.setTitle(desc.name.toUpperCase());

            if (typeof desc.parentId === 'string') {
                self.$btnModelHierarchyUp.show();
            } else {
                self.$btnModelHierarchyUp.hide();
            }

            self._currentNodeParentId = desc.parentId;

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };

    // This next function retrieves the relevant node information for the widget
    ActivityChoicesControl.prototype._getObjectDescriptor = function (nodeId) {
        var node = this._client.getNode(nodeId),
            objDescriptor;
        if (node) {

            var choices = this.getChoices(nodeId);
            objDescriptor = {
                id: node.getId(),
                name: node.getAttribute(nodePropertyNames.Attributes.name),
                childrenIds: node.getChildrenIds(),
                parentId: node.getParentId(),
                isConnection: GMEConcepts.isConnection(nodeId),
                ChoicesDict: null
            };

            if(choices != null)
            {
                objDescriptor['ChoicesDict'] = choices;
            }
        }

        return objDescriptor;
    };

    ActivityChoicesControl.prototype.getChoices = function (nodeId) {
        self = this;
        var nodeObj = this._client.getNode(this._client.getNode(nodeId).getMetaTypeId());
        if(nodeObj == null)
            return null;
        if(nodeObj.getAttribute("name") === "Activity")
        {
            var nodeChoices = this._client.getNode(nodeId).getAttribute('CurrentChoice');
            //nodeChoices = nodeChoices.replace(',','\n')
            nodeChoices = nodeChoices.split(",");
            
            if(nodeChoices != undefined && nodeChoices.length < 1)
                return null;

            var children = this._client.getNode(nodeId).getChildrenIds();
            var choiceDict = {};
            var choiceArr = [];
            for(var i = 0;i < children.length;++i)
            {
                
                var obj = this._client.getNode(children[i]);
                if(obj == null)
                    continue;
                var metaObj = this._client.getNode(obj.getMetaTypeId());
                if(metaObj.getAttribute("name") === "ParamsTable")
                {
                    var choiceList = obj.getAttribute("ChoiceList");
                    var include = false;
                    if (choiceList.length >0)
                    {
                        var choiceListVals = [];
                        var splitstr =',';
                        if (choiceList.indexOf('\n') != -1)
                        {
                            splitstr = '\n';
                        }
                        choiceListVals = choiceList.split(splitstr);
                        for(var k = 0;k < choiceListVals.length;++k)
                        {
                            if (nodeChoices.includes(choiceListVals[k]))
                            {
                                include = true;
                                break;
                            }
                        }
                        
                    }
                    if( include || choiceList.length < 1)
                    {
                        var childrenOfChild = obj.getChildrenIds();
                        if(childrenOfChild == null)
                            continue;
                        var choices = [];
                        for(var j = 0;j < childrenOfChild.length;++j)
                        {
                            if(childrenOfChild[j] == null)
                                continue;
                            var ccObj = this._client.getNode(childrenOfChild[j]);
                            if(ccObj == null)
                                continue;
                            var childMetaObj = this._client.getNode(ccObj.getMetaTypeId());
                            if(childMetaObj.getAttribute("name") === "Parameter")
                            {
                                if(ccObj.getAttribute("type") === "asset")
                                {
                                    choices.push([ccObj.getId(), 
                                        ccObj.getAttribute("name"), 
                                        ccObj.getAttribute("asset"),
                                        ccObj.getAttribute("value_choices").split("\n"), 
                                        ccObj.getAttribute("type"),
                                        ccObj.getAttribute("defaultValue"),
                                        ccObj.getAttribute("code_type")
                                    ]);
                                }
                                else
                                {
                                    choices.push([ccObj.getId(), 
                                        ccObj.getAttribute("name"), 
                                        ccObj.getAttribute("value"),
                                        ccObj.getAttribute("value_choices").split("\n"), 
                                        ccObj.getAttribute("type"),
                                        ccObj.getAttribute("defaultValue"),
                                        ccObj.getAttribute("code_type")
                                    ]);
                                }
                            }
                        }
                        choices.sort((a, b) => b[1].localeCompare(a[1]));
                        choiceArr.push([obj.getAttribute("name"), choices]);
                    }
                }
            }
            choiceArr.sort((a, b) => a[0].localeCompare(b[0]));
            for(var i = 0;i < choiceArr.length;++i)
            {
                choiceDict[choiceArr[i][0]] = choiceArr[i][1];
            }
            
            return choiceDict;
        }
        return null;
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    ActivityChoicesControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {

            case CONSTANTS.TERRITORY_EVENT_LOAD:
                this._onLoad(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UPDATE:
                this._onUpdate(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                this._onUnload(event.eid);
                break;
            default:
                break;
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    ActivityChoicesControl.prototype._onLoad = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.addNode(description);
    };

    ActivityChoicesControl.prototype._onUpdate = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.updateNode(description);
    };

    ActivityChoicesControl.prototype._onUnload = function (gmeId) {
        this._widget.removeNode(gmeId);
    };

    ActivityChoicesControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ActivityChoicesControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    ActivityChoicesControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    ActivityChoicesControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    ActivityChoicesControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }     
    };

    ActivityChoicesControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    ActivityChoicesControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    ActivityChoicesControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    ActivityChoicesControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    ActivityChoicesControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

    return ActivityChoicesControl;
});
