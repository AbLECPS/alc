/*globals define, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Jul 11 2016 14:10:23 GMT-0500 (Central Daylight Time).
 */

define(['js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (CONSTANTS,
             GMEConcepts,
             nodePropertyNames) {

    'use strict';

    var LabelsControl;

    LabelsControl = function (options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
    };

    LabelsControl.prototype._initWidgetEventHandlers = function () {
        var self = this;
        this._widget.onNodeClick = function (id) {
            var targetNodeObj = self._client.getNode(id);
            if (targetNodeObj) {
                self._logger.debug('*******************got object');
                if (targetNodeObj.getParentId() || targetNodeObj.getParentId() === CONSTANTS.PROJECT_ROOT_ID) {
                    self._logger.debug('*******************got parent id');
                    WebGMEGlobal.State.registerActiveObject(targetNodeObj.getParentId());
                    WebGMEGlobal.State.registerActiveSelection([id]);
                    WebGMEGlobal.State.registerActiveVisualizer('ModelEditor');
                } 
	     
            }
	   
        };
	
	
	
        this._widget.onEditLabelInfo = function (id, newValue, labelvalues,compname) {
            self._logger.debug(' on edit onEditLabelInfo');
            var i=0;
            var prefix = '';
            var newlabelValue='';
            for (i=0; i!= newValue.length; i++){
                newlabelValue += prefix;
                newlabelValue += labelvalues[newValue[i]-1];
                prefix =',';
            }
            var labelnode = self._client.getNode(id);
            var oldvalue='';
            if (labelnode)
                oldvalue = labelnode.getAttribute(compname);
            if (oldvalue)
                self._logger.debug( 'old label value' + oldvalue);
            self._client.setAttributes(id, compname, newlabelValue);
            self._logger.debug( 'new mode value' + newlabelValue);
	  
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    LabelsControl.prototype.selectedObjectChanged = function (nodeId) {
    
        var desc =  undefined,
                self = this;
        self._getObjectDescriptor(nodeId)
            .then(function(desc) {
        
                self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

                // Remove current territory patterns
                if (self._currentNodeId) {
                    self._client.removeUI(self._territoryId);
                }

                self._currentNodeId = nodeId;
                self._currentNodeParentId = undefined;

                if (typeof self._currentNodeId === 'string') {
                    // Put new node's info into territory rules
                    self._selfPatterns = {};
                    self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

                    self._widget.setTitle(desc.name.toUpperCase());

                    if (typeof desc.parentId === 'string') {
                        self.$btnModelHierarchyUp.show();
                    } else {
                        self.$btnModelHierarchyUp.hide();
                    }

                    self._currentNodeParentId = desc.parentId;

                    self._territoryId = self._client.addUI(self, function (events) {
                        self._eventCallback(events);
                    });

                    // Update the territory
                    self._client.updateTerritory(self._territoryId, self._selfPatterns);

                    self._selfPatterns[nodeId] = {children: 2};
                    self._client.updateTerritory(self._territoryId, self._selfPatterns);
                }
            });
        
    };

    // This next function retrieves the relevant node information for the widget
    LabelsControl.prototype._getObjectDescriptor = function (nodeId) {
        var self=this;
        var nodeObj = self._client.getNode(nodeId);
        var obj;
            
        return new Promise(function(resolve,reject) {
	
            if (nodeObj) {
                var objDescriptor = {
                    id: undefined,
                    name: undefined,
                    childrenIds: undefined,
                    childrenNum:undefined,
                    parentId: undefined,
                    isConnection: false,
                    metaName:undefined,
                    labels: undefined,
                    labelselection: undefined
                };

                objDescriptor.id = nodeObj.getId();
                objDescriptor.name = nodeObj.getAttribute(nodePropertyNames.Attributes.name);
                objDescriptor.childrenIds = nodeObj.getChildrenIds();
                objDescriptor.childrenNum = objDescriptor.childrenIds.length;
                objDescriptor.parentId = nodeObj.getParentId();
                objDescriptor.isConnection = GMEConcepts.isConnection(nodeId);  // GMEConcepts can be helpful
                var metaObj = self._client.getNode(nodeObj.getMetaTypeId()),
                metaName = undefined;
                if (metaObj) {
                    metaName = metaObj.getAttribute(nodePropertyNames.Attributes.name);
                    objDescriptor.metaName= metaName;
		    
                    if ((objDescriptor.metaName == 'Block') && (objDescriptor.parentId  == self._currentNodeId))
                    {
                        objDescriptor.labels = [];
                        self._logger.debug('need to visit children and mode objs');
                        var k =0;
                        for (k=0; k<objDescriptor.childrenIds.length; k++)
                        {
                            var cnode = self._client.getNode( objDescriptor.childrenIds[k]);
                            var clobj = self._client.getNode(cnode.getMetaTypeId());
                            var clname = clobj.getAttribute(nodePropertyNames.Attributes.name);
                            if (clname == 'FailureLabel')
                            {
                                var lname = cnode.getAttribute(nodePropertyNames.Attributes.name);
                                objDescriptor.labels.push(lname);
				
                            }
                        }
                        if (objDescriptor.labels){
                            objDescriptor.labels.sort();
                        }
		    
                    }
                    else if ((objDescriptor.metaName == 'FailureLabel')&& (objDescriptor.parentId  == self._currentNodeId))
                    {
                        self._logger.debug('need to gather previous label values');
                        objDescriptor.labelselection={};
                        var attnames = nodeObj.getAttributeNames();
                        var a=0;
                        for(a=0; a< attnames.length; a++)
                        {
                            if (attnames[a]=='name')
                                continue;
                            var avalue= nodeObj.getAttribute(attnames[a]);
                            objDescriptor.labelselection[attnames[a]]=avalue;
                        }
    
                    }
                    resolve(objDescriptor);
                }
                else {
                    resolve(objDescriptor);
                }
            }
            else {
                resolve(objDescriptor);
            }
        });
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    LabelsControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {
                case CONSTANTS.TERRITORY_EVENT_LOAD:
                    this._onLoad(event.eid,i);
                    break;
                case CONSTANTS.TERRITORY_EVENT_UPDATE:
                    this._onUpdate(event.eid);
                    break;
                case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                    this._onUnload(event.eid);
                    break;
                default:
                    break;
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    LabelsControl.prototype._onLoad = function (gmeId,count=-1) {
        var self=this;
        var node = self._client.getNode(gmeId);
        var pnodeid = node.getParentId();
        if ((gmeId == self._currentNodeId) || (pnodeid == self._currentNodeId))
        {
            self._getObjectDescriptor(gmeId)
                .then(function(description) {
                    description.use=1;
                    description.last=-1;
                    if (count==1){
                        description.last=1;
                    }
                    self._widget.addNode(description);
                });
        }
        else
        {
            self._logger.debug('not handling obj');
            var objDescriptor = {
                last: -1,
                use: -1};
            if (count==1){
                objDescriptor.last=1;
            }
            self._widget.addNode(objDescriptor);
        }
    };

        LabelsControl.prototype._onUpdate = function (gmeId) {
            var self=this;
            self._getObjectDescriptor(gmeId)
            .then(function(description) {
                //self._logger.debug('metaname  _onUpdate= '+ description.metaName);
                self._widget.updateNode(description);
            });
        };

        LabelsControl.prototype._onUnload = function (gmeId) {
            this._widget.removeNode(gmeId);
        };

        LabelsControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
            if (this._currentNodeId === activeObjectId) {
                // The same node selected as before - do not trigger
            } else {
                this.selectedObjectChanged(activeObjectId);
            }
        };

        /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
        LabelsControl.prototype.destroy = function () {
            this._detachClientEventListeners();
            this._removeToolbarItems();
        };

        LabelsControl.prototype._attachClientEventListeners = function () {
            this._detachClientEventListeners();
            WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
        };

        LabelsControl.prototype._detachClientEventListeners = function () {
            WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
        };

        LabelsControl.prototype.onActivate = function () {
            this._attachClientEventListeners();
            this._displayToolbarItems();

            if (typeof this._currentNodeId === 'string') {
                WebGMEGlobal.State.registerSuppressVisualizerFromNode(true);
                WebGMEGlobal.State.registerActiveObject(this._currentNodeId);
                WebGMEGlobal.State.registerSuppressVisualizerFromNode(false);
            }
        };

        LabelsControl.prototype.onDeactivate = function () {
            this._detachClientEventListeners();
            this._hideToolbarItems();
        };

        /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
        LabelsControl.prototype._displayToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].show();
                }
            } else {
                this._initializeToolbar();
            }
        };

        LabelsControl.prototype._hideToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].hide();
                }
            }
        };

        LabelsControl.prototype._removeToolbarItems = function () {

            if (this._toolbarInitialized === true) {
                for (var i = this._toolbarItems.length; i--;) {
                    this._toolbarItems[i].destroy();
                }
            }
        };

        LabelsControl.prototype._initializeToolbar = function () {
            var self = this,
                toolBar = WebGMEGlobal.Toolbar;

            this._toolbarItems = [];

            this._toolbarItems.push(toolBar.addSeparator());

            /************** Go to hierarchical parent button ****************/
            this.$btnModelHierarchyUp = toolBar.addButton({
                title: 'Go to parent',
                icon: 'glyphicon glyphicon-circle-arrow-up',
                clickFn: function (/*data*/) {
                    WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
                }
            });
            this._toolbarItems.push(this.$btnModelHierarchyUp);
            this.$btnModelHierarchyUp.hide();

            /************** Checkbox example *******************/

            this.$cbShowConnection = toolBar.addCheckBox({
                title: 'toggle checkbox',
                icon: 'gme icon-gme_diagonal-arrow',
                checkChangedFn: function (data, checked) {
                    self._logger.debug('Checkbox has been clicked!');
                }
            });
            this._toolbarItems.push(this.$cbShowConnection);

            this._toolbarInitialized = true;
        };

        return LabelsControl;
    });
