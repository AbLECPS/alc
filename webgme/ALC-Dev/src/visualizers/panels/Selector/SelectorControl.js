/*globals define, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jul 07 2016 11:24:16 GMT-0500 (Central Daylight Time).
 */

define(['js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (CONSTANTS,
             GMEConcepts,
             nodePropertyNames) {

    'use strict';

    var SelectorControl;

    SelectorControl = function (options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');

        this.parentFoldersVisited = 0;
        this.failureLabels = [];
        this.parentFolders = [];
        this.type = '';
        this.refType = '';
        this.setType = '';
        this.exptTypes = [];
        this.systemModels = [];
        this.isGSN = 0;
        this.isLEC = 0;
        this.isSystemID = 0;
        this.isInitData = 0;
        this.isInitLEC = 0;
        this.isActivity = 0;
        this.isLaunchFile = 0;
        this.isModelRefNode = 0;
        this.isStructureRef =0;
        this.isBarrier = 0;
        this.isEffect = 0;
        this.isRespose = 0 ;

        this.alcrootid = '';
        this.alcid = '';
        this.constructionid = '';
        this.vvaid = '';
        this.assemblyid = '';
        this.systemmodelid = '';
        


        this.gatherSystemModels = 0;
        this.countlimit = 1;
    };

    SelectorControl.prototype._initWidgetEventHandlers = function () {
        var self = this;
        this._widget.onNodeClick = function (id) {
            var targetNodeObj = self._client.getNode(id);
            if (targetNodeObj) {
                self._logger.debug('*******************got object');
                if (targetNodeObj.getParentId() || targetNodeObj.getParentId() === CONSTANTS.PROJECT_ROOT_ID) {
                    self._logger.debug('*******************got parent id');
                    WebGMEGlobal.State.registerActiveObject(targetNodeObj.getParentId());
                    WebGMEGlobal.State.registerActiveSelection([id]);
                    WebGMEGlobal.State.registerActiveVisualizer('ModelEditor');
                }

            }

        };


        this._widget.onEditSelectionInfo = function (value) {
            self._logger.debug(' on edit onEditNode1');
            self._client.startTransaction('updating implementation selection');
            if (value != null)
            {
                self._client.setPointer(self._currentNodeId, self.refType, value);
            }
            else {
                self._client.delPointer(self._currentNodeId, self.refType);
            }
            self._client.completeTransaction('updated selection', function (err, result) {
                self._logger.debug(result.hash);
                self._logger.debug(result.status);
            });
        };

        this._widget.onEditReferenceDetails = function (value) {
            var i = 0;
            self._logger.debug(' on edit Reference details');
            self._client.startTransaction('updating reference details');
            var currentNodeObj = self._client.getNode(self._currentNodeId);
            if (!currentNodeObj)
            {
                return;
            }
            var childIds = currentNodeObj.getChildrenIds();
            var childObj = null;
            for(i=0; i!=childIds.length; i+=1)
            {
                childObj = self._client.getNode(childIds[i]);
                if (childObj)
                {
                    if (value)
                    {
                        self._client.setAttribute(childIds[i],'subpath', value);
                    }
                    break;
                }
                
            }
            if (value == '' && childObj)
            {
                self._client.setAttribute(childIds[i],'subpath', null);
            }
            if (value != '' && !childObj)
            {
                var cMeta = self._client.getChildrenMeta(self._currentNodeId);
                var baseMetaID = -1; 
                var baseNode = '';
                for (i =0; i !=cMeta.items.length; i++) {
                    var cMetaNode = self._client.getNode(cMeta.items[i].id);
                    if (cMetaNode)
                    {
                        var name = cMetaNode.getAttribute('name');
                        if (name.indexOf('RefDetail')!=-1)
                        {
                            baseMetaID = cMeta.items[i].id;
                            baseNode = cMetaNode;
                            break;

                        }
                    }
                }
                if (value == '')
                {
                    value=null;
                }

                var n = self._client.createNode({parentId: self._currentNodeId, baseId:baseMetaID},{attributes:{subpath:value}});

            }

            self._client.completeTransaction('updated selection', function (err, result) {
                //self._logger.debug(result.hash);
                //self._logger.debug(result.status);
            });
        };

        this._widget.onEditSetInfo = function (ids, setType='') {
            self._logger.debug(' on edit onEditNode1');
            if (self.isLEC || self.isSystemID) {
                var value = '';
                if (ids['add'].length > 0)
                    value = ids['add'][0];
                self._widget.onEditSelectionInfo(value);
                return;
            }
            self._client.startTransaction('updating implementation selection');
            var rset = ids['remove'];
            var aset = ids['add'];
            var i = 0;
            var set_type = setType;
            if (set_type == '')
            {
                set_type = self.setType;
            }


            for (i = 0; i != rset.length; i += 1) {
                self._client.removeMember(self._currentNodeId, rset[i], set_type);
            }
            for (i = 0; i != aset.length; i += 1) {
                self._client.addMember(self._currentNodeId, aset[i], set_type);
            }
            self._client.completeTransaction('updated selection', function (err, result) {
                //self._logger.debug(result.hash);
                //self._logger.debug(result.status);
            });
        };

        this._widget.onEditModelRefInfo = function (ids, setType='') {
            self._logger.debug(' on edit onEditNode1');
            
            self._client.startTransaction('updating implementation selection');
            var rset = ids['remove'];
            var aset = ids['add'];
            var i = 0, j = 0;
            var element_type = setType;
            var refElements = ['model','evidence', 'requirement','function', 'hazard','mitigation', 'bowtie'];
            if (element_type == '')
            {
                return;
            }

            if (refElements.indexOf(element_type.toLocaleLowerCase().trim())==-1)
            {
                return;
            }

            var currentNodeObj = self._client.getNode(self._currentNodeId);
            if (!currentNodeObj)
            {
                return;
            }
            var childIds = currentNodeObj.getChildrenIds();
            var deleteNodes = []
            for(i=0; i!=childIds.length; i+=1)
            {
                var childObj = self._client.getNode(childIds[i]);
                if (childObj)
                {
                    var child_element_type = childObj.getAttribute('element_type');
                    if (element_type != child_element_type)
                    {
                        continue;
                    }
                    var ptrid = childObj.getPointer('Ref');
                    if (ptrid ) {
                        var ptr_path = ptrid.to;
                        if (rset.indexOf(ptr_path) !=-1)
                        {
                            deleteNodes.push(childIds[i]);
                        }
                    }
                } 
            }


            for (i = 0; i != deleteNodes.length; i += 1) {
                self._client.deleteNode(deleteNodes[i]);
            }

            var cMeta = self._client.getChildrenMeta(self._currentNodeId);
            var baseMetaID = -1; 
            var baseNode = '';
            for (i =0; i !=cMeta.items.length; i++) {
                var cMetaNode = self._client.getNode(cMeta.items[i].id);
                if (cMetaNode)
                {
                    var name = cMetaNode.getAttribute('name');
                    if (name.indexOf('ModelRef')!=-1)
                    {
                        baseMetaID = cMeta.items[i].id;
                        baseNode = cMetaNode;
                        break;

                    }
                }
            }

            if (baseMetaID !=-1)
            {
                for (i = 0; i != aset.length; i += 1) {
                    var n = self._client.createNode({parentId: self._currentNodeId, baseId:baseMetaID},{attributes:{element_type:setType}, pointer:{Ref: {to:aset[i]}}} );
                    
                    
                    if (n)
                    {
                        
                        var aobj = self._client.getNode(aset[i]);
                        //self._client.setAttribute(n,'element_type',setType);
                        if (aobj)
                        {
                            self._client.setPointer(n,'Ref',aset[i]);
                        }
                        
    

                    }
                }
            }
            self._client.completeTransaction('updated selection', function (err, result) {
                //self._logger.debug(result.hash);
                //self._logger.debug(result.status);
            });
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    SelectorControl.prototype.selectedObjectChanged = function (nodeId) {

        var desc = undefined,
            self = this;
        self._getObjectDescriptor(nodeId)
            .then(function (desc) {

                self._logger.debug('activeObject nodeId \'' + nodeId + '\'');
                self._logger.debug('metaname of activeobject= ' + desc.metaName);

                // Remove current territory patterns
                if (self._currentNodeId) {
                    self._client.removeUI(self._territoryId);
                }

                self._currentNodeId = nodeId;
                self._currentNodeParentId = undefined;

                if (typeof self._currentNodeId === 'string') {
                    // Put new node's info into territory rules
                    self._selfPatterns = {};
                    self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

                    self._widget.setTitle("Selection");

                    if (typeof desc.parentId === 'string') {
                        self.$btnModelHierarchyUp.show();
                    } else {
                        self.$btnModelHierarchyUp.hide();
                    }

                    self._currentNodeParentId = desc.parentId;

                    self._territoryId = self._client.addUI(self, function (events) {
                        self._eventCallback(events);
                    });

                    // Update the territory
                    //self._client.updateTerritory(self._territoryId, self._selfPatterns);

                    //self._selfPatterns[nodeId] = {children: 100};
                    //self._client.updateTerritory(self._territoryId, self._selfPatterns);

                    self._selfPatterns[nodeId] = {children: 0};
                    var i = 0;
                    var depth = 3;
                    if (self.isGSN || self.isStructureRef) {
                        depth = 1;
                        if (self.alcid != '')
                            depth = 4;
                    } else if (self.constructionid != '' || self.vvaid != '')
                        depth = 4;
                    else if (self.alcid != '')
                        depth = 5;
                    else if (self.assemblyid != '')
                        depth = 20;

                    for (i = 0; i != self.parentFolders.length; i += 1) {
                        self._selfPatterns[self.parentFolders[i]] = {children: depth};
                    }

                    /*
                     for (i = 0; i != self.systemModels.length; i += 1) {
                        self._selfPatterns[self.systemModels[i]] = { children: 50 };
                     }*/


                    self._client.updateTerritory(self._territoryId, self._selfPatterns);
                }
            });
    };

    SelectorControl.prototype.getRefIndex = function (refType) {
        var self = this;
        var refElements = ['model','evidence', 'requirement','function', 'hazard','mitigation', 'bowtie','bowtieevent'];
        var type = refType.toLowerCase().trim();
        if (type == '')
            return -1;
        return refElements.indexOf(type);
    };

    SelectorControl.prototype.updateRefType = function (refType) {
        var self = this;
        var refElements = ['model','evidence', 'requirement','function', 'hazard','mitigation', 'bowtie', 'bowtieevent'];
        var type = refType.toLowerCase().trim();
        if (type == '')
            return ''
        if (refElements.indexOf(type) !=-1)
        {
            return refType;
        }
        
        var refmap = { 'systemmodel':'model', 'topfn':'function','primitivefn':'function', 'drm': 'bowtiemodel'}
        var keys = Object.keys(refmap);
        if (keys.indexOf(type)!=-1)
        {
            return refmap[type];
        }
        return refType;

    };

    // This next function retrieves the relevant node information for the widget
    SelectorControl.prototype._getObjectDescriptor = function (nodeId) {
        var self = this;
        var nodeObj = self._client.getNode(nodeId);
        var obj, k;


        return new Promise(function (resolve, reject) {

            if (nodeObj) {
                var objDescriptor = {
                    id: undefined,
                    childrenIds: undefined,
                    parentId: undefined,
                    metaName: undefined,
                    exptName: undefined,
                    results: undefined,
                    selected_results: [],
                    refInfo:"",
                    btreedetails:"",
                    hname: undefined,
                    isBarrier:0,
                    isResponse:0,
                    isEffect:0,
                    isGSN: 0,
                    isLEC: 0,
                    isActivity: 0,
                    isSystemID: 0,
                    isLaunchFile: 0,
                    isCurrentLaunchFile: 0,
                    isStructureRef : 0,
                    isFunctionRef: 0,
                    isDefault:0,
                    use: 0
                };

                var metaObj = self._client.getNode(nodeObj.getMetaTypeId()),
                    metaName = undefined,
                    id = nodeObj.getId(),
                    parentId = nodeObj.getParentId(),
                    pMetaName = '',
                    parentObj = self._client.getNode(parentId);
                
                var parentName = '';
                if (parentObj)
                {
                    parentName = parentObj.getAttribute(nodePropertyNames.Attributes.name);
                }


                if (metaObj) {
                    metaName = metaObj.getAttribute(nodePropertyNames.Attributes.name);
                }

                if (!self._currentNodeId)
                    self.getParentFolders(nodeObj);

                if ((self.isBarrier || self.isEffect || self.isResponse)&& self.isFunctionRef(metaName)) {
                    objDescriptor.id = nodeObj.getId();
                    objDescriptor.metaName = metaName;
                    objDescriptor.isBarrier = self.isBarrier;
                    objDescriptor.isResponse = self.isResponse; 
                    objDescriptor.isEffect = self.isEffect;  
                    objDescriptor.name = nodeObj.getAttribute(nodePropertyNames.Attributes.name);
                    objDescriptor.hname = parentName + '/' + objDescriptor.name;

                    resolve(objDescriptor);
                }


                if ((!self.isGSN) && (!self.isActivity) && (!self.assemblyid) && (metaName == "Result")) {
                    if (parentId) {
                        parentObj = self._client.getNode(parentId);
                        if (parentObj) {

                            var pmetaObj = self._client.getNode(parentObj.getMetaTypeId());
                            if (pmetaObj)
                                pMetaName = pmetaObj.getAttribute(nodePropertyNames.Attributes.name);

                        }
                    }

                    if (pMetaName && self.checkMetaType(pMetaName)) {
                        objDescriptor.id = nodeObj.getId();
                        objDescriptor.childrenIds = nodeObj.getChildrenIds();
                        objDescriptor.metaName = metaName;
                        objDescriptor.exptName = parentObj.getAttribute(nodePropertyNames.Attributes.name);
                        objDescriptor.results = {};
                        var k = 0;
                        var lresults = {};
                        for (k = 0; k < objDescriptor.childrenIds.length; k++) {
                            var cnode = self._client.getNode(objDescriptor.childrenIds[k]);
                            if (cnode) {
                                var clobj = self._client.getNode(cnode.getMetaTypeId());
                                if (clobj) {
                                    var clname = clobj.getAttribute(nodePropertyNames.Attributes.name);
                                    if (clname.indexOf('Data') != -1) {
                                        var datainfo = cnode.getAttribute('datainfo');
                                        if ((datainfo != '') && (datainfo != '{}')) {
                                            var lname = cnode.getAttribute(nodePropertyNames.Attributes.name);
                                            lresults[lname] = objDescriptor.childrenIds[k];
                                        }
                                    }
                                }
                            }
                        }
                        var sortednames = Object.keys(lresults);
                        sortednames = sortednames.sort();
                        for (k = 0; k < sortednames.length; k++) {
                            objDescriptor.results[sortednames[k]] = lresults[sortednames[k]];
                        }


                    }

                    resolve(objDescriptor);

                }

                if ((!self.isGSN) && (self.isActivity) && (!self.assemblyid) && (self.checkMetaType(metaName))) {
                    if (parentId) {
                        parentObj = self._client.getNode(parentId);
                        if (parentObj) {

                            var pmetaObj = self._client.getNode(parentObj.getMetaTypeId());
                            if (pmetaObj)
                                pMetaName = pmetaObj.getAttribute(nodePropertyNames.Attributes.name);

                        }
                    }

                    objDescriptor.id = nodeObj.getId();
                    objDescriptor.childrenIds = nodeObj.getChildrenIds();
                    objDescriptor.metaName = metaName;
                    objDescriptor.exptName = nodeObj.getAttribute(nodePropertyNames.Attributes.name);
                    objDescriptor.results = {};
                    var k = 0;
                    var lresults = {};
                    for (k = 0; k < objDescriptor.childrenIds.length; k++) {
                        var cnode = self._client.getNode(objDescriptor.childrenIds[k]);
                        if (cnode) {
                            var clobj = self._client.getNode(cnode.getMetaTypeId());
                            if (clobj) {
                                var clname = clobj.getAttribute(nodePropertyNames.Attributes.name);
                                if (self.checkActivityMetaType(clname)) {

                                    var lname = cnode.getAttribute(nodePropertyNames.Attributes.name);
                                    lresults[lname] = objDescriptor.childrenIds[k];

                                }
                            }
                        }
                    }
                    var sortednames = Object.keys(lresults);
                    sortednames = sortednames.sort();
                    for (k = 0; k < sortednames.length; k++) {
                        objDescriptor.results[sortednames[k]] = lresults[sortednames[k]];
                    }

                    resolve(objDescriptor);

                }

                if ((self.isGSN || self.isStructureRef) && self._currentNodeId) {
                    if (self.gatherSystemModels == 0) {
                        if (metaName.indexOf("SystemModel") > -1) {
                            self.systemModels.push(nodeId);
                            //resolve(objDescriptor);
                        }
                    }
                    if ((self.isGSN && self.isGSNRef(metaName))|| (self.isStructureRef && self.isStructureReference(metaName))) {
                        objDescriptor.id = nodeObj.getId();
                        objDescriptor.parentId = parentId;
                        objDescriptor.metaName = metaName;
                        if (self.isGSN)
                        {
                            objDescriptor.isGSN = 1;
                        }

                        if (self.isStructureRef)
                        {
                            objDescriptor.isStructureRef = 1;
                            //rosinfo node
                            var cids  = nodeObj.getChildrenIds();
                            var k = 0;
                            for (k = 0; k < cids.length; k++) {
                                var cnode = self._client.getNode(cids[k]);
                                if (cnode) {
                                    var clobj = self._client.getNode(cnode.getMetaTypeId());
                                    if (clobj) {
                                        var clname = clobj.getAttribute(nodePropertyNames.Attributes.name);
                                        if (clname.indexOf('ROSInfo') != -1) {
                                            var btreedetails = cnode.getAttribute('BTreeModel');
                                            if (btreedetails)
                                            {
                                                objDescriptor.btreedetails = btreedetails;
                                            }
                                        }
                                    }
                                }
                            }

                        }
                        objDescriptor.name = nodeObj.getAttribute(nodePropertyNames.Attributes.name);
                        objDescriptor.hname = parentName + '.' + objDescriptor.name;
                        if (metaName == 'Block' || metaName == 'SystemModel') {
                            objDescriptor.hname = self.getHierName(objDescriptor.id);
                            if (objDescriptor.hname.indexOf('BlockLibrary')!=-1 || objDescriptor.hname.indexOf('Assemblys')!=-1)
                            {
                                objDescriptor.metaName = '';
                                objDescriptor.isGSN = 0;
                            }
                            var val = '1.Modeling/Systems/'
                            var len = val.length;
                            objDescriptor.hname = objDescriptor.hname.substring(len+1);
                            
                        }
                    }
                    resolve(objDescriptor);
                }

                if ((self.isLaunchFile) && metaName.indexOf("Block") != -1) {
                    var roleval = nodeObj.getAttribute('Role');
                    if ((roleval == 'Node') || (roleval =='Driver')) {
                        objDescriptor.id = nodeObj.getId();
                        objDescriptor.metaName = metaName;
                        objDescriptor.hname = self.getHierName(objDescriptor.id);
                        objDescriptor.results = {};
                        objDescriptor.isLaunchFile = 1;

                    }
                    resolve(objDescriptor);

                }

                if (self.isLaunchFile && metaName.indexOf("LaunchFile") != -1) {

                    if ((self._currentNodeId) && (self._currentNodeId != id)) {
                        objDescriptor.id = nodeObj.getId();
                        objDescriptor.metaName = metaName;
                        objDescriptor.selected_results = [];
                        objDescriptor.isLaunchFile = 1;
                        objDescriptor.childrenIds = nodeObj.getChildrenIds();
                        self._logger.debug('000000000000000000  getSelectedNodesForLaunchFile');
                        objDescriptor.selected_results = self.getSelectedNodesForLaunchFile(nodeObj);
                        objDescriptor.isCurrentLaunchFile = 0;
                        objDescritor.isDefault = 0;
                    }
                    resolve(objDescriptor);

                }

                if ((!self._currentNodeId) || (self._currentNodeId == id)) {

                    self._logger.debug('1111111111111111111111111111111');
                    objDescriptor.id = nodeObj.getId();
                    objDescriptor.metaName = metaName;
                    objDescriptor.selected_results = [];
                    if (objDescriptor.metaName.indexOf("File") == 0) {
                        /*var ptrid = nodeObj.getPointer('InternalDataRef');
                        if (ptrid) {
                            objDescriptor.selected_results.push(ptrid.to);
                        }*/
                        objDescriptor.selected_results = nodeObj.getMemberIds("Data");
                    }

                    if ((objDescriptor.metaName.indexOf("EvalData") != -1) || (objDescriptor.metaName.indexOf("TrainingData") != -1) || (objDescriptor.metaName.indexOf("ValidationData") != -1) || (objDescriptor.metaName.indexOf("ScenarioSet") != -1)) {
                        /*var ptrid = nodeObj.getPointer('Ref');
                        if (ptrid) {
                            objDescriptor.selected_results.push(ptrid.to);
                        }*/
                        objDescriptor.selected_results = nodeObj.getMemberIds("Data");
                    }

                    if ((objDescriptor.metaName.indexOf("Activities") != -1)) {

                        objDescriptor.selected_results = nodeObj.getMemberIds("JData");
                        self.isActivity = 1;
                        objDescriptor.isActivity = 1;

                    }

                    if ((objDescriptor.metaName.indexOf("Init_Value") != -1)) {

                        var type = nodeObj.getAttribute('Init_Type');
                        if (type == 'Data') {
                            objDescriptor.selected_results = nodeObj.getMemberIds("Init_Data");
                            self.isInitData = 1;
                        } else if ((type == 'AM') || (type == 'LEC')) {

                            var ptrid = nodeObj.getPointer('ModelDataLink');
                            if (ptrid) {
                                objDescriptor.selected_results.push(ptrid.to);
                            }
                            objDescriptor.isLEC = 1;
                            self.isLEC = 1;
                            self.isInitLEC = 1;
                        }
                    }


                    if (objDescriptor.metaName.indexOf("LEC_Model") != -1) {
                        var ptrid = nodeObj.getPointer('ModelDataLink');
                        if (ptrid) {
                            objDescriptor.selected_results.push(ptrid.to);
                        }
                        objDescriptor.isLEC = 1;
                        self.isLEC = 1;
                        //objDescriptor.selected_results = self._client.state.getMemberPaths(nodeObj,"Model");
                    }

                    if (objDescriptor.metaName.indexOf("PlantModel") != -1) {
                        var ptrid = nodeObj.getPointer('SystemID');
                        if (ptrid) {
                            objDescriptor.selected_results.push(ptrid.to);
                        }
                        objDescriptor.isSystemID = 1;
                        self.isSystemID = 1;
                        //objDescriptor.selected_results = self._client.state.getMemberPaths(nodeObj,"Model");
                    }

                    if (objDescriptor.metaName.indexOf("LaunchFile") != -1) {

                        self.isLaunchFile = 1;
                        objDescriptor.isLaunchFile = 1;
                        objDescriptor.childrenIds = nodeObj.getChildrenIds();
                        objDescriptor.metaName = metaName;
                        self._logger.debug('++++++++++++++++++  getSelectedNodesForLaunchFile');
                        objDescriptor.selected_results = self.getSelectedNodesForLaunchFile(nodeObj);
                        objDescriptor.isCurrentLaunchFile = 1;
                        objDescriptor.isDefault = nodeObj.getAttribute('default');

                    }

                    if ((objDescriptor.metaName.indexOf("StructureRef") != -1)) {
                        self.isStructureRef = 1;
                        objDescriptor.isStructureRef = 1;
                        var noderef = nodeObj.getPointer('Ref');
                        if (noderef) {
                            var noderefid = noderef.to;
                            if (noderefid)
                            {
                                objDescriptor.selected_results.push(noderefid);

                                //refdetails
                                var cids  = nodeObj.getChildrenIds();
                                var k = 0;
                                for (k = 0; k < cids.length; k++) {
                                    var cnode = self._client.getNode(cids[k]);
                                    if (cnode) {
                                        var refdetails = cnode.getAttribute('subpath');
                                        if (refdetails)
                                        {
                                            objDescriptor.refInfo = refdetails;
                                        }
                                    }
                                }

                            }
                        }
                    }

                    if ((objDescriptor.metaName.indexOf("Effect") != -1)) {
                        self.isEffect = 1;
                        objDescriptor.isEffect = 1;
                        var noderef = nodeObj.getPointer('Ref');
                        if (noderef) {
                            var noderefid = noderef.to;
                            if (noderefid)
                                objDescriptor.selected_results.push(noderefid);
                        }
                    }

                    if ((objDescriptor.metaName.indexOf("Response") != -1)) {
                        self.isResponse = 1;
                        objDescriptor.isResponse = 1;
                        var noderef = nodeObj.getPointer('Ref');
                        if (noderef) {
                            var noderefid = noderef.to;
                            if (noderefid)
                                objDescriptor.selected_results.push(noderefid);
                        }
                    }

                    if ((objDescriptor.metaName.indexOf("Mitigation") != -1)) {

                        objDescriptor.selected_results = nodeObj.getMemberIds("Implementor");
                        self.isBarrier = 1;
                        objDescriptor.isBarrier = 1;

                    }


                    if (self.isGSN)
                    {
                        objDescriptor.isGSN =1;
                        //objDescriptor.selected_results = [nodeObj.getMemberIds("Evidence"), nodeObj.getMemberIds("Model")];

                        objDescriptor.selected_results = [[],[],[],[],[],[],[]];
                        var cids  = nodeObj.getChildrenIds();
                        var k = 0;
                        for (k = 0; k < cids.length; k++) {
                            var cnode = self._client.getNode(cids[k]);
                            if (cnode) {
                                var clobj = self._client.getNode(cnode.getMetaTypeId());
                                if (clobj) {
                                    var clname = clobj.getAttribute(nodePropertyNames.Attributes.name);
                                    if (clname.indexOf('ModelRef') != -1) {
                                        var noderef = cnode.getPointer('Ref');
                                        var reftype = cnode.getAttribute('element_type')
                                        reftype = self.updateRefType(reftype);
                                        if (noderef && reftype) {
                                            var refindex = self.getRefIndex(reftype);
                                            if (refindex !=-1 )
                                            {
                                                self._logger.debug('*******  got node ref');
                                                var noderefid = noderef.to;
                                                if (!noderefid)
                                                {
                                                    continue;
                                                }
                                                if (objDescriptor.selected_results[refindex].indexOf(noderefid) != -1) {
                                                    continue;
                                                }
                                                objDescriptor.selected_results[refindex].push(noderefid);
                                            }
                
                                        }
                                    }
                                }
                            }
                        }
                        

                    }


                }

                resolve(objDescriptor);

            }
        });
    };

    SelectorControl.prototype.getSelectedNodesForLaunchFile = function (nodeObj) {
        var ret = [];
        var self = this;
        ret = nodeObj.getMemberIds("DeployedNodes");
        var cids = nodeObj.getChildrenIds();
        var k = 0;
        self._logger.debug('*******  getSelectedNodesForLaunchFile');
        for (k = 0; k < cids.length; k++) {
            var cnode = self._client.getNode(cids[k]);
            if (cnode) {
                var clobj = self._client.getNode(cnode.getMetaTypeId());
                if (clobj) {
                    var clname = clobj.getAttribute(nodePropertyNames.Attributes.name);
                    if (clname.indexOf('NodeRef') != -1) {
                        var noderef = cnode.getPointer('linked_node');
                        if (noderef) {
                            self._logger.debug('*******  got node ref');
                            var noderefid = noderef.to;
                            if (ret && ret.indexOf(noderefid) != -1) {
                                continue;
                            }
                            ret.push(noderef.to);

                        }
                    }
                }
            }
        }
        return ret;
    };

    SelectorControl.prototype.checkMetaType = function (name) {
        var self = this;
        var i = 0;
        for (i = 0; i != self.exptTypes.length; i += 1) {
            if (!self.isActivity && name.indexOf(self.exptTypes[i]) != -1) {
                return 1;
            }
            if (self.isActivity && name == self.exptTypes[i]) {
                return 1;
            }
        }
        return 0;
    };

    SelectorControl.prototype.checkActivityMetaType = function (name) {
        var self = this;
        var i = 0;
        var activityTypes = ['Activity','ExperimentSetup', 'SLTrainingSetUp', 'RLTrainingSetup','EvaluationSetup', 'AssuranceMonitorSetup', 'Campaign'];
        for (i = 0; i != activityTypes.length; i += 1) {
            if (name.indexOf(activityTypes[i]) != -1) {
                return 1;
            }
        }
        return 0;
    };

    SelectorControl.prototype.isGSNModel = function (t) {
        var self = this;
        var nodetypes = ['Goal', 'Strategy', 'Solution', 'Context', 'Assumption', 'Justification', 'ModelRef'];
        var i = 0;
        for (i = 0; i != nodetypes.length; i += 1) {
            if (t.indexOf(nodetypes[i]) > -1)
                return 1;
        }
        return 0;
    };

    SelectorControl.prototype.isModelRef = function (t) {
        var self = this;
        var nodetypes = ['ModelRef'];
        var i = 0;
        for (i = 0; i != nodetypes.length; i += 1) {
            if (t.indexOf(nodetypes[i]) > -1)
                return 1;
        }
        return 0;
    };

    SelectorControl.prototype.isFunctionRef = function (t) {
        var self = this;
        var nodetypes = ['TopFn', 'PrimitiveFn'];
        var i = 0;
        /*for(i=0; i!=nodetypes.length; i+=1)
        {
            if (t.indexOf(nodetypes[i])>-1)
                return 1;
        }*/

        if (nodetypes.indexOf(t) > -1)
            return 1;
        return 0;
    };

    SelectorControl.prototype.isGSNRef = function (t) {
        var self = this;
        var nodetypes = ['Activity','ExperimentSetup', 'SLTrainingSetUp', 'RLTrainingSetup', 'Campaign', 'EvaluationSetup','SystemModel', 'Block', 'Workflow','DRM', 'BowtieModel', 'TopFn', 'PrimitiveFn', 'Hazard','Requirement','Mitigation', 'BowTieEvent'];
        var i = 0;
        /*for(i=0; i!=nodetypes.length; i+=1)
        {
            if (t.indexOf(nodetypes[i])>-1)
                return 1;
        }*/

        if (nodetypes.indexOf(t) > -1)
            return 1;
        return 0;
    };

    SelectorControl.prototype.isStructureReference = function (t) {
        var self = this;
        var nodetypes = ['SystemModel', 'Block'];
        var i = 0;
        /*for(i=0; i!=nodetypes.length; i+=1)
        {
            if (t.indexOf(nodetypes[i])>-1)
                return 1;
        }*/

        if (nodetypes.indexOf(t) > -1)
            return 1;
        return 0;
    };

    SelectorControl.prototype.checkSystemModel = function (nodeid) {
        var ret = false;
        var self = this;
        var nodeObj = self._client.getNode(nodeid);
        if (nodeObj) {
            var metaobj = self._client.getNode(nodeObj.getMetaTypeId());
            if (metaobj) {
                var mname = metaobj.getAttribute(nodePropertyNames.Attributes.name);
                if (mname.indexOf('SystemModel') != -1) {
                    return true;
                }
            }
        }

        return ret;
    };

    SelectorControl.prototype.getHierName = function (nodeid) {
        var self = this;
        var nid = nodeid;
        var nodeObj = self._client.getNode(nid);
        var pid = nodeObj.getParentId();

        var ret = [];
        var checkParentID = '';
        if (self.alcrootid != '') {
            checkParentID = self.alcrootid;
        } else if (self.alcid != '') {
            checkParentID = self.alcid;
        } else if (self.constructionid != '') {
            checkParentID = self.constructionid;
        } else if (self.assemblyid != '') {
            checkParentID = self.assemblyid;
        }
        while (pid != checkParentID) {
            if (nodeObj) {
                ret.push(nodeObj.getAttribute(nodePropertyNames.Attributes.name));
                nid = pid;
                nodeObj = self._client.getNode(nid);
                if (nodeObj) {
                    pid = nodeObj.getParentId();
                    if (self.assemblyid) {
                        if (self.checkSystemModel(pid)) {
                            break;
                        }
                    }

                } else {
                    break;
                }
            } else {
                break;
            }

        }
        if (nodeObj) {
            ret.push(nodeObj.getAttribute(nodePropertyNames.Attributes.name));
        }

        var ret1 = ret.reverse();
        var ret2 = ret1.join('/');
        return ret2;


    };

    SelectorControl.prototype.getParentFolders = function (nodeObj) {

        var self = this;
        var ret = [];
        if (self.parentFoldersVisited)
            return ret;

        self._logger.debug('******* in getParentFolders');

        var parentNodeID, parentNode, parentMetaNode, parentMetaName;
        var alcrootMetaType = 'ALC_ROOT';
        var constructionMetaType = 'Construction';
        var vvaMetaType = 'V&V&A';
        var alcMetaType = 'ALC';
        var assemblyType = 'Assembly';

        parentNodeID = nodeObj.getParentId();
        parentNode = self._client.getNode(parentNodeID);

        var metaobj = self._client.getNode(nodeObj.getMetaTypeId());
        var metaName = metaobj.getAttribute(nodePropertyNames.Attributes.name);
        self.type = metaName;

        if ((self.type.indexOf("File") == 0) || (self.type.indexOf("EvalData") != -1) || (self.type.indexOf("TrainingData") != -1) || (self.type.indexOf("ValidationData") != -1) || (self.type.indexOf("ScenarioSet") != -1)) {
            self.exptTypes.push("Activity");
            self.exptTypes.push("ExperimentSetup");
            self.exptTypes.push("Campaign");
            self.refType = "Ref";
            self.setType = "Data";
            if (self.type.indexOf("File") == 0) {
                self.refType = "InternalDataRef";
            }
        }

        if (self.type.indexOf("Activities") != -1) {
            self.exptTypes.push("DataCollection");
            self.exptTypes.push("Testing");
            self.exptTypes.push("Training");
            self.refType = "Ref";
            self.setType = "JData";
        }

        if (self.type.indexOf("Init_Value") != -1) {
            var type = nodeObj.getAttribute('Init_Type');
            if (type == 'Data') {
                self.exptTypes.push("ExperimentSetup");
                self.refType = "Ref";
                self.setType = "Init_Data";
            }
            if (type == 'LEC' || type == 'AM') {
                self.exptTypes.push("SLTrainingSetUp");
                self.exptTypes.push("RLTrainingSetup");
                self.exptTypes.push("AssuranceMonitorSetup");
                self.refType = "ModelDataLink";
                self.setType = "Model";
            }
        }

        if (self.type.indexOf("LEC_Model") != -1) {
            self.exptTypes.push("SLTrainingSetUp");
            self.exptTypes.push("RLTrainingSetup");
            self.exptTypes.push("AssuranceMonitorSetup");
            self.refType = "ModelDataLink";
            self.setType = "Model";
        }

        if (self.type.indexOf("PlantModel") != -1) {
            self.exptTypes.push("SystemIDSetup");
            self.refType = "SystemID";
            self.isSystemID = 1;
        }

        if (self.type.indexOf("LaunchFile") != -1) {
            self.exptTypes.push("Block");
            self.isLaunchFile = 1;
            self.setType = "DeployedNodes"

        }

        if (self.type.indexOf("StructureRef")!=-1)
        {
            self.isStructureRef =1;
            self.refType = "Ref";
        }

        if (self.type.indexOf("Mitigation")!=-1)
        {
            self.isBarrier =1;
            self.setType = "Implementor";
        }

        if (self.type.indexOf("Effect")!=-1)
        {
            self.isEffect =1;
            self.refType = "Ref";
        }

        if (self.type.indexOf("Response")!=-1)
        {
            self.isResponse =1;
            self.refType = "Ref";
        }


        if (self.isGSNModel(self.type)) {
            self.isGSN = 1;
            if (self.isModelRef(self.type)) {
                self.isModelRefNode = 1;
            }
            /*self.evidenceTypes.push("ExperimentSetup");
            self.evidenceTypes.push("Campaign");
            self.evidenceTypes.push("SLTrainingSetUp");
            self.evidenceTypes.push("RLTrainingSetup");
            self.modelTypes.push("SystemModel")
            self.modelTypes.push("Block")
            self.modelTypes.push("SignalPort")
            */

        }

        while (parentNode) {
            parentMetaNode = self._client.getNode(parentNode.getMetaTypeId());
            if (!parentMetaNode)
                break;

            parentMetaName = parentMetaNode.getAttribute(nodePropertyNames.Attributes.name);

            self._logger.debug('******* in getParentFolders ' + parentMetaName);

            if (parentMetaName.indexOf(alcrootMetaType) != -1) {
                ret.push(parentNodeID);
                self.parentFolders.push(parentNodeID);
                self.alcrootid = parentNodeID;
                self._logger.debug('******* in getParentFolders added ' + parentNodeID);
                break;
            } else {
                self._logger.debug('******* not alc_root');

            }

            if (parentMetaName.indexOf(alcMetaType) != -1) {
                ret.push(parentNodeID);
                self.parentFolders.push(parentNodeID);
                self.alcid = parentNodeID;
                self._logger.debug('******* in getParentFolders added ' + parentNodeID);
                break;
            } else {
                self._logger.debug('******* not alc');

            }

            if (parentMetaName.indexOf(constructionMetaType) != -1) {
                ret.push(parentNodeID);
                self.parentFolders.push(parentNodeID);
                self.constructionid = parentNodeID;
                self._logger.debug('******* in getParentFolders added ' + parentNodeID);
                break;
            } else {
                self._logger.debug('******* not construction');
                self._logger.debug(parentMetaName);
                self._logger.debug(constructionMetaType);

            }


            if ((self.isSystemID) && (parentMetaName.indexOf(vvaMetaType) != -1)) {
                ret.push(parentNodeID);
                self.parentFolders.push(parentNodeID);
                self.vvaid = parentNodeID;
                self._logger.debug('******* in getParentFolders added ' + parentNodeID);
                break;
            } else {
                self._logger.debug('******* not vva');

            }

            if ((self.isLaunchFile) && (parentMetaName.indexOf(assemblyType) != -1)) {
                self.parentFolders.push(parentNodeID);
                self.assemblyid = parentNodeID;
                self._logger.debug('******* in getParentFolders added ' + parentNodeID);
                break;
            }


            parentNodeID = parentNode.getParentId();
            parentNode = self._client.getNode(parentNodeID);

        }


        self.parentFoldersVisited = 1;


    };


    /* * * * * * * * Node Event Handling * * * * * * * */
    SelectorControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');


        while (i--) {
            event = events[i];
            switch (event.etype) {
                case CONSTANTS.TERRITORY_EVENT_LOAD:
                    //this._logger.debug('event '+i)
                    this._onLoad(event.eid, i);
                    this.countlimit = i;
                    break;
                case CONSTANTS.TERRITORY_EVENT_UPDATE:
                    this._onUpdate(event.eid);
                    break;
                case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                    this._onUnload(event.eid);
                    break;
                default:
                    break;
            }
        }

        //this._logger.debug('event outside  '+i)


        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    SelectorControl.prototype.updateSystemTerritory = function () {
        var self = this;
        var i = 0;
        //self._selfPatterns = {};
        for (i = 0; i != self.systemModels.length; i += 1) {
            self._selfPatterns[self.systemModels[i]] = {children: 50};
        }
        self.gatherSystemModels = 1;
        self._client.updateTerritory(self._territoryId, self._selfPatterns);

    };

    SelectorControl.prototype._onLoad = function (gmeId, count = -1) {
        var self = this;
        this._getObjectDescriptor(gmeId)
            .then(function (description) {
                description.last = -1;
                if (count == 50) {
                    //self._logger.debug('reached here')
                }
                //self._logger.debug('count = '+ count)
                if (count == self.countlimit) {

                    if ((self.isGSN || self.isStructureRef) && self.gatherSystemModels == 0 && self.systemModels.length > 0) {
                        self.updateSystemTerritory();
                    } else {
                        description.last = 1;
                    }
                }

                if (description.metaName || (description.last == 1))
                    self._widget.addNode(description);

            });


    };

    SelectorControl.prototype._onUpdate = function (gmeId) {
        var self = this;
        self._getObjectDescriptor(gmeId)
            .then(function (description) {
                //self._logger.debug('metaname  _onUpdate= '+ description.metaName);
                self._widget.updateNode(description);
            });
    };

    SelectorControl.prototype._onUnload = function (gmeId) {
        this._widget.removeNode(gmeId);
    };

    SelectorControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SelectorControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    SelectorControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    SelectorControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    SelectorControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerSuppressVisualizerFromNode(true);
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId);
            WebGMEGlobal.State.registerSuppressVisualizerFromNode(false);
        }
    };

    SelectorControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    SelectorControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    SelectorControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    SelectorControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    SelectorControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

    return SelectorControl;
});
