/*globals define, _, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Oct 10 2018 12:46:51 GMT-0500 (Central Daylight Time).
 */

define([
	'js/Panels/ModelEditor/ModelEditorPanel',
	'js/PanelBase/PanelBaseWithHeader',
	'js/Widgets/ModelEditor/ModelEditorWidget',
	'js/Panels/ModelEditor/ModelEditorControl'
], function (
	ModelEditorPanel,
	PanelBaseWithHeader,
	ModelEditorWidget,
	ModelEditorControl,

	) {
		'use strict';

		var DesignerPanel;

		DesignerPanel = function (layoutManager, params) {
			var options = {};
			//set properties from options
			options[PanelBaseWithHeader.OPTIONS.LOGGER_INSTANCE_NAME] = 'DesignerPanel';
			options[PanelBaseWithHeader.OPTIONS.FLOATING_TITLE] = true;

			//call parent's constructor
			ModelEditorPanel.apply(this, [layoutManager, params]);

			this.elementList = ['ALC_ROOT',
				'Annotation',
				'MessageLibrary',
				'MessageType',
				'ServiceType',
				'ActionType',
				'ResourceLibrary',
				'Folder',
				'Resource',
				'ResourceRef',
				'BlockLibrary',
				'Block',
				'SignalPort',
				'PowerPort',
				'MaterialPort',
				'File',
				'Code',
				'LEC_Model',
				'LEC_Model_Ref',
				'SystemModel',
				'AssemblyModel',
				'Campaign',
				'ExperimentSetup',
				'SLTrainingSetUp',
				'RLTrainingSetup',
				'EvaluationSetup',
				'VerificationSetup',
				'ExecPipeline',
				'Result',
				'Data',
				'Notebook',
				'ScenarioSet',
				'EvalData',
				'TrainingData',
				'ValidationData',
				'PostProcess',
				'RLAgent',
				'Params',
				'Environment',
				'Mission',
				'AssuranceMonitorSetup',
				'AMConfiguration',
				'Verification_Model',
				'Specification',
				'ParamSweep',
				'GSN_Model',
				'Assumption',
				'ChoiceJn',
				'Context',
				'Goal',
				'InContextRef',
				'Justification',
				'RequirementRef',
				'Solution',
				'Strategy',
				'SupportRef',
				'EvidenceSource',
				'ModelRef',
				'Metric',
				'Quality',
				'Workspace',
				'InitCode',
				'kerasInitCode',
				'Utilities',
				'Artifacts',
				'Resources',
				'Operations',
				'Pipelines',
				'Executions',
				'ALC',
				'Modeling',
				'Systems',
				'Assemblys',
				'WorldModels',
				'Construction',
				'DataCollection',
				'Training',
				'Testing',
				'V&V&A',
				'Verification',
				'Validation',
        'SystemID',
        'SystemIDSetup',
        'ValidationSetup',
        'Validation_Model',
				'Assurance',
				'Workflows',
				'Workflow',
				'WorkflowJob',
				'Branch',
				'Loop',
				'Transform',
				'DataSets',
				'Result_Ref',
				'Ver_Result',
				'InitSet',
				'Transform',
        'PlantModel',
				'ROSInfo',
				'Status',
				'Repeat_Check',
				'MessagePackage',
				'BlockPackage',
				'DeploymentModel',
				'Activity'
			];

			this.elementChildList = {};
			this.elementIDMap = {};
			this.buildElementChildList();
			this.buildElementIDMap();



			//this._client = params.client;

			//initialize UI
			//this._initialize();

			//this.logger.debug('designer ctor finished');
		};

		//inherit from PanelBaseWithHeader
		_.extend(DesignerPanel.prototype, ModelEditorPanel.prototype);

		/*
			DesignerPanel.prototype._initialize = function () {
				var self = this;
		
				//set Widget title
				this.setTitle('');
		
				this.widget = new ModelEditorWidget(this.logger, this.$el);
		
				this.widget.setTitle = function (title) {
					self.setTitle(title);
				};
		
				this.control = new ModelEditorControl({
					logger: this.logger,
					client: this._client,
					widget: this.widget
				});
		
				this.onActivate();
			};*/


		DesignerPanel.prototype.getValidTypeNodesInfo = function (useprefix, len = -1) {
			var nodeIds = ['/7/2',//block
				'/7/m',//signal port
				'/8/744796552/470062435',// power port
				'/8/744796552/6', // material port
				'/7/L',//Params
			];

			var len1 = nodeIds.length;
			if (len != -1)
				len1 = len;

			var prefix = '/Y';
			if (useprefix == 0)
				prefix = '';

			var i = 0;
			var ret = {};
			var key = '';
			for (i = 0; i != len1; i += 1) {
				key = prefix + nodeIds[i];
				ret[key] = true;
			}

			return ret;



		};

		DesignerPanel.prototype.getValidTypesInfo = function (nodeId, aspect) {
			/*var ret={};
			var client = this.control._client;
			var node = client.getNode(nodeId);
			var metaObj = client.getNode(node.getMetaTypeId());
			var metaName = metaObj.getAttribute('name');
			var usePrefix = 1;
			var blkID = '/7/2';
			var nodeBlk =   client.getNode(blkID);
			if (nodeBlk)
				usePrefix = 0;
		   
		    
			if (metaName == 'BlockLibrary' || metaName == 'SystemModel')
			{
				ret = this.getValidTypeNodesInfo(usePrefix, 1);
			}
			else if (metaName == 'Block')
			{
				ret = this.getValidTypeNodesInfo(usePrefix, -1);
			 }
			return ret;
			*/
			var self = this;
			var client = this.control._client;
			var node = client.getNode(nodeId);
			var metaObj = client.getNode(node.getMetaTypeId());
			var metaName = metaObj.getAttribute('name');
			var ret = self.getValidElementsList(metaName);
			return ret;
		};

		DesignerPanel.prototype.getValidElementsList = function (metaName) {
			var self = this;
			var keys = Object.keys(self.elementChildList);
			if (keys.indexOf(metaName) == -1)
				return {};
			var list = self.elementChildList[metaName];
			var i = 0;
			var ret = {};
			for (i = 0; i != list.length; i += 1) {
				var ename = list[i];
				var eid = self.elementIDMap[ename];
				ret[eid] = true;
			}
			return ret;
		};

		DesignerPanel.prototype.buildElementChildList = function () {
			var self = this;
			var i = 0;
			self.elementChildList = {};
			for (i = 0; i != self.elementList.length; i += 1)
				self.elementChildList[self.elementList[i]] = [];

			self.elementChildList['ALC_ROOT'] = ['ResourceLibrary',
				'MessageLibrary',
				'BlockLibrary',
				'SystemModel',
				'AssemblyModel',
				'Campaign',
				'ExperimentSetup',
				'SLTrainingSetUp',
				'RLTrainingSetup',
				'EvaluationSetup',
				'VerificationSetup',
				'Workspace',
				'GSN_Model',
				'Annotation',
				'AssuranceMonitorSetup'];

			self.elementChildList['ResourceLibrary'] = ['Resource', 'Folder', 'Annotation'];
			self.elementChildList['Folder'] = ['Resource', 'Annotation'];

			self.elementChildList['MessageLibrary'] = ['MessagePackage','ActionType','MessageType', 'ServiceType', 'Annotation'];
			self.elementChildList['BlockLibrary'] = ['BlockPackage','Block', 'Annotation'];
			self.elementChildList['SystemModel'] = ['Block', 'Params', 'Annotation'];
			self.elementChildList['Block'] = ['Block', 'SignalPort', 'MaterialPort', 'PowerPort', 'Params', 'ROSInfo','Annotation', 'File', 'LEC_Model' ];
			self.elementChildList['AssemblyModel'] = ['SystemModel', 'Annotation','DeploymentModel'];
			self.elementChildList['Mission'] = ['Params', 'Annotation'];
			self.elementChildList['Environment'] = ['Params', 'Annotation'];
			self.elementChildList['LEC_Model'] = ['Annotation'];
			self.elementChildList['AssuranceMonitorSetup'] = ['Params', 'Annotation', 'LEC_Model', 'TrainingData', 'ValidationData', 'EvalData', 'AMConfiguration', 'PostProcess', 'Result'];
			self.elementChildList['Verification_Model'] = ['InitSet', 'Transform', 'Ver_Result', 'PlantModel','LEC_Model', 'Params', 'Annotation','EvalData'];
      self.elementChildList['Validation_Model'] = ['InitSet', 'Transform', 'PlantModel', 'LEC_Model', 'Params', 'Annotation','EvalData'];
			self.elementChildList['Specification'] = ['File', 'Code'];
			self.elementChildList['PostProcess'] = ['Annotation', 'Code'];

			//self.elementChildList['Campaign'] =['ExperimentSetup','SLTrainingSetUp', 'RLTrainingSetup', 'VerificationSetup', 'ParamSweep','Result','Annotation','Code'];
			self.elementChildList['ExperimentSetup'] = ['AssemblyModel', 'Environment', 'Mission', 'Params', 'Result', 'Annotation', 'Campaign', 'PostProcess', 'ScenarioSet'];
			self.elementChildList['SLTrainingSetUp'] = ['File', 'LEC_Model', 'Params', 'Result', 'Annotation', 'Campaign', 'PostProcess', 'TrainingData', 'ValidationData', 'EvalData', 'AssuranceMonitorSetup'];
			self.elementChildList['EvaluationSetup'] = ['EvalData', 'ValidationData','LEC_Model', 'PostProcess', 'Result', 'Annotation'];
			self.elementChildList['RLTrainingSetup'] = ['AssemblyModel', 'Environment', 'Mission', 'Params', 'Result', 'Annotation', 'RLAgent', 'Campaign', 'PostProcess', 'ScenarioSet'];
			self.elementChildList['VerificationSetup'] = ['Verification_Model', 'Result', 'Annotation'];
      self.elementChildList['ValidationSetup'] = ['Validation_Model', 'Result', 'Annotation'];
      self.elementChildList['SystemID'] = ['SystemIDSetup'];
      self.elementChildList['SystemIDSetup'] = ['TrainingData','Params', 'Result', 'Annotation'];
			self.elementChildList['RLAgent'] = ['Annotation', 'LEC_Model', 'Code'];
			self.elementChildList['Result'] = ['Data'];

			self.elementChildList['GSN_Model'] = ['Annotation', 'Assumption', 'ChoiceJn', 'Context', 'Goal', 'GSN_Model', 'InContextRef', 'Justification', 'RequirementRef', 'Solution', 'Strategy', 'SupportRef', 'EvidenceSource', 'ModelRef', 'Metric', 'Quality'];
			self.elementChildList['Goal'] = ['Annotation', 'EvidenceSource', 'ModelRef', 'Metric', 'Quality'];
			self.elementChildList['Solution'] = ['Annotation', 'EvidenceSource', 'ModelRef', 'Metric', 'Quality'];
			self.elementChildList['Strategy'] = ['Annotation', 'EvidenceSource', 'ModelRef', 'Metric', 'Quality'];
			self.elementChildList['Context'] = ['Annotation', 'EvidenceSource', 'ModelRef', 'Metric', 'Quality'];
			self.elementChildList['Justification'] = ['Annotation', 'EvidenceSource', 'ModelRef', 'Metric', 'Quality'];
			self.elementChildList['Assumption'] = ['Annotation', 'EvidenceSource', 'ModelRef', 'Metric', 'Quality'];
			self.elementChildList['Metric'] = ['Annotation'];
			self.elementChildList['Quality'] = ['Annotation'];
			self.elementChildList['ModelRef'] = ['Annotation'];
			self.elementChildList['EvidenceSource'] = ['Annotation'];

			self.elementChildList['Workspace'] = ['InitCode', 'kerasInitCode', 'Utilities', 'Artifacts', 'Resources', 'Operations', 'Pipelines', 'Executions'];

			self.elementChildList['ALC'] = ['Annotation'];
			self.elementChildList['Modeling'] = ['Annotation'];
			self.elementChildList['Systems'] = ['SystemModel', 'Annotation'];
			self.elementChildList['Assemblys'] = ['AssemblyModel', 'Annotation'];
			self.elementChildList['WorldModels'] = ['Environment', 'Annotation'];

			self.elementChildList['Construction'] = ['Annotation'];
			self.elementChildList['DataCollection'] = ['Activity', 'EvaluationSetup', 'Annotation'];
			self.elementChildList['Training'] = ['Activity', 'EvaluationSetup', 'Annotation'];
			self.elementChildList['Testing'] = ['Activity', 'EvaluationSetup', 'Annotation'];
			self.elementChildList['V&V&A'] = ['SystemID','Verification','Validation','Assurance','Annotation'];
			self.elementChildList['Verification'] = ['VerificationSetup', 'Annotation'];
			self.elementChildList['Validation'] = ['ValidationSetup','ExperimentSetup', 'EvaluationSetup', 'Annotation'];
			self.elementChildList['Assurance'] = ['GSN_Model', 'Annotation'];
			self.elementChildList['Workflows'] = ['Workflow', 'Annotation'];
			self.elementChildList['Workflow'] = ['WorkflowJob', 'Status', 'Annotation'];
			self.elementChildList['DataSets'] = ['Annotation'];


		};

		DesignerPanel.prototype.buildElementIDMap = function () {
			var self = this;
			var ret = {};
			var client = this.control._client;
			var metanodes = client.getAllMetaNodes(true);


			var keys = Object.keys(metanodes);
			var dict = {};
			for (i = 0; i != keys.length; i += 1) {
				var id = keys[i];
				var name = metanodes[id].getAttribute('name');
				if (self.elementList.indexOf(name) == -1)
					continue;

				if (dict[name]) {
					if (id.length < dict[name].length)
						dict[name] = id;
				}
				else {
					dict[name] = id;
				}
			}
			var dictkeys = Object.keys(dict);
			if (dictkeys.length == self.elementList.length)
				self.logger.debug('Got all elements in the list');
			else {
				self.logger.debug('Lengths do not match');
			}
			self.logger.debug(' meta dict ' + dict);
			self.elementIDMap = dict;

		};


		/* OVERRIDE FROM WIDGET-WITH-HEADER */


		return DesignerPanel;
	});
