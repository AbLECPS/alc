/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Feb 26 2021 15:31:53 GMT-0600 (CST).
 */

define(['css!./styles/ActivityInputsWidget.css'], function () {
    'use strict';

    var WIDGET_CLASS = 'activity-inputs';

    function ActivityInputsWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this._loading = document.createElement('div');
        this._loading.style.marginTop = '50px'
        this._loading.innerHTML = "Loading...";
        this._el.append(this._loading);

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');

        this._rdict = {};
        this._idict = {};

        this._client = WebGMEGlobal.Client;
    }

    ActivityInputsWidget.prototype._initialize = function () {
        // set widget class
        this._el.addClass(WIDGET_CLASS);
        var dummy = document.createElement('div');
        dummy.id = 'dummyheader';
        dummy.setAttribute("style", "margin-top:25px;");
        this._el.append(dummy);
    };

    ActivityInputsWidget.prototype.createInputTables = function (node, bnode, idict, rdict) {
        var self = this;
        for(var ikey in idict)
        {
            if (ikey.length < 1)
            {
                continue;
            }

            var tab = document.createElement('button');
            tab.id = ikey + 'button';
            var div = document.createElement('div');

            var paramTable = document.createElement("TABLE");
            paramTable.id = ikey + 'table'; 

            if(idict[ikey][1])
            {
                var submit = document.createElement('button');
                submit.id = ikey;
                submit.className = ikey;
                submit.innerHTML = "Submit";
                submit.addEventListener("click", submitMultiSelection, false);
                function submitMultiSelection(evt) 
                {
                    self._client.startTransaction();
                    var id = self._idict[this.className][0];

                    var node = self._client.getNode(id);
                    var ids = node.getMemberIds('Data');
                    
                    for(var i = 0;i < ids.length;i++)
                    {
                        self._client.removeMember(id, ids[i], "Data");
                    }

                    var e = document.getElementsByClassName(this.className + 'resultSelect');
                    var accArr = [];
                    for(var i = 0;i < e.length;i++)
                    {
                        accArr.push(Array.from(e[i].options).filter(option => option.selected).map(option => option.value));
                    }
                    for(var i = 0;i < accArr.length;i++)
                    {
                        var subArr = accArr[i];

                        for(var j = 0;j < subArr.length;j++)
                        {
                            var childId = subArr[j];
                            self._client.addMember(id, childId, "Data");
                        }
                    } 
                    self._client.completeTransaction();
                }

                var cancel = document.createElement('button');
                cancel.id = ikey;
                cancel.className = ikey;
                cancel.innerHTML = "Clear";
                cancel.style.float = 'right';
                cancel.addEventListener("click", cancelMultiSelection, false);
                function cancelMultiSelection(evt) 
                {
                    var els = document.getElementsByClassName(this.className + 'resultSelect');
                    for(var i = 0;i < els.length;i++)
                    {
                        var opts = els[i].options;
                        for(var j = 0;j < opts.length;j++)
                        {
                            opts[j].selected = false;
                        }
                    }
                    self._client.startTransaction();
                    var id = self._idict[this.className][0];

                    var node = self._client.getNode(id);
                    var ids = node.getMemberIds('Data');
                    for(var i = 0;i < ids.length;++i)
                    {
                        self._client.removeMember(id, ids[i], "Data");
                    }

                    self._client.completeTransaction();
                }

                var row = paramTable.insertRow(0);
                row.className = "activityInputsTd";
                row.id = ikey + 'row';
                var cell1 = row.insertCell(0);
                cell1.className = "activityInputsTd";
                cell1.id = ikey + 'cell1';
                var cell2 = row.insertCell(1);
                cell2.className = "activityInputsTd";
                cell2.id = ikey + 'cell2';
                cell2.append(submit);
                cell2.append(cancel);
            }
            else
            {
                var submit = document.createElement('button');
                submit.id = ikey;
                submit.className = ikey;
                submit.innerHTML = "Submit";
                submit.addEventListener("click", submitSingleSelection, false);
                function submitSingleSelection(evt) 
                {
                    var id = self._idict[this.className][0];
                    var childId = 0;

                    var els = document.getElementsByClassName(this.className + 'resultSelect');
                    for(var i = 0;i < els.length;i++)
                    {
                        if(els[i].value != 'None')
                        {
                            childId = els[i].value;
                        }
                    }

                    self._client.startTransaction();

                    var node = self._client.getNode(id);
                    var ids = node.getMemberIds('Data');
                    for(var i = 0;i < ids.length;++i)
                    {
                        self._client.removeMember(id, ids[i], "Data");
                    }

                    if(childId != 0)
                    {  
                        self._client.addMember(id, childId, "Data");
                    }
                    self._client.completeTransaction();
                }

                var cancel = document.createElement('button');
                cancel.id = ikey;
                cancel.className = ikey;
                cancel.innerHTML = "Clear";
                cancel.style.float = 'right';
                cancel.addEventListener("click", cancelSingleSelection, false);
                function cancelSingleSelection(evt) 
                {
                    var els = document.getElementsByClassName(this.className + 'resultSelect');
                    for(var i = 0;i < els.length;i++)
                    {
                        els[i].selectedIndex = "0";
                    }
                    self._client.startTransaction();
                    var id = self._idict[this.className][0];

                    var node = self._client.getNode(id);
                    var ids = node.getMemberIds('Data');
                    for(var i = 0;i < ids.length;++i)
                    {
                        self._client.removeMember(id, ids[i], "Data");
                    }

                    self._client.completeTransaction();
                }

                var row = paramTable.insertRow(0);
                row.className = "activityInputsTd";
                row.id = ikey + 'row';
                var cell1 = row.insertCell(0);
                cell1.className = "activityInputsTd";
                cell1.id = ikey + 'cell1';
                var cell2 = row.insertCell(1);
                cell2.className = "activityInputsTd";
                cell2.id = ikey + 'cell2';
                cell2.append(submit);
                cell2.append(cancel);
            }

            for(var rkey in rdict)
            {
                var results = rdict[rkey];

                if(results.length < 1)
                    continue;

                var row = paramTable.insertRow(0);
                row.className = "activityInputsTd";
                row.id = ikey + 'row';
                var cell1 = row.insertCell(0);
                cell1.className = "activityInputsTd";
                cell1.id = ikey + 'cell1';
                var cell2 = row.insertCell(1);
                cell2.className = "activityInputsTd";
                cell2.id = ikey + 'cell2';
                cell1.innerHTML = rkey;

                var resSel = document.createElement("select");
                resSel.id = ikey + rkey + 'resultSelect';
                resSel.className = ikey + 'resultSelect';
                if(idict[ikey][1])
                {
                    resSel.multiple = 'multiple';                

                    var id = self._idict[ikey][0];

                    var inputNode = self._client.getNode(id);
                    var ids = inputNode.getMemberIds('Data');
                    for(var i = 0;i < results.length;++i)
                    {
                        var opt = document.createElement("option");
                        opt.className = ikey + rkey + 'result';
                        opt.value = results[i][0];
                        if(ids.includes(results[i][0]))
                        {
                            opt.selected = true;
                        }
                            
                        opt.innerHTML = results[i][1];
                        resSel.append(opt);
                    }
                }
                else
                {
                    resSel.addEventListener("click", selectClickResultValue, false);
                    function selectClickResultValue(evt) 
                    {
                        var els = document.getElementsByClassName(this.className);
                        for(var i = 0;i < els.length;i++)
                        {
                            if(els[i] != this)
                            {
                                els[i].selectedIndex = "0";
                            }
                        }
                    }

                    var id = self._idict[ikey][0];

                    var inputNode = self._client.getNode(id);
                    var ids = inputNode.getMemberIds('Data');
                    var opt = document.createElement("option");
                    opt.className = ikey + rkey + 'result';
                    opt.value = 'None';                        
                    opt.innerHTML = 'None';
                    resSel.append(opt);
                    for(var i = 0;i < results.length;++i)
                    {
                        var opt = document.createElement("option");
                        opt.className = ikey + rkey + 'result';
                        opt.value = results[i][0];
                        if(ids.includes(results[i][0]))
                        {
                            opt.selected = true;
                        }
                            
                        opt.innerHTML = results[i][1];
                        resSel.append(opt);
                    }
                }

                cell2.append(resSel);
            }

            var row = paramTable.insertRow(0);
            row.className = "activityInputsTd";
            row.id = ikey + 'titlerow';
            var cell1 = row.insertCell(0);
            cell1.className = "activityInputsTd";
            cell1.id = ikey + 'titlecell1';
            var cell2 = row.insertCell(1);
            cell2.className = "activityInputsTd";
            cell2.id = ikey + 'titlecell2';
            cell1.innerHTML = "Dataset";
            cell2.innerHTML = "Result";
            div.append(paramTable);

            tab.id = ikey;
            tab.className = "tablinks";
            tab.innerHTML = ikey;

            div.id = ikey+'div';
            div.className = "tabcontent";

            node.append(tab);
            bnode.append(div);

            tab.addEventListener("click", function(event) {
                self.openTab(event, this.id);
            }); 
        }
    };

    ActivityInputsWidget.prototype.setInputs = function (inputDict, resultsDict) {
        var node = document.createElement('div');
        var topNode = document.createElement('div');
        node.className = "tab";
        var bnode = document.createElement('div');
        this._rdict = resultsDict;
        this._idict = inputDict;
        this.createInputTables(node, bnode, inputDict, resultsDict);
        
        this._loading.remove();
        this._el.prepend(node);
        this._el.prepend(topNode);

        var text = document.createElement('h3');
        text.className = "activityInputsH3";
        text.innerHTML = "Inputs:";
        topNode.append(text);
        this._el.append(bnode);
    };

    ActivityInputsWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    ActivityInputsWidget.prototype.addNode = function (desc) {
        if (desc) {
            this.nodes[desc.id] = desc;
            
            if(desc['InputsDict'] != null && desc['ResultsDict'] != null)
            {
                this.setInputs(desc['InputsDict'], desc['ResultsDict']);
            }
        }
    };

    ActivityInputsWidget.prototype.openTab = function (evt, tabName) {
        // Declare all variables
        var i, tabcontent, tablinks;
      
        // Get all elements with class="tabcontent" and hide them
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
          tabcontent[i].style.display = "none";
        }
      
        // Get all elements with class="tablinks" and remove the class "active"
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
          tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        // Show the current tab, and add an "active" class to the button that opened the tab
        document.getElementById(tabName+'div').style.display = "block";
        evt.currentTarget.className += " active";
    };

    ActivityInputsWidget.prototype.removeNode = function (gmeId) {
        delete this.nodes[gmeId];
    };

    ActivityInputsWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    ActivityInputsWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    ActivityInputsWidget.prototype.onBackgroundDblClick = function () {
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ActivityInputsWidget.prototype.destroy = function () {
    };

    ActivityInputsWidget.prototype.onActivate = function () {
        this._logger.debug('ActivityInputsWidget has been activated');
    };

    ActivityInputsWidget.prototype.onDeactivate = function () {
        this._logger.debug('ActivityInputsWidget has been deactivated');
    };

    return ActivityInputsWidget;
});
