/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Dec 04 2020 11:13:23 GMT-0600 (Central Standard Time).
 */

define(['js/Dialogs/CodeEditor/CodeEditorDialog',
 'js/Controls/PropertyGrid/Widgets/AssetWidget',
 'css!./styles/ActivityChoicesWidget.css'], function (CodeEditorDialog, AssetWidget) {
'use strict';

var WIDGET_CLASS = 'activity-choices';

function ActivityChoicesWidget(logger, container) {
 this._logger = logger.fork('Widget');

 this._el = container;

 this.nodes = {};
 this._initialize();

 this._logger.debug('ctor finished');

 this._client = WebGMEGlobal.Client;

 this._parentId = 0;
}

ActivityChoicesWidget.prototype._initialize = function () {
 // set widget class
 this._el.addClass(WIDGET_CLASS);
 var dummy = document.createElement('div');
            dummy.id = 'dummyheader';
            dummy.setAttribute("style", "margin-top:25px;");
            this._el.append(dummy);
};

ActivityChoicesWidget.prototype.selectValue = function (evt) {
    var x = this.value;
    self._client.setAttribute(evt.currentTarget.arr[0], "value", x);
};

ActivityChoicesWidget.prototype.inputFunc = function (evt) {
    var self = this;
    var choice = new CodeEditorDialog();
    var val = 0;
    if(evt.currentTarget.arr[2].length === 0)
    {
        val = evt.currentTarget.arr[5];
    }
    else
    {
        val = evt.currentTarget.arr[2];
    }
    var params ={
        "name": "value",
        "value": val,
        "multilineType": evt.currentTarget.arr[6],
        "activeObject": evt.currentTarget.arr[0],
        "activeSelection": [evt.currentTarget.arr[0]],
        "title": "Set Parameters",
        "readOnly":false
    };
    choice.show(params);
    choice._saveBtn.on('click', saveFunc);
    choice._okBtn.on('click', saveFunc);
    function saveFunc(event) 
    {
        event.preventDefault();
        event.stopPropagation();

        self.innerHTML = choice._savedValue;
        self.arr[2] = choice._savedValue;
    }
};

ActivityChoicesWidget.prototype.updateNumValue = function (e) {
    self._client.setAttribute(e.target.id, "value", e.target.value);
};

ActivityChoicesWidget.prototype.updateStrValue = function (e) {
    self._client.setAttribute(e.target.id, "value", e.target.value);
};

ActivityChoicesWidget.prototype.updateDefValue = function (evt) {
    var x = this.value;
    self._client.setAttribute(evt.currentTarget.arr[0], "value", x);
};
    
ActivityChoicesWidget.prototype.createChoiceTables = function (node, bnode, dict) {
 var self = this;
 var numTypeSet = new Set(["integer", "float"]);
 var multilineTypeSet = new Set(["code"]);
 var strTypeSet = new Set(["array", "string", ""]);
 var assetTypeSet = new Set(["asset","LEC", "Data"]);
 for(var key in dict)
 {
     if (key.length < 1)
     {
         continue;
     }

     var tab = document.createElement('button');
     var div = document.createElement('div');

     var paramTable = document.createElement("TABLE");  
     paramTable.className = "activityChoicesTable"; 
     var paramlist = dict[key];
     for(var i = 0;i < paramlist.length;++i)
     {
         var arr = paramlist[i];
         var row = paramTable.insertRow(0);
         row.className = "activityChoicesTd";
         var cell1 = row.insertCell(0);
         cell1.className = "activityChoicesTd";
         var cell2 = row.insertCell(1);
         cell2.className = "activityChoicesTd";
         var cell3 = row.insertCell(2);
         cell3.className = "activityChoicesTd";
         cell3.innerHTML = arr[4];
         cell1.innerHTML = arr[1];
         if(arr[3].length < 2)
         {
             if(arr[4] == "boolean")
             {
                 var sel = document.createElement("select");
                 sel.arr = arr;
                 sel.id = "selValue" + i.toString();
                 sel.className = "activityChoicesSelect";
                 sel.addEventListener("change", self.selectValue, false);

                 var topt = document.createElement("option");
                 topt.className = "activityChoicesOption";
                 topt.value = "True";
                 topt.innerHTML = "True";

                 var fopt = document.createElement("option");
                 fopt.className = "activityChoicesOption";
                 fopt.value = "False";
                 fopt.innerHTML = "False";
                 if(arr[2].length === 0)
                 {
                     if(arr[5] == "True")
                     {
                         topt.selected = true;
                         fopt.selected = false;
                     }
                     else
                     {
                         topt.selected = false;
                         fopt.selected = true;
                     }
                 }
                 else
                 {
                     if(arr[2] == "True")
                     {
                         topt.selected = true;
                         fopt.selected = false;
                     }
                     else
                     {
                         topt.selected = false;
                         fopt.selected = true;
                     }
                 }
                 
                 sel.append(topt);
                 sel.append(fopt);
                 cell2.append(sel);                                                  
             }
             else if(multilineTypeSet.has(arr[4]))
             {
                 var inp = document.createElement("button");
                 inp.className = "activityChoicesInput";
                 inp.id = arr[0];
                 var val = 0;
                 if(arr[2].length === 0)
                 {
                     val = arr[5];
                 }
                 else
                 {
                     val = arr[2];
                 }
                 inp.innerHTML = val.slice(0, 25);
                 inp.addEventListener("click", self.inputFunc, false);
                 inp.arr = arr;

                 cell2.append(inp);
                 
                 inp.value = "";
             }
             else if(numTypeSet.has(arr[4]))
             {
                 var inp = document.createElement("input");
                 inp.className = "activityChoicesInput";
                 inp.id = arr[0];
                 inp.type = "number";
                 inp.step = "any";

                 inp.addEventListener('input', self.updateNumValue, false);

                 var val = 0;
                 if(arr[2].length === 0)
                 {
                     val = arr[5];
                 }
                 else
                 {
                     val = arr[2];
                 }
                 inp.value = val;

                 cell2.append(inp);
             }
             else if(strTypeSet.has(arr[4]))
             {
                 var inp = document.createElement("input");
                 inp.className = "activityChoicesInput";
                 inp.id = arr[0];
                 inp.type = "text";

                 inp.addEventListener('input', self.updateStrValue, false);

                 var val = 0;
                 if(arr[2].length === 0)
                 {
                     val = arr[5];
                 }
                 else
                 {
                     val = arr[2];
                 }
                 inp.value = val;

                 cell2.append(inp);
             }
             else if(assetTypeSet.has(arr[4]))
             {
                var dialog = new AssetWidget({
                    name: 'asset-manager-widget',
                    id: arr[0],
                    value: arr[2]
                });
                dialog.onFinishChange((data) => {
                    if (!data.propertyValue) {
                        this._logger.debug('No file uploaded.');
                        return;
                    }
                    self._client.setAttribute(this.id, "asset", data.propertyValue);
                });
                cell2.append(dialog.el[0]);
                 
                inp.value = "";
             }
         }
         else
         {
             var sel = document.createElement("select");
             sel.arr = arr;
             sel.id = "selValue" + i.toString();
             sel.className = "activityChoicesSelect";
             sel.addEventListener("change", self.updateDefValue, false);

             var val = '';
             if(arr[2].length === 0)
             {
                 val = arr[5];
             }
             else
             {
                 val = arr[2];
             }
             
             for(var j = 0;j < arr[3].length;++j)
             {
                 var opt = document.createElement("option");
                 opt.className = "activityChoicesOption";
                 opt.value = arr[3][j];
                 opt.innerHTML = arr[3][j];
                 if(val && (arr[3][j] == val))
                 {
                     opt.selected = true;
                 }
                 sel.append(opt);
             }
             cell2.append(sel);
         }
     }
     var row = paramTable.insertRow(0);
     row.className = "activityChoicesTd";
     var cell1 = row.insertCell(0);
     cell1.className = "activityChoicesTd";
     var cell2 = row.insertCell(1);
     cell2.className = "activityChoicesTd";
     var cell3 = row.insertCell(2);
     cell3.className = "activityChoicesTd";
     cell1.innerHTML = "Parameter";
     cell2.innerHTML = "Value";
     cell3.innerHTML = "Type";
     div.append(paramTable);

     tab.id = key;
     tab.className = "tablinks";
     tab.innerHTML = key;

     div.id = key+'div';
     div.className = "tabcontent";

     node.append(tab);
     bnode.append(div);

     tab.addEventListener("click", function(event) {
         self.openTab(event, this.id);
     }); 
 }
};

ActivityChoicesWidget.prototype.setParams = function (choicesDict) {
 var node = document.createElement('div');
 var topNode = document.createElement('div');
 node.className = "tab";
 var bnode = document.createElement('div');

 this.createChoiceTables(node, bnode, choicesDict);
 this._el.prepend(node);
 this._el.prepend(topNode);

 var text = document.createElement('h3');
 text.className = "activityChoicesH3";
 text.innerHTML = "Choices:";
 topNode.append(text);
 this._el.append(bnode);
};

ActivityChoicesWidget.prototype.onWidgetContainerResize = function (width, height) {
 this._logger.debug('Widget is resizing...');
};

// Adding/Removing/Updating items
ActivityChoicesWidget.prototype.addNode = function (desc) {
 if (desc) {
     this.nodes[desc.id] = desc;

     if(desc['ChoicesDict'] != null)
     {
         this.setParams(desc['ChoicesDict']);
     }
 }
};

ActivityChoicesWidget.prototype.openTab = function (evt, tabName) {
 // Declare all variables
 var i, tabcontent, tablinks;

 // Get all elements with class="tabcontent" and hide them
 tabcontent = document.getElementsByClassName("tabcontent");
 for (i = 0; i < tabcontent.length; i++) {
   tabcontent[i].style.display = "none";
 }

 // Get all elements with class="tablinks" and remove the class "active"
 tablinks = document.getElementsByClassName("tablinks");
 for (i = 0; i < tablinks.length; i++) {
   tablinks[i].className = tablinks[i].className.replace(" active", "");
 }

 // Show the current tab, and add an "active" class to the button that opened the tab
 document.getElementById(tabName+'div').style.display = "block";
 evt.currentTarget.className += " active";
};

ActivityChoicesWidget.prototype.removeNode = function (gmeId) {
 delete this.nodes[gmeId];
};

ActivityChoicesWidget.prototype.updateNode = function (desc) {
 if (desc) {
     this._logger.debug('Updating node:', desc);
 }
};

/* * * * * * * * Visualizer event handlers * * * * * * * */

ActivityChoicesWidget.prototype.onNodeClick = function (/*id*/) {
 // This currently changes the active node to the given id and
 // this is overridden in the controller.
};

/* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
ActivityChoicesWidget.prototype.destroy = function () {
};

ActivityChoicesWidget.prototype.onActivate = function () {
 this._logger.debug('ActivityChoicesWidget has been activated');
 if(this.inputEnabled)
 {
     this._
 }
};

ActivityChoicesWidget.prototype.onDeactivate = function () {
 this._logger.debug('ActivityChoicesWidget has been deactivated');
};

return ActivityChoicesWidget;
});
