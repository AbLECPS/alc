/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jul 07 2016 11:24:16 GMT-0500 (Central Daylight Time).
 */

define(['deepforge/viz/Utils',
        'css!./styles/DataSetWidget.css',
	    '../library/bootstrap3-editable-1.5.1/bootstrap3-editable/js/bootstrap-editable.min',
	    'css!../library/bootstrap3-editable-1.5.1/bootstrap3-editable/css/bootstrap-editable.css'],
	function (Utils) {
		'use strict';

		var DataSetWidget,
			WIDGET_CLASS = 'ds-viz';

		DataSetWidget = function (logger, container) {
			this._logger = logger.fork('Widget');

			this._el = container;

			this.nodes = {};
			this._initialize();
			this.refInfo = {};
			this.dataInfo = {};
			this.dinfo= {};
			this.table = undefined;
			this.related_lecids = {};
			this.related_tdids = {};
			this.related_edids = {};
			this.row_counter = {};
			this.entry_id = 0;
			this.entry_id_vals = {};
			this._logger.debug('ctor finished');
		}

		DataSetWidget.prototype._initialize = function () {
			var width = this._el.width(),
				height = this._el.height(),
				self = this;

			$.fn.editable.defaults.mode = 'inline';
			// set widget class
			this._el.addClass(WIDGET_CLASS);

			var dummy = document.createElement('div');
			dummy.id = 'dummyheader';
			dummy.setAttribute("style", "margin-top: 50px;margin-left: 50px");
			this._el.append(dummy);

		};

		DataSetWidget.prototype.addDataInfo = function (desc) {
			var self = this;
			if (desc.exptName)
			{
				self.refInfo[desc.exptName] = desc.results;
				self.dataInfo[desc.id] = desc;
				
			}
			
		};



		DataSetWidget.prototype.renderTable = function () {
			var self = this;
			var keys = Object.keys(self.dataInfo);
			var i =0;
			self.dinfo = {};
			keys = keys.sort();
			
			for(i=0; i!=keys.length; i+=1)
			{
				var desc = self.dataInfo[keys[i]];
				
				var rinfo = desc.resultsInfo;
				var rkeys = Object.keys(rinfo);
				if (rkeys.length == 0)
					continue;
				var i1=0;
				for (i1=0; i1!= rkeys.length; i1+=1)
				{
					var id = rinfo[rkeys[i1]]['id'];
					var name =rinfo[rkeys[i1]]['name'];
					var ename =rinfo[rkeys[i1]]['ename'];
					self.dinfo[id]=[name, ename];
				}
			}
			
			
			
			var	keysdone=[];
			var order=['DataCollection','Training','Testing'];
			var ordercount=0;
			for(ordercount=0; ordercount != order.length; ordercount+=1)
			{
				var check='Construction/'+order[ordercount];
				for(i=0; i!=keys.length; i+=1)
				{
					if (keysdone.indexOf(keys[i])>-1)
						continue;
					var desc = self.dataInfo[keys[i]];
					var parentname = desc.exptHierName;
					if (parentname.indexOf(check)>-1){
						self.populateDataTable(keys[i])
						keysdone.push(keys[i]);
					}
				}
			}
			
			for(i=0; i!=keys.length; i+=1)
			{
				if (keysdone.indexOf(keys[i])>-1)
					continue;
				self.populateDataTable(keys[i])
			}
			
			
      
       var coll = document.getElementsByClassName("collapsiblecol");
      var i;

        for (i = 0; i < coll.length; i++) {
          coll[i].addEventListener("click", function() {
            this.classList.toggle("activecol");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
              content.style.display = "none";
            } else {
              content.style.display = "block";
            }
          });
        }
			
		};
		
		DataSetWidget.prototype.getReferenceString = function (ldata, type, keyid) {
			var self = this;
			var i=0;
			var ret = [];
			for(i=0; i!=ldata.length; i+=1)
			{
				var id = ldata[i];
				if (type == 1)
					self.related_lecids[keyid].push(id);
				if (type == 2)
					self.related_tdids[keyid].push(id);
				
				if (type == 3)
					self.related_edids[keyid].push(id);
				
				var content = self.dinfo[id];
        if (content)
        {
  				var name = content[0];
  				var ename = content[1];
  				var t = '<a href=#'+id+'>'+name+'</a>'
  				ret.push(t);
        }
			}
			return [ret.join('<br/>'), ret.length];
			
		};

		DataSetWidget.prototype.populateDataTable = function (pid) {
			var self = this;
			var  i =0;
			var desc = self.dataInfo[pid];
			var keys = Object.keys(desc.resultsInfo);
			
			if (keys.length == 0)
				return;
			
			var chld = '';
			var metaname = desc.pMetaName;
			var hname = desc.exptHierName;
			var titleText = " "+ hname;

			var nodeh = document.createElement('div');
			//var chldh = document.createTextNode(titleText);
      nodeh.className = 'fake-link';
      nodeh.innerHTML = titleText;
      var nodehsetactivitylink = 0;
     	//nodeh.onclick = self.onNodeClick.bind(self, activityID);
			//nodeh.appendChild(chldh);
		  nodeh.setAttribute("style", "margin-top: 50px;margin-left: 50px; font-weight:bold");
			nodeh.style.font = "bold 20px arial,serif";
			nodeh.setAttribute("display", "block");
			self._el.append(nodeh);

			var table = document.createElement('div');
			table.className = 'ds-viz-table'
			table.id = 'mode-table';
			table.setAttribute("style", "margin-top: 10px;margin-left: 50px");

			
			var node = document.createElement('div');
			node.className = 'ds-viz-heading';
	
			
			var cnode = document.createElement('div');
			cnode.className = 'ds-viz-table-col-c';
			var chld1 = document.createTextNode("Data-Set ");
			cnode.appendChild(chld1);
			node.appendChild(cnode);
      
      cnode = document.createElement('div');
			cnode.className = 'ds-viz-table-col-c';
			var chld1 = document.createTextNode("Location");
			cnode.appendChild(chld1);
			node.appendChild(cnode);
	
			cnode = document.createElement('div');
			cnode.className = 'ds-viz-table-col-c';
			var chld1 = document.createTextNode("Creation Time");
			cnode.appendChild(chld1);
			node.appendChild(cnode);
			
			/*cnode = document.createElement('div');
			cnode.className = 'ds-viz-table-col';
			var chld1 = document.createTextNode("Activity");
			cnode.appendChild(chld1);
			node.appendChild(cnode);*/
			
			cnode = document.createElement('div');
			cnode.className = 'ds-viz-table-col-c';
			var chld1 = document.createTextNode("Config Parameters");
			cnode.appendChild(chld1);
			node.appendChild(cnode);
			
			var showlec = 0; var showtd = 0; var showed = 0;
			var lecmetas =['SLTrainingSetUp',  'ExperimentSetup', 'Campaign','RLTrainingSetup','AssuranceMonitorSetup','VerificationSetup'];
			var tdmetas =['SLTrainingSetUp',  'AssuranceMonitorSetup'];
			//var edmetas =['SLTrainingSetUp',  'AssuranceMonitorSetup'];
      var edmetas = [];
			if (lecmetas.indexOf(metaname) >-1)
			{
				showlec=1;
				cnode = document.createElement('div');
				cnode.className = 'ds-viz-table-col-c';
				var chld1 = document.createTextNode("Trained LEC");
				cnode.appendChild(chld1);
				node.appendChild(cnode);
			
			}
			if (tdmetas.indexOf(metaname)>-1)
			{
				showtd=1;
				cnode = document.createElement('div-c');
				cnode.className = 'ds-viz-table-col';
				var chld1 = document.createTextNode("Training Data");
				cnode.appendChild(chld1);
				node.appendChild(cnode);
			
			}
			if (edmetas.indexOf(metaname)>-1)
			{
				showed=1;
				cnode = document.createElement('div-c');
				cnode.className = 'ds-viz-table-col';
				var chld1 = document.createTextNode("Evaluation Data");
				cnode.appendChild(chld1);
				node.appendChild(cnode);
			
			}
			
			cnode = document.createElement('div');
			cnode.className = 'ds-viz-table-col-c';
			var chld1 = document.createTextNode("Trace");
			cnode.appendChild(chld1);
			node.appendChild(cnode);
      
     	cnode = document.createElement('div');
			cnode.className = 'ds-viz-table-col-c';
			var chld1 = document.createTextNode("Results");
			cnode.appendChild(chld1);
			node.appendChild(cnode);
			
			table.append(node);

			var timelist = {};
			for (i=0; i!= keys.length; i+=1)
			{
				var key = keys[i];
				var name  =  desc.resultsInfo[key]['name'];
				var creationTime  =  desc.resultsInfo[key]['createdAt'];
				if (creationTime == 0 ){
					continue;
				}
				var time = creationTime; 
				timelist[time]= key;
			}

			var timekeys = Object.keys(timelist);
			var sortedkeys = timekeys.sort().reverse();
			
			
			for (i=0; i!= sortedkeys.length; i+=1)
			{
                                self._logger.debug('*****time *****'+sortedkeys[i]);
				var key = timelist[sortedkeys[i]];
				var keyid  =  desc.resultsInfo[key]['id'];
				var name  =  desc.resultsInfo[key]['name'];
				var creationTime  =  desc.resultsInfo[key]['createdAt'];
				var activity  =  desc.resultsInfo[key]['activity'];
				var activityid  =  desc.resultsInfo[key]['activityid'];
				var lecs  =  desc.resultsInfo[key]['lecs'];
				var tdata  =  desc.resultsInfo[key]['tdata'];
				var edata  =  desc.resultsInfo[key]['edata'];
				var paramset  =  desc.resultsInfo[key]['params'];
        var datainfo = desc.resultsInfo[key]['datainfo'];
        var resultinfo = '';
        var result_url = '';
				var params = paramset;
        var datainfos = '';
        var dirinfo = '';
				self.related_lecids[keyid]=[];
				self.related_tdids[keyid]=[];
				self.related_edids[keyid]=[];
				self.row_counter[keyid]=0;
				
        
        if (params)
				{
					try {
						var pobj =JSON.parse(paramset);
						params = JSON.stringify(pobj, null, 2); 
					}
					catch(e){
						params = paramset;
						
					}
				}
        
        if (datainfo)
				{
					try {
						datainfos =JSON.parse(datainfo);
            var keys = Object.keys(datainfos);
            if (keys.indexOf('directory') >-1)
            {
                var dirinfo1 = datainfos['directory'];
				var prefixinfo = datainfos['upload_prefix'];
				if (prefixinfo && dirinfo1.indexOf(prefixinfo)==-1)
				{
					dirinfo = prefixinfo +'/'+dirinfo1;
				}
				else
					dirinfo = dirinfo1;
				
				if (dirinfo.indexOf('jupyter') > -1)
				{
					var dirinfo1 = dirinfo;
					 var pos = dirinfo1.indexOf('jupyter');
					 var str1 = 'jupyter';
					 var l = str1.length +1;
					 pos = pos + l;
					 dirinfo = dirinfo.substring(pos);
				}
				else if (dirinfo.indexOf('/home') > -1)
				{
					 var dirinfo1 = dirinfo;
					 var pos = dirinfo1.indexOf('alc_workspace');
					 var str1 = 'alc_workspace';
					 var l = str1.length +1;
					 pos = pos + l;
					 dirinfo = dirinfo.substring(pos);
				}
					
            }
            
            if (keys.indexOf('result_url') >-1)
            {
                resultinfo = datainfos['result_url'];
                var h = window.location.hostname;
			    var p = window.location.port;
                if (resultinfo)
                {
					if (p)
					{
			            result_url = "http://"+ h +":"+p+"/ipython/notebooks/"+resultinfo;
					}
					else {
						result_url = "https://"+ h +"/ipython/notebooks/"+resultinfo;
					}
                }

            }
            
            if (keys.indexOf('exptParams') >-1)
            {
                var epinfo = datainfos['exptParams'];
                var p1  = epinfo;
                var ekeys = Object.keys (epinfo);
                if (ekeys.indexOf('execute')>-1)
                {
                   p1 = epinfo['execute'];
                }
                var p1keys = Object.keys(p1);
                if (p1keys.indexOf('params')>-1)
                {
                    p1 = p1['params'];
                }
                
                params = JSON.stringify(p1, null, 2); 
                
                
            }
					
					}
					catch(e){
						params = paramset;
						
					}
				}
        
        
        
				if (creationTime == 0 ){
					continue;
				}

				
				node = document.createElement('div');
				node.className = 'ds-viz-table-row';
				node.setAttribute("style", "background-color:#eee");
				node.id =keyid;
				
				chld = document.createElement('div');
				chld.className = 'ds-viz-table-col';
				var mtext = name;
				var chld1 = document.createTextNode(mtext);
				//chld.innerHTML = '<a href="#">' + mtext + '</a>';
				chld.appendChild(chld1);
				node.appendChild(chld);
        
        chld = document.createElement('div');
				chld.className = 'ds-viz-table-col';

				mtext = dirinfo;
				//chld.innerHTML = '<a href="#">' + mtext + '</a>';
				chld1 = document.createTextNode(mtext);
				//chld.innerHTML = '<a href="#">' + mtext + '</a>';
				chld.appendChild(chld1);
				node.appendChild(chld);
        
        
				
				chld = document.createElement('div');
				chld.className = 'ds-viz-table-col';

				mtext = Utils.getDisplayTime(creationTime);
                                self._logger.debug('*********mmtext*** '+mtext);
				//chld.innerHTML = '<a href="#">' + mtext + '</a>';
				chld1 = document.createTextNode(mtext);
				//chld.innerHTML = '<a href="#">' + mtext + '</a>';
				chld.appendChild(chld1);
				node.appendChild(chld);
				
				/*chld = document.createElement('div');
				chld.className = 'ds-viz-table-col fake-link';

				mtext = activity;
        chld.innerHTML =  mtext;
				//chld.innerHTML = '<a href=">'+activityid+'">'+ mtext + '</a>';
				//chld1 = document.createTextNode(mtext);
					//chld1.className = 'fake-link';
				//chld.innerHTML = '<a href="#">' + mtext + '</a>';
				//chld.appendChild(chld1);
				chld.onclick = self.onNodeClick.bind(self, activityid);
				node.appendChild(chld);*/
        
        if (nodehsetactivitylink == 0)
        {
          nodeh.onclick = self.onNodeClick.bind(self, activityid);
          nodehsetactivitylink =1;
        }
				
				chld = document.createElement('div');
        chld.className = 'ds-viz-table-col-mod';
        var btn = document.createElement("BUTTON");
        btn.className = 'collapsiblecol';
        btn.innerHTML='...';
        chld.appendChild(btn);
        chld1 = document.createElement('pre');
				chld1.className = 'contentcol';
				//chld.setAttribute("style","width:250px");
				mtext = params;
				//chld.innerHTML = '<a href="#">' + mtext + '</a>';
				//chld1 = document.createTextNode();
				chld1.innerHTML = mtext;//'<a href="#">' + mtext + '</a>';
				chld.appendChild(chld1);
				node.appendChild(chld);
				
				if (showlec)
				{
					chld = document.createElement('div');
					chld.className = 'ds-viz-table-col-mod';
					mtext  = '-'
          var mnum = 1
          var mvals = [];
					if (lecs)
          {
						mvals = self.getReferenceString(lecs,1,keyid);//lecs.join(',');
            mnum = mvals[1];
            mtext = mvals[0];
           }
           
           if (mnum <=1)
           {
           
                    
					//chld.innerHTML = '<a href="#">' + mtext + '</a>';
					//chld1 = document.createTextNode(mtext);
					//chld.innerHTML = '<a href="#">' + mtext + '</a>';
					chld.innerHTML = mtext;
           }
           else {
            var btn = document.createElement("BUTTON");
              btn.className = 'collapsiblecol';
              btn.innerHTML='...';
              chld.appendChild(btn);
              chld1 = document.createElement('pre');
      				chld1.className = 'contentcol';
      				//chld.setAttribute("style","width:250px");
      			
              	chld1.innerHTML = mtext;
               chld.appendChild(chld1);
           }
					//chld.appendChild(chld1);
					node.appendChild(chld);
				}
				
				if (showtd)
				{
					chld = document.createElement('div');
					chld.className = 'ds-viz-table-col-mod';
          var mnum = 1
          var mvals = [];
 				  mtext  = '-'
					if (tdata)
          {
						mvals = self.getReferenceString(tdata,2,keyid);//tdata.join(',');
            mnum = mvals[1];
            mtext = mvals[0];
           }
           
           if (mnum <=1)
           {
           
                    
					//chld.innerHTML = '<a href="#">' + mtext + '</a>';
					//chld1 = document.createTextNode(mtext);
					//chld.innerHTML = '<a href="#">' + mtext + '</a>';
					chld.innerHTML = mtext;
           }
           else {
            var btn = document.createElement("BUTTON");
              btn.className = 'collapsiblecol';
              btn.innerHTML='...';
              chld.appendChild(btn);
              chld1 = document.createElement('pre');
      				chld1.className = 'contentcol';
      				//chld.setAttribute("style","width:250px");
      				
              	chld1.innerHTML = mtext;
               chld.appendChild(chld1);
           }
	
	
					//chld.appendChild(chld1);
					node.appendChild(chld);
				}
				
				if (showed)
				{
					chld = document.createElement('div');
					chld.className = 'ds-viz-table-col-mod';
					mtext  = '-'
           var mnum = 1
          var mvals = [];
					if (edata)
          {
						mvals = self.getReferenceString(edata,2,keyid);//tdata.join(',');
            mnum = mvals[1];
            mtext = mvals[0];
           }
           
           if (mnum <=1)
           {
           
                    
					//chld.innerHTML = '<a href="#">' + mtext + '</a>';
					//chld1 = document.createTextNode(mtext);
					//chld.innerHTML = '<a href="#">' + mtext + '</a>';
					chld.innerHTML = mtext;
           }
           else {
            var btn = document.createElement("BUTTON");
              btn.className = 'collapsiblecol';
              btn.innerHTML='...';
              chld.appendChild(btn);
              chld1 = document.createElement('pre');
      				chld1.className = 'contentcol';
      				//chld.setAttribute("style","width:250px");
      			
              	chld1.innerHTML = mtext;
               chld.appendChild(chld1);
           }
					//chld.innerHTML = '<a href="#">' + mtext + '</a>';
					//chld1 = document.createTextNode(mtext);
					//chld.innerHTML = '<a href="#">' + mtext + '</a>';
					//chld.appendChild(chld1);
					chld.innerHTML = mtext;
					node.appendChild(chld);
				}
				
        chld = document.createElement('div');
				chld.className = 'ds-viz-table-col-mod';
				if (lecs.length>0)
				{
				var cnode = document.createElement('INPUT');
				cnode.type = 'checkbox';
				cnode.name = 'Check';
				cnode.id = 'l-'+keyid;
				cnode.setAttribute('align', 'center');
				var label = document.createElement('label')
				label.htmlFor = cnode.id;
				label.appendChild(document.createTextNode('Trained LEC'));
				chld.appendChild(cnode);
				chld.appendChild(label);
				cnode.onchange = self.onchangeLEC.bind(self, keyid);
				}
				cnode = document.createElement('br');
				chld.appendChild(cnode);
				if (tdata.length>0)
				{
				var cnode = document.createElement('INPUT');
				cnode.type = 'checkbox';
				cnode.name = 'Check';
				cnode.id = 't-'+keyid;
				cnode.setAttribute('align', 'left');
				var label = document.createElement('label')
				label.htmlFor = cnode.id;
				label.appendChild(document.createTextNode('Train Data'));
				chld.appendChild(cnode);
				chld.appendChild(label);
				cnode.onchange = self.onchangeTD.bind(self, keyid);
				}
				cnode = document.createElement('br');
				chld.appendChild(cnode);
				if (edata.length>0)
				{
				var cnode = document.createElement('INPUT');
				cnode.type = 'checkbox';
				cnode.name = 'Check';
				cnode.id = 'e-'+keyid;
				cnode.setAttribute('align', 'left');
				var label = document.createElement('label')
				label.htmlFor = cnode.id;
				label.appendChild(document.createTextNode('Evaluation Data'));
				chld.appendChild(cnode);
				chld.appendChild(label);
				cnode.onchange = self.onchangeED.bind(self, keyid);
				}
				var cnode = document.createElement('br');
				chld.appendChild(cnode);
        node.appendChild(chld);
        
        chld = document.createElement('div');
				chld.className = 'ds-viz-table-col-mod';
				mtext  = '-'
				if (result_url)
						mtext = '<a href="'+result_url+'" target="_blank"> Result </a>'
					//chld.innerHTML = '<a href="#">' + mtext + '</a>';
					//chld1 = document.createTextNode(mtext);
					//chld.innerHTML = '<a href="#">' + mtext + '</a>';
				chld.innerHTML = mtext;
					//chld.appendChild(chld1);
				node.appendChild(chld);
				
				
				
				/*chld = document.createElement('div');
				chld.className = 'm-viz-table-col-mod';
				self.entry_id +=1;
				self.entry_id_vals[keyid] = self.entry_id;
				chld.id = 'mode-' + self.entry_id;
				chld.id1 = keyid;
				var mtext = '-'
				chld.innerHTML = '<a href="#">' + mtext + '</a>';
				node.appendChild(chld);*/
				
				
				table.append(node);
	
			}

			self._el.append(table);
      
     
			/*
			for (i=0; i!= sortedkeys.length; i+=1)
			{
				var key = timelist[sortedkeys[i]];
				var keyid  =  desc.resultsInfo[key]['id'];
				var entryid = self.entry_id_vals[keyid];
				var modelist = [];
				modelist.push({ value: 1, text: 'LEC Model' });
				modelist.push({ value: 2, text: 'Training Data' });
				modelist.push({ value: 3, text: 'Evaluation Data' });

				var values = []

				var typeval = 'checklist';
				
				$('#mode-' + entryid).editable({
					type: typeval,
					title: 'Select',
					autotext: 'always',
					emptytext: '-',
					value: values,
					source: modelist,
					success: function (response, newValue) {
						self._logger.debug("new mode value = " + newValue + response);
						self._logger.debug("new mode value = " + this.innerText);
						self._logger.debug("element gme id = " + this.id1);
						
						
					}
				});
			}*/
		};
		
		
		
		DataSetWidget.prototype.onchangeLEC = function (keyid) {
		var self = this;
		self._logger.debug(' on change called '+keyid);
		var cid = 'l-'+keyid;
		var cb = document.getElementById(cid);
		//var row = document.getElementById(keyid);
		if (cb.checked) {
					console.log('checked')
					//row.setAttribute("style", "background-color:#FFFF00");
					self.updateRowCounter(keyid,1, true);
					
				  } else {
					console.log('not checked');
					//row.setAttribute("style", "background-color:#eee");
					self.updateRowCounter(keyid,1, false);
				  }
			
		};
		
		DataSetWidget.prototype.onchangeTD = function (keyid) {
		var self = this;
		self._logger.debug(' on change called '+keyid);
		var cid = 't-'+keyid;
		var cb = document.getElementById(cid);
		//var row = document.getElementById(keyid);
		if (cb.checked) {
					console.log('checked')
					//row.setAttribute("style", "background-color:#FFFF00");
					self.updateRowCounter(keyid,2, true);
					
				  } else {
					console.log('not checked');
					//row.setAttribute("style", "background-color:#eee");
					self.updateRowCounter(keyid,2, false);
				  }
			
		};
		
		DataSetWidget.prototype.onchangeED = function (keyid) {
		var self = this;
		self._logger.debug(' on change called '+keyid);
		var cid = 'e-'+keyid;
		var cb = document.getElementById(cid);
		//var row = document.getElementById(keyid);
		if (cb.checked) {
					console.log('checked')
					//row.setAttribute("style", "background-color:#FFFF00");
					self.updateRowCounter(keyid,3, true);
					
				  } else {
					console.log('not checked');
					//row.setAttribute("style", "background-color:#eee");
					self.updateRowCounter(keyid,3, false);
				  }
			
		};
		
		DataSetWidget.prototype.updateRowCounter = function (keyid, type, checked) {
			
			var inc =1;
			var self = this;
			if (!checked)
			{
				inc = -1;
			}
			
			self.row_counter[keyid] += inc;
			
			var row = document.getElementById(keyid);
			if (self.row_counter[keyid] > 0)
			{
				row.setAttribute("style", "background-color:#BDB76B");
			}
			else{
				self.row_counter[keyid] = 0;
				row.setAttribute("style", "background-color:#eee");
			}
			
			var i =0;
			
			var list = self.related_lecids[keyid];
			if (type ==2)
				list = self.related_tdids[keyid];
			if (type==3)
				list = self.related_edids[keyid];
			
			for(i=0; i!= list.length; i+=1)
			{
				var nid = list[i];
				self.row_counter[nid] += inc;
				
				var nrow = document.getElementById(nid);
				if (self.row_counter[nid] > 0)
				{
					nrow.setAttribute("style", "background-color:#BDB76B");
				}
				else{
					self.row_counter[nid] = 0;
					nrow.setAttribute("style", "background-color:#eee");
				}
				
			}
		};






		DataSetWidget.prototype.onWidgetContainerResize = function (width, height) {
			// this._logger.debug('Widget is resizing...');
		};

		// Adding/Removing/Updating items
		DataSetWidget.prototype.addNode = function (desc) {
			var self = this;
			if (desc) {

				// Add node to a table of nodes
				if (desc.metaName)
				{
					self.addDataInfo(desc);
				}
				
				if (desc.last == 1)
				{
					self.renderTable();
				}

			}

		};

		DataSetWidget.prototype.removeNode = function (gmeId) {
			var desc = this.nodes[gmeId];
			if (desc) {
				//this._el.append('<div>Removing node "' + desc.name + '"</div>');
				delete this.nodes[gmeId];
			}
		};

		DataSetWidget.prototype.updateNode = function (desc) {
			if (desc) {
				this._logger.debug('Updating node:', desc);
				//this._el.append('<div>Updating node "' + desc.name + '"</div>');
			}
		};

		/* * * * * * * * Visualizer event handlers * * * * * * * */

		DataSetWidget.prototype.onNodeClick = function (/*id*/) {
			// This currently changes the active node to the given id and
			// this is overridden in the controller.
		};

		DataSetWidget.prototype.onEditModeInfo = function (/*id*/) {
			// This currently changes the active node to the given id and
			// this is overridden in the controller.
		}

		DataSetWidget.prototype.onBackgroundDblClick = function () {
			
		};

		/* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
		DataSetWidget.prototype.destroy = function () {
		};

		DataSetWidget.prototype.onActivate = function () {
			this._logger.debug('DataSetWidget has been activated');
		};

		DataSetWidget.prototype.onDeactivate = function () {
			this._logger.debug('DataSetWidget has been deactivated');
		};

		return DataSetWidget;
	});
