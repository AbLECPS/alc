/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jul 07 2016 11:24:16 GMT-0500 (Central Daylight Time).
 */

define(['css!./styles/SelectorWidget.css',
        '../library/bootstrap3-editable-1.5.1/bootstrap3-editable/js/bootstrap-editable.min',
        'css!../library/bootstrap3-editable-1.5.1/bootstrap3-editable/css/bootstrap-editable.css'],
    function () {
        'use strict';

        var SelectorWidget,
            WIDGET_CLASS = 'm-viz';

        SelectorWidget = function (logger, container) {
            this._logger = logger.fork('Widget');

            this._el = container;

            this.nodes = {};
            this._initialize();
            this.refInfo = {};
            this.isGSN = 0;
            this.isLEC = 0;
            this.isLaunchFile = 0;
            this.isDefaultLaunchFile = 0;
            this.isSystemID = 0;
            this.isActivity = 0;
            this.isBarrier = 0;
            this.isStructureRef = 0;
            this.isEffect = 0;
            this.isResponse = 0;
            this.refInfoKeys = [];
            this.selectedValues = {};
            this.selectedResults = [];
            this.updatedResults = [];
            this.selected_evidence_results = [];
            this.selected_model_results = [];
            this.selected_evidence_values = [];
            this.selected_model_values = [];
            this.table = undefined;
            this.btreechoices = [];

            this.gsnEvidenceSource = {};
            this.gsnContextSource = {};
            this.gsnEvidenceKeys = [];
            this.gsnContextKeys = [];

            this.gsnContexts = {};
            this.gsnEvidences = {};
            this.gsnContextPorts = {};

            this.gsnFns = {};
            this.gsnFnSource = {};
            this.gsnFnKeys = [];
            this.gsnReqs = {};
            this.gsnReqSource = {};
            this.gsnReqKeys = [];
            this.gsnBarriers = {};
            this.gsnBarrierSource = {};
            this.gsnBarrierKeys = [];
            this.gsnBowTies = {};
            this.gsnBowTieSource = {};
            this.gsnBowTieKeys = [];
            this.gsnHazards = {};
            this.gsnHazardSource = {};
            this.gsnHazardKeys = [];
            this.gsnBTreeInfo = [];

            this.selected_fn_results = [];
            this.selected_fn_values = [];
            this.selected_req_results = [];
            this.selected_req_values = [];
            this.selected_hazard_results = [];
            this.selected_hazard_values = [];
            this.selected_bowtie_results = [];
            this.selected_bowtie_values = [];
            this.selected_barrier_results = [];
            this.selected_barrier_values = [];
            this.selected_refInfo="";

            this.tableids = [];
            this.rosNodeDescs = {};
            this.rosNodeChoices = {};
            this.rosNodeChoiceNames = [];
            this.otherSelectedROSNodes = [];
            this.selectedROSValues = [];
            this.ws = "                                                           ";
            this._logger.debug('ctor finished');
        };

        SelectorWidget.prototype._initialize = function () {
            var width = this._el.width(),
                height = this._el.height(),
                self = this;

            $.fn.editable.defaults.mode = 'inline';
            
            // set widget class
            this._el.addClass(WIDGET_CLASS);

            var dummy = document.createElement('div');
            dummy.id = 'dummyheader';
            dummy.setAttribute("style", "margin-top: 50px;margin-left: 50px");
            this._el.append(dummy);

        };

        SelectorWidget.prototype.getUpdatedSelections = function (newValue) {
            var self = this;
            var i =0;
            var vals = [];
            for(i=0; i!= newValue.length; i+=1)
            {
                vals.push(newValue[i].trim())

            }
            return vals;
        }

        SelectorWidget.prototype.updateCheckListSource = function (modelist) {
            var self = this;
            var i =0;
            var vals = [];
            var val = "";
            var maxlength = 0;
            var x = 0;
            for(i=0; i!= modelist.length; i+=1)
            {
                val = modelist[i]["text"];
                if (maxlength < val.length)
                {
                    maxlength = val.length;
                }
            }

            if (maxlength > 70)
            {
                maxlength = 70;
            }

            for(i=0; i!= modelist.length; i+=1)
            {
                val = modelist[i]["text"];
                if (maxlength > val.length)
                {
                    x = maxlength - val.length;
                    val = val+ self.ws.substr(0,x);
                }
                modelist[i]["text"]= val;
            }

            return modelist;
        }

        SelectorWidget.prototype.addRefInfo = function (desc) {
            var self = this;
            if (desc.exptName) {
                self.refInfo[desc.exptName] = desc.results;
                self.selectedValues[desc.exptName] = [];
            }
            if (desc.selected_results.length) {
                self.selectedResults = desc.selected_results;

            }
        };

        SelectorWidget.prototype.isEvidenceSource = function (t) {
            var self = this;
            var nodetypes = ['Activity','ExperimentSetup', 'SLTrainingSetUp', 'RLTrainingSetup','EvaluationSetup', 'Campaign','Workflow'];
            var i = 0;
            for (i = 0; i != nodetypes.length; i += 1) {
                if (t.indexOf(nodetypes[i]) > -1)
                    return 1;
            }
            return 0;
        };

        SelectorWidget.prototype.isContextSource = function (t) {
            var self = this;
            var nodetypes = ['SystemModel', 'Block'];
            var i = 0;
            for (i = 0; i != nodetypes.length; i += 1) {
                if (t.indexOf(nodetypes[i]) > -1)
                    return 1;
            }
            return 0;
        };

        SelectorWidget.prototype.isBlockSource = function (t) {
            var self = this;
            var nodetypes = ['Block'];
            var i = 0;
            for (i = 0; i != nodetypes.length; i += 1) {
                if (t.indexOf(nodetypes[i]) > -1)
                    return 1;
            }
            return 0;
        };

        SelectorWidget.prototype.isFnSource = function (t) {
            var self = this;
            var nodetypes = ['TopFn', 'PrimitiveFn'];
            var i = 0;
            for (i = 0; i != nodetypes.length; i += 1) {
                if (t.indexOf(nodetypes[i]) > -1)
                    return 1;
            }
            return 0;
        };

        SelectorWidget.prototype.isHazardSource = function (t) {
            var self = this;
            var nodetypes = ['Hazard'];
            var i = 0;
            for (i = 0; i != nodetypes.length; i += 1) {
                if (t.indexOf(nodetypes[i]) > -1)
                    return 1;
            }
            return 0;
        };

        SelectorWidget.prototype.isBarrierSource = function (t) {
            var self = this;
            var nodetypes = ['Mitigation'];
            var i = 0;
            for (i = 0; i != nodetypes.length; i += 1) {
                if (t.indexOf(nodetypes[i]) > -1)
                    return 1;
            }
            return 0;
        };

        SelectorWidget.prototype.isRequirementSource = function (t) {
            var self = this;
            var nodetypes = ['Requirement'];
            var i = 0;
            for (i = 0; i != nodetypes.length; i += 1) {
                if (t.indexOf(nodetypes[i]) > -1)
                    return 1;
            }
            return 0;
        };

        SelectorWidget.prototype.isBowTieSource = function (t) {
            var self = this;
            var nodetypes = ['DRM'];
            var i = 0;
            for (i = 0; i != nodetypes.length; i += 1) {
                if (t.indexOf(nodetypes[i]) > -1)
                    return 1;
            }
            return 0;
        };

        SelectorWidget.prototype.addFunctionInfo = function (desc) {
            var self = this;
            if (self.isFnSource(desc.metaName)) {
                self.gsnFns[desc.id] = desc.hname;
                self.gsnFnSource[desc.hname] = desc.id;
            }

        };

        SelectorWidget.prototype.addStructureRefInfo = function (desc) {
            var self = this;
            if (self.isBlockSource(desc.metaName)) {
                self.gsnContexts[desc.id] = desc.hname;
                if (desc.btreedetails)
                {
                    self.gsnBTreeInfo.push(desc.id);
                    self.parseBTreeChoices(desc.btreedetails);
                }
                
                //self.gsnContexts[desc.hname] = desc.id;
            }

        };

        SelectorWidget.prototype.parseBTreeChoices = function (btreeinfo) {
            var self = this;
            var contents = btreeinfo.split("\n");
            var i = 0;
            self.btreechoices = []
            for(i=0; i!=contents.length; i+=1)
            {
                var trimedstr = contents[i].trim();
                if (trimedstr.indexOf("input ")==0)
                {
                    var strcontents = trimedstr.split(/\s+/);
                    if (strcontents.length >= 2)
                    {
                        self.btreechoices.push('Input: '+ strcontents[1]);
                    }
                    continue;
                }
                if (trimedstr.indexOf("task ")==0)
                {
                    var strcontents = trimedstr.split(/\s+/);
                    if (strcontents.length >= 2)
                    {
                        self.btreechoices.push('Task: '+ strcontents[1]);
                    }
                    continue;

                }
                if (trimedstr.indexOf("check ")==0)
                {
                    var strcontents = trimedstr.split(/\s+/);
                    if (strcontents.length >= 2)
                    {
                        self.btreechoices.push('Check: '+ strcontents[1]);
                    }
                    continue;

                }
            }

        };



        SelectorWidget.prototype.addGSNInfo = function (desc) {
            var self = this;
            
            if (self.isEvidenceSource(desc.metaName)) {
                self.gsnEvidenceSource[desc.name] = desc.id;
                self.gsnEvidences[desc.id] = desc.name;
            }
            
            if (self.isContextSource(desc.metaName)) {
                self.gsnContexts[desc.id] = desc.hname;
                if (desc.metaName == "Port") {
                    self.gsnContextsPorts[desc.id] = desc.parentId;
                }
            }

            if (self.isFnSource(desc.metaName)) {
                self.gsnFns[desc.id] = desc.hname;
                self.gsnFnSource[desc.hname] = desc.id;
            }

            if (self.isRequirementSource(desc.metaName)) {
                self.gsnReqs[desc.id] = desc.hname;
                self.gsnReqSource[desc.hname] = desc.id;
            }

            if (self.isBowTieSource(desc.metaName)) {
                self.gsnBowTies[desc.id] = desc.hname;
                self.gsnBowTieSource[desc.hname] = desc.id;
            }

            if (self.isHazardSource(desc.metaName)) {
                self.gsnHazards[desc.id] = desc.hname;
                self.gsnHazardSource[desc.hname] = desc.id;
            }

            if (self.isBarrierSource(desc.metaName)) {
                self.gsnBarriers[desc.id] = desc.hname;
                self.gsnBarrierSource[desc.hname] = desc.id;
            }

            

        };

        SelectorWidget.prototype.addLaunchInfo = function (desc) {
            var self = this;
            if (desc.metaName.indexOf('Block') != -1) {
                self.rosNodeDescs[desc.id] = desc
            }
            if ((desc.metaName.indexOf('LaunchFile') != -1) && desc.isCurrentLaunchFile == 1 && desc.selected_results.length) {
                self.selectedResults = desc.selected_results;
            }
            if ((desc.metaName.indexOf('LaunchFile') != -1) && desc.isCurrentLaunchFile == 0 && desc.selected_results.length) {
                var k = 0;
                for (k = 0; k != desc.selected_results.length; k += 1) {
                    var value = desc.selected_results[k];
                    if (self.otherSelectedROSNodes.indexOf(value) == -1) {
                        self.otherSelectedROSNodes.push(value);
                    }

                }
            }

        };

        SelectorWidget.prototype.getUpdatedIDs = function (exptName, selectedtableid, idvals) {
            var self = this;

            var keys = Object.keys(self.refInfo[exptName]);

            var originalIDs = self.selectedValues[exptName];

            var ids = [];
            var i = 0;
            var removeLEC = 0;
            if (!self.isLEC && !self.isSystemID) {
                for (i = 0; i != idvals.length; i += 1) {
                    ids.push(parseInt(idvals[i]));
                }
            } else {
                ids.push(parseInt(idvals) - 1);
                if (ids[0] == 0) {
                    removeLEC = 1;
                }
            }


            self.selectedValues[exptName] = ids;

            var retids = {'add': [], 'remove': []};

            if (removeLEC == 0) {
                for (i = 0; i != originalIDs.length; i += 1) {
                    if (ids.indexOf(originalIDs[i]) == -1) {
                        var name = keys[originalIDs[i] - 1];
                        retids['remove'].push(self.refInfo[exptName][name]);
                    }
                }

                for (i = 0; i != ids.length; i += 1) {
                    if (originalIDs.indexOf(ids[i]) == -1) {
                        var name = keys[ids[i] - 1];
                        retids['add'].push(self.refInfo[exptName][name]);
                    }
                }
            }

            for (i = 0; i != self.tableids.length; i += 1) {
                if (i == selectedtableid) {
                    continue;
                }
                $('#mode-' + i).editable('setValue', "");
            }


            return retids;
        };

        SelectorWidget.prototype.getUpdatedContext = function (id1, idvals) {
            var self = this;
            self._logger.debug(' Selection ' + id1);
            var i = 0;
            var originalIDs = self.selected_model_values;
            var ids=[];
            for (i = 0; i != idvals.length; i += 1) {
                ids.push(parseInt(idvals[i]));
            }
            self.selected_model_values = ids;

            

            

            var retids = {'add': [], 'remove': []};

            for (i = 0; i != originalIDs.length; i += 1) {
                if (self.selected_model_values.indexOf(originalIDs[i]) == -1) {
                    var name = self.gsnContextKeys[originalIDs[i] - 1];
                    retids['remove'].push(self.gsnContextSource[name]);
                }
            }

            for (i = 0; i != self.selected_model_values.length; i += 1) {
                if (originalIDs.indexOf(self.selected_model_values[i]) == -1) {
                    var name = self.gsnContextKeys[self.selected_model_values[i] - 1];
                    retids['add'].push(self.gsnContextSource[name]);
                }
            }

            return retids;
        };

        SelectorWidget.prototype.getUpdatedEvidence = function (id1, idvals) {
            var self = this;
            self._logger.debug(' Selection ' + id1);
            var i = 0;
            var originalIDs = self.selected_evidence_values;
            var ids=[];
            for (i = 0; i != idvals.length; i += 1) {
                ids.push(parseInt(idvals[i]));
            }
            self.selected_evidence_values = ids;

            

            

            var retids = {'add': [], 'remove': []};

            for (i = 0; i != originalIDs.length; i += 1) {
                if (self.selected_evidence_values.indexOf(originalIDs[i]) == -1) {
                    var name = self.gsnEvidenceKeys[originalIDs[i] - 1];
                    retids['remove'].push(self.gsnEvidenceSource[name]);
                }
            }

            for (i = 0; i != self.selected_evidence_values.length; i += 1) {
                if (originalIDs.indexOf(self.selected_evidence_values[i]) == -1) {
                    var name = self.gsnEvidenceKeys[self.selected_evidence_values[i] - 1];
                    retids['add'].push(self.gsnEvidenceSource[name]);
                }
            }

            return retids;



        };


        SelectorWidget.prototype.getUpdatedFunction = function (id1, idvals) {
            var self = this;
            self._logger.debug(' Selection ' + id1);
            var i = 0;
            var originalIDs = self.selected_fn_values;
            var ids=[];
            for (i = 0; i != idvals.length; i += 1) {
                ids.push(parseInt(idvals[i]));
            }
            self.selected_fn_values = ids;
            var retids = {'add': [], 'remove': []};

            for (i = 0; i != originalIDs.length; i += 1) {
                if (self.selected_fn_values.indexOf(originalIDs[i]) == -1) {
                    var name = self.gsnFnKeys[originalIDs[i] - 1];
                    retids['remove'].push(self.gsnFnSource[name]);
                }
            }

            for (i = 0; i != self.selected_fn_values.length; i += 1) {
                if (originalIDs.indexOf(self.selected_fn_values[i]) == -1) {
                    var name = self.gsnFnKeys[self.selected_fn_values[i] - 1];
                    retids['add'].push(self.gsnFnSource[name]);
                }
            }

            return retids;

        };

        SelectorWidget.prototype.getUpdatedFunctionSelection = function (id1, idvals) {
            var self = this;
            self._logger.debug(' Selection ' + id1);
            var i = 0;
            var originalIDs = self.selected_fn_values;
            var ids=parseInt(idvals);
            self.selected_fn_values = [ids-1];
            
            if (ids-1 == 0)
            {
                return null;
                
            }
            
            return self.gsnFnSource[self.gsnFnKeys[ids-2]];

        };

        SelectorWidget.prototype.getUpdatedImplementor = function (id1, idvals) {
            var self = this;
            self._logger.debug(' Selection ' + id1);
            var i = 0;
            var originalIDs = self.selected_model_values;
            var ids=parseInt(idvals);
            self.selected_model_values = ids-1;
            if (ids-1 == 0)
            {
                return null;
            }
            
            return self.gsnContextSource[self.gsnContextKeys[ids-2]];

        };

        SelectorWidget.prototype.getUpdatedHazard = function (id1, idvals) {
            var self = this;
            self._logger.debug(' Selection ' + id1);
            var i = 0;
            var originalIDs = self.selected_hazard_values;
            var ids=[];
            for (i = 0; i != idvals.length; i += 1) {
                ids.push(parseInt(idvals[i]));
            }
            self.selected_hazard_values = ids;
            var retids = {'add': [], 'remove': []};

            for (i = 0; i != originalIDs.length; i += 1) {
                if (self.selected_hazard_values.indexOf(originalIDs[i]) == -1) {
                    var name = self.gsnHazardKeys[originalIDs[i] - 1];
                    retids['remove'].push(self.gsnHazardSource[name]);
                }
            }

            for (i = 0; i != self.selected_hazard_values.length; i += 1) {
                if (originalIDs.indexOf(self.selected_hazard_values[i]) == -1) {
                    var name = self.gsnHazardKeys[self.selected_hazard_values[i] - 1];
                    retids['add'].push(self.gsnHazardSource[name]);
                }
            }

            return retids;

        };

        SelectorWidget.prototype.getUpdatedRequirement = function (id1, idvals) {
            var self = this;
            self._logger.debug(' Selection ' + id1);
            var i = 0;
            var originalIDs = self.selected_req_values;
            var ids=[];
            for (i = 0; i != idvals.length; i += 1) {
                ids.push(parseInt(idvals[i]));
            }
            self.selected_req_values = ids;
            
            var retids = {'add': [], 'remove': []};

            for (i = 0; i != originalIDs.length; i += 1) {
                if (self.selected_req_values.indexOf(originalIDs[i]) == -1) {
                    var name = self.gsnReqKeys[originalIDs[i] - 1];
                    retids['remove'].push(self.gsnReqSource[name]);
                }
            }

            for (i = 0; i != self.selected_req_values.length; i += 1) {
                if (originalIDs.indexOf(self.selected_req_values[i]) == -1) {
                    var name = self.gsnReqKeys[self.selected_req_values[i] - 1];
                    retids['add'].push(self.gsnReqSource[name]);
                }
            }

            return retids;

        };

        SelectorWidget.prototype.getUpdatedBarrier = function (id1, idvals) {
            var self = this;
            self._logger.debug(' Selection ' + id1);
            var i = 0;
            var originalIDs = self.selected_barrier_values;
            var ids=[];
            for (i = 0; i != idvals.length; i += 1) {
                ids.push(parseInt(idvals[i]));
            }
            self.selected_barrier_values = ids;
            
            var retids = {'add': [], 'remove': []};

            for (i = 0; i != originalIDs.length; i += 1) {
                if (self.selected_barrier_values.indexOf(originalIDs[i]) == -1) {
                    var name = self.gsnBarrierKeys[originalIDs[i] - 1];
                    retids['remove'].push(self.gsnBarrierSource[name]);
                }
            }

            for (i = 0; i != self.selected_barrier_values.length; i += 1) {
                if (originalIDs.indexOf(self.selected_barrier_values[i]) == -1) {
                    var name = self.gsnBarrierKeys[self.selected_barrier_values[i] - 1];
                    retids['add'].push(self.gsnBarrierSource[name]);
                }
            }

            return retids;

        };

        SelectorWidget.prototype.getUpdatedBowTie = function (id1, idvals) {
            var self = this;
            self._logger.debug(' Selection ' + id1);
            var i = 0;
            var originalIDs = self.selected_bowtie_values;
            var ids=[];
            for (i = 0; i != idvals.length; i += 1) {
                ids.push(parseInt(idvals[i]));
            }
            self.selected_bowtie_values = ids;
            var retids = {'add': [], 'remove': []};

            for (i = 0; i != originalIDs.length; i += 1) {
                if (self.selected_bowtie_values.indexOf(originalIDs[i]) == -1) {
                    var name = self.gsnBowTieKeys[originalIDs[i] - 1];
                    retids['remove'].push(self.gsnBowTieSource[name]);
                }
            }

            for (i = 0; i != self.selected_bowtie_values.length; i += 1) {
                if (originalIDs.indexOf(self.selected_bowtie_values[i]) == -1) {
                    var name = self.gsnBowTieKeys[self.selected_bowtie_values[i] - 1];
                    retids['add'].push(self.gsnBowTieSource[name]);
                }
            }

            return retids;

        };






        SelectorWidget.prototype.getRefID = function (exptName, index) {
            var self = this;
            var keys = Object.keys(self.refInfo[exptName]);
            var name = keys[index - 1];
            var id = self.refInfo[exptName][name];
            return id;
        };


        SelectorWidget.prototype.assembleIDs = function () {
            var self = this;
            var j = 0;
            var k = 0;

            for (j = 0; j < self.refInfoKeys.length; j++) {

                var results = self.refInfo[self.refInfoKeys[j]];
                var modes = Object.keys(results);
                var list = [];
                var x = -1;

                for (k = 0; k < modes.length; k++)
                    list.push(results[modes[k]]);

                for (k = 0; k < self.selectedResults.length; k++) {
                    x = list.indexOf(self.selectedResults[k]);
                    if (x != -1) {
                        if (self.isLEC || self.isSystemID) {
                            self.selectedValues[self.refInfoKeys[j]].push(x + 2);
                        } else {
                            self.selectedValues[self.refInfoKeys[j]].push(x + 1);
                        }
                    }

                }


            }

        };

        SelectorWidget.prototype.assembleEvidenceIDs = function () {
            var self = this;
            var j = 0;
            var k = 0;

            for (j = 0; j < self.refInfoKeys.length; j++) {

                var results = self.refInfo[self.refInfoKeys[j]];
                var modes = Object.keys(results);
                var list = [];
                var x = -1;

                for (k = 0; k < modes.length; k++)
                    list.push(results[modes[k]]);

                for (k = 0; k < self.selectedResults.length; k++) {
                    x = list.indexOf(self.selectedResults[k]);
                    if (x != -1) {
                        if (self.isLEC || self.isSystemID) {
                            self.selectedValues[self.refInfoKeys[j]].push(x + 2);
                        } else {
                            self.selectedValues[self.refInfoKeys[j]].push(x + 1);
                        }
                    }

                }


            }

        };


        SelectorWidget.prototype.assembleSelectedROSNodeIDs = function () {
            var self = this;
            var k = 0;

            for (k = 0; k < self.selectedResults.length; k++) {
                var id = self.selectedResults[k];
                var hname = self.rosNodeDescs[id].hname;
                var x = self.rosNodeChoiceNames.indexOf(hname);
                if (x != -1) {
                    self.selectedROSValues.push(x + 1);
                }

            }
        };

        SelectorWidget.prototype.buildROSChoiceNodes = function () {
            var k = 0;
            var self = this;
            self.rosNodeChoices = {}
            self.rosNodeChoiceNames = [];
            var keys = Object.keys(self.rosNodeDescs)
            for (k = 0; k != keys.length; k += 1) {
                var desc = self.rosNodeDescs[keys[k]];
                if ((self.selectedResults.indexOf(desc.id) != -1) && self.rosNodeChoiceNames.indexOf(desc.hname) == -1) {
                    self.rosNodeChoices[desc.hname] = desc.id;
                    self.rosNodeChoiceNames.push(desc.hname)
                    continue;
                }
                if (self.otherSelectedROSNodes.indexOf(desc.id) != -1) {
                    continue;
                }

                self.rosNodeChoices[desc.hname] = desc.id;
                self.rosNodeChoiceNames.push(desc.hname);
            }
            self.rosNodeChoiceNames.sort();
        };

        SelectorWidget.prototype.renderLaunchFileTable = function () {
            var self = this;
            self.buildROSChoiceNodes();

            if (self.rosNodeChoiceNames.length == 0)
                return;

            self.assembleSelectedROSNodeIDs();


            var table = document.createElement('div');
            table.className = 'm-viz-table'
            table.id = 'dep-table';
            table.setAttribute("style", "margin-top: 50px;margin-left: 50px");

            var node = document.createElement('div');
            node.className = 'm-viz-heading';

            var cnode = document.createElement('div');
            cnode.className = 'm-viz-table-col';
            var text = "Category";
            var chld1 = document.createTextNode(text);
            cnode.appendChild(chld1);
            node.appendChild(cnode);

            cnode = document.createElement('div');
            cnode.className = 'm-viz-table-col';
            text = "Choices";
            var chld1 = document.createTextNode(text);
            cnode.appendChild(chld1);
            node.appendChild(cnode);

            var i = 0;
            var j = 0;

            table.appendChild(node);
            self._el.append(table);
            self.table = this._el.find('#dep-table');

            node = document.createElement('div');
            node.className = 'm-viz-table-row';
            var chld = document.createElement('div');
            chld.className = 'm-viz-table-col';
            text = 'ROS Nodes'
            var chld1 = document.createTextNode(text);
            chld.appendChild(chld1);
            node.appendChild(chld);

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col-wide-mod';
            chld.id = 'mode-0';
            chld.id2 = 0;
            var mtext = '-'
            chld.innerHTML = '<a href="#">' + mtext + '</a>';
            node.appendChild(chld);
            table.appendChild(node);
            self._el.append(table);
            self.table = this._el.find('#mode-table');


            var modelist = [];
            var k = 0;
            var results = self.rosNodeChoiceNames;
            var modes = results;
            var inc = 1;
            var values = self.selectedROSValues;

            if (self.isDefaultLaunchFile)
            {
                values = [];
            }
            for (k = 0; k < modes.length; k++)
            {
                modelist.push({value: k + inc, text: modes[k]});
                if (self.isDefaultLaunchFile)
                {
                    values.push(k+inc);
                }
                
            }

            modelist = self.updateCheckListSource(modelist);

            


            var typeval = 'checklist';


            $('#mode-0').editable({
                type: typeval,
                title: 'Select',
                autotext: 'always',
                emptytext: 'None',
                value: values,
                source: modelist,
                success: function (response, newValue) {
                    self._logger.debug("new mode value = " + newValue + response);
                    self._logger.debug("new mode value = " + this.innerText);

                    self._logger.debug("element gme id = " + this.id1);
                    var ids = self.updateSelectedROSNodeIDs(newValue);
                    self.onEditSetInfo(ids);

                }
            });

            if (self.isDefaultLaunchFile)
            {
                $('#mode-0').editable('option', 'disabled', true);
               //$('#mode-0').editable('toggleDisabled');
            }


        };

        SelectorWidget.prototype.updateSelectedROSNodeIDs = function (idvals) {
            var ret = [];
            var self = this;
            var originalIDs = self.selectedROSValues;

            var ids = [];
            var i = 0;
            for (i = 0; i != idvals.length; i += 1) {
                ids.push(parseInt(idvals[i]));
            }

            self.selectedROSValues = ids;

            var retids = {'add': [], 'remove': []};

            for (i = 0; i != originalIDs.length; i += 1) {
                if (ids.indexOf(originalIDs[i]) == -1) {
                    var name = self.rosNodeChoiceNames[originalIDs[i] - 1];
                    retids['remove'].push(self.rosNodeChoices[name]);
                }
            }

            for (i = 0; i != ids.length; i += 1) {
                if (originalIDs.indexOf(ids[i]) == -1) {
                    var name = self.rosNodeChoiceNames[ids[i] - 1];
                    retids['add'].push(self.rosNodeChoices[name]);
                }
            }

            return retids;

        };


        SelectorWidget.prototype.renderFunctionTable = function () {
            var self = this;
            self.assembleFunctionContexts();

            

            self._logger.debug('hostname ' + window.location.hostname);
            self._logger.debug('port ' + window.location.port);


            var table = document.createElement('div');
            table.className = 'm-viz-table'
            table.id = 'mode-table';
            table.setAttribute("style", "margin-top: 50px;margin-left: 50px,width:500px");

            var node = document.createElement('div');
            node.className = 'm-viz-heading';

            var cnode = document.createElement('div');
            cnode.className = 'm-viz-table-col';
            var chld1 = document.createTextNode("Function");
            cnode.appendChild(chld1);
            node.appendChild(cnode);

            cnode = document.createElement('div');
            cnode.className = 'm-viz-table-col';
            var chld1 = document.createTextNode("Target");
            cnode.appendChild(chld1);
            node.appendChild(cnode);

            var i = 0;
            var j = 0;

            table.appendChild(node);
            self._el.append(table);
            self.table = this._el.find('#mode-table');


            node = document.createElement('div');
            node.className = 'm-viz-table-row';

            var chld = document.createElement('div');
            chld.className = 'm-viz-table-col';
            chld1 = document.createTextNode('Functions');
            chld.appendChild(chld1);
            node.appendChild(chld);

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col-wide-mod-1';
            chld.id = 'mode-function';
            chld.id1 = 'Function';
            chld.id2 = 1;
            var mtext = '-'
            chld.innerHTML = '<a style="text-align:left" href="#">' + mtext + '</a>';
            node.appendChild(chld);
            table.appendChild(node);

            
            self._el.append(table);
            self.table = this._el.find('#mode-table');

            var modelist = [];
            var modes = self.gsnFnKeys;
            var values = self.selected_fn_values;
            var k = 0;
            var typeval = 'select';
            
            var inc = 1;
            if (self.isEffect || self.isResponse) {
                modelist.push({value: 1, text: '--None--'});
                inc = 2;
            }

            for (k = 0; k < modes.length; k++) 
                modelist.push({value: k + inc, text:modes[k]});//+self.ws});
                
                
            if (self.isBarrier)
            {
                modelist = self.updateCheckListSource(modelist);
                typeval = 'checklist';
            }

            

            self._logger.debug('fn list ' + modes)

            $('#mode-function').editable({
                type: typeval,
                title: 'Select',
                size: '10',
                separator:'<br/>',
                display: 'block',
                autotext: 'always',
                emptytext: 'None',
                width: 'fit-content',
                value: values,
                source: modelist,
                success: function (response, newValue) {
                    self._logger.debug("new mode value = " + newValue + response);
                    self._logger.debug("new mode value = " + this.innerText);

                    self._logger.debug("element gme id = " + this.id1);
                    
                    if (self.isBarrier)
                    {
                        
                        var ids = self.getUpdatedFunction(this.id1, newValue);
                        self.onEditSetInfo(ids,'Implementor');
                    }
                    else {
                        var ids = self.getUpdatedFunctionSelection(this.id1, newValue);
                        self.onEditSelectionInfo(ids);
                    }
                    
                }
            });

            
        };

        


        SelectorWidget.prototype.renderTable = function () {
            var self = this;

            if (self.isGSN) {
                return self.renderGSNTable();
            }

            if (self.isLaunchFile) {
                return self.renderLaunchFileTable();
            }

            if (self.isBarrier || self.isEffect || self.isResponse)
            {
                return self.renderFunctionTable();
            }

            if (self.isStructureRef)
            {
                return self.renderImplementorTable();
            }

            self.refInfoKeys = Object.keys(self.refInfo);
            if (self.refInfoKeys.length == 0)
                return;
            
            self.refInfoKeys.sort();
            self.assembleIDs();

            var table = document.createElement('div');
            table.className = 'm-viz-table'
            table.id = 'mode-table';
            table.setAttribute("style", "margin-top: 50px;margin-left: 50px");

            var node = document.createElement('div');
            node.className = 'm-viz-heading';

            var cnode = document.createElement('div');
            cnode.className = 'm-viz-table-col';

            // Set heading name for first table column (Read-only names of the possible data sources)
            var text = "Experiment";
            if (self.isActivity) {
				text = "Group";
			} else if (self.isLEC) {
				text = "Training Setup";
			}

            var chld1 = document.createTextNode(text);
            cnode.appendChild(chld1);
            node.appendChild(cnode);

            cnode = document.createElement('div');
            cnode.className = 'm-viz-table-col';

            // Set heading name for second table column (Where user selects from available options)
            text = "DataSet";
            if (self.isActivity) {
                text = "Activities";
            } else if (self.isLEC) {
                text = "Trained Model";
            }

            var chld1 = document.createTextNode(text);
            cnode.appendChild(chld1);
            node.appendChild(cnode);

            var i = 0;
            var j = 0;

            table.appendChild(node);
            self._el.append(table);
            self.table = this._el.find('#mode-table');

            for (j = 0; j < self.refInfoKeys.length; j++) {

                node = document.createElement('div');
                node.className = 'm-viz-table-row';
                if ((j + 1) % 2 == 1) {
                    node.setAttribute("style", "background-color:#eee");
                }

                var chld = document.createElement('div');
                chld.className = 'm-viz-table-col';
                var chld1 = document.createTextNode(self.refInfoKeys[j]);
                chld.appendChild(chld1);
                node.appendChild(chld);

                chld = document.createElement('div');
                chld.className = 'm-viz-table-col-mod';
                chld.id = 'mode-' + j;
                chld.id1 = self.refInfoKeys[j];
                chld.id2 = j;
                var mtext = '-'
                chld.innerHTML = '<a href="#">' + mtext + '</a>';
                node.appendChild(chld);
                table.appendChild(node);

            }

            self._el.append(table);
            self.table = this._el.find('#mode-table');

            for (j = 0; j < self.refInfoKeys.length; j++) {
                var modelist = [];
                var k = 0;
                var results = self.refInfo[self.refInfoKeys[j]];
                var modes = Object.keys(results);
                var inc = 1;
                if (self.isLEC || self.isSystemID) {
                    modelist.push({value: 1, text: '--None--'});
                    inc = 2;
                }
                

                var values = self.selectedValues[self.refInfoKeys[j]];

                var typeval = 'checklist';
                for (k = 0; k < modes.length; k++)
                    modelist.push({value: k + inc, text: modes[k]});

                
                if (self.isLEC || self.isSystemID) {
                    typeval = 'select';
                    self.tableids.push(j);
                    
                }
                else
                {
                    modelist = self.updateCheckListSource(modelist);
                }

                
                
            


                $('#mode-' + j).editable({
                    type: typeval,
                    title: 'Select',
                    autotext: 'always',
                    emptytext: 'None',
                    value: values,
                    source: modelist,
                    success: function (response, newValue) {
                        self._logger.debug("new mode value = " + newValue + response);
                        self._logger.debug("new mode value = " + this.innerText);

                        self._logger.debug("element gme id = " + this.id1);
                        

                        var ids = self.getUpdatedIDs(this.id1, this.id2, newValue);
                        self.onEditSetInfo(ids);

                    }
                });
            }

        };

        SelectorWidget.prototype.assembleGSNContexts = function () {
            var self = this;

            var pkeys = Object.keys(self.gsnContextPorts);
            var i = 0;
            for (i = 0; i != pkeys.length; i += 1) {

                var pid = self.gsnContextPorts[pkeys[i]];
                var pname = self.gsnContexts[pid];
                var name = pname + '/' + self.gsnContexts[pkeys[i]];
                self.gsnContexts[pkeys[i]] = name;

            }

            var ckeys = Object.keys(self.gsnContexts);
            for (i = 0; i != ckeys.length; i += 1) {

                var name = self.gsnContexts[ckeys[i]];
                self.gsnContextSource[name] = ckeys[i];

            }

            var ekeys = Object.keys(self.gsnContextSource);
            self.gsnContextKeys = ekeys.sort();

            ekeys = Object.keys(self.gsnEvidenceSource);
            self.gsnEvidenceKeys = ekeys.sort();

            for(i=0; i!=self.selected_evidence_results.length; i+=1)
            {
                var ename = self.gsnEvidences[self.selected_evidence_results[i]];
                var idx = self.gsnEvidenceKeys.indexOf(ename);
                if (idx !=-1)
                {
                    self.selected_evidence_values.push(idx+1)
                }
            }

            for(i=0; i!=self.selected_model_results.length; i+=1)
            {
                var cname = self.gsnContexts[self.selected_model_results[i]];
                var idx = self.gsnContextKeys.indexOf(cname);
                if (idx !=-1)
                {
                    self.selected_model_values.push(idx+1)
                }
            }

            ekeys = Object.keys(self.gsnFnSource);
            self.gsnFnKeys = ekeys.sort();
            for(i=0; i!=self.selected_fn_results.length; i+=1)
            {
                var ename = self.gsnFns[self.selected_fn_results[i]];
                var idx = self.gsnFnKeys.indexOf(ename);
                if (idx !=-1)
                {
                    self.selected_fn_values.push(idx+1)
                }
            }

            ekeys = Object.keys(self.gsnHazardSource);
            self.gsnHazardKeys = ekeys.sort();
            for(i=0; i!=self.selected_hazard_results.length; i+=1)
            {
                var ename = self.gsnHazards[self.selected_hazard_results[i]];
                var idx = self.gsnHazardKeys.indexOf(ename);
                if (idx !=-1)
                {
                    self.selected_hazard_values.push(idx+1)
                }
            }

            ekeys = Object.keys(self.gsnReqSource);
            self.gsnReqKeys = ekeys.sort();
            for(i=0; i!=self.selected_req_results.length; i+=1)
            {
                var ename = self.gsnReqs[self.selected_req_results[i]];
                var idx = self.gsnReqKeys.indexOf(ename);
                if (idx !=-1)
                {
                    self.selected_req_values.push(idx+1)
                }
            }

            ekeys = Object.keys(self.gsnBowTieSource);
            self.gsnBowTieKeys = ekeys.sort();
            for(i=0; i!=self.selected_bowtie_results.length; i+=1)
            {
                var ename = self.gsnBowTies[self.selected_bowtie_results[i]];
                var idx = self.gsnBowTieKeys.indexOf(ename);
                if (idx !=-1)
                {
                    self.selected_bowtie_values.push(idx+1)
                }
            }

            ekeys = Object.keys(self.gsnBarrierSource);
            self.gsnBarrierKeys = ekeys.sort();
            for(i=0; i!=self.selected_barrier_results.length; i+=1)
            {
                var ename = self.gsnBarriers[self.selected_barrier_results[i]];
                var idx = self.gsnBarrierKeys.indexOf(ename);
                if (idx !=-1)
                {
                    self.selected_barrier_values.push(idx+1)
                }
            }
        };

        SelectorWidget.prototype.assembleFunctionContexts = function () {
            var self = this;
            var ekeys = Object.keys(self.gsnFnSource);
            self.gsnFnKeys = ekeys.sort();
            var inc =2;
            if (self.isBarrier)
            {
                inc =1 ;    
            }
            for(i=0; i!=self.selected_fn_results.length; i+=1)
            {
                var ename = self.gsnFns[self.selected_fn_results[i]];
                var idx = self.gsnFnKeys.indexOf(ename);
                if (idx !=-1)
                {
                    self.selected_fn_values.push(idx+inc);
                }
            }

            if (!self.isBarrier && self.selected_fn_results.length ==0)
            {
                self.selected_fn_values.push(1);

            }


            
        };

        SelectorWidget.prototype.assembleImplementorContexts = function () {
            var self = this;

            var pkeys = Object.keys(self.gsnContextPorts);
            var i = 0;
            for (i = 0; i != pkeys.length; i += 1) {

                var pid = self.gsnContextPorts[pkeys[i]];
                var pname = self.gsnContexts[pid];
                var name = pname + '/' + self.gsnContexts[pkeys[i]];
                self.gsnContexts[pkeys[i]] = name;

            }

            var ckeys = Object.keys(self.gsnContexts);
            for (i = 0; i != ckeys.length; i += 1) {

                var name = self.gsnContexts[ckeys[i]];
                self.gsnContextSource[name] = ckeys[i];

            }

            var ekeys = Object.keys(self.gsnContextSource);
            self.gsnContextKeys = ekeys.sort();

            


            for(i=0; i!=self.selected_model_results.length; i+=1)
            {
                var cname = self.gsnContexts[self.selected_model_results[i]];
                var idx = self.gsnContextKeys.indexOf(cname);
                if (idx !=-1)
                {
                    self.selected_model_values.push(idx+2);
                }
            }

            if (self.selected_model_results.length == 0)
            {
                self.selected_model_values.push(1);
            }

            
        };


        SelectorWidget.prototype.renderGSNTable = function () {
            var self = this;
            self.assembleGSNContexts();

            

            self._logger.debug('hostname ' + window.location.hostname);
            self._logger.debug('port ' + window.location.port);


            var table = document.createElement('div');
            table.className = 'm-viz-table'
            table.id = 'mode-table';
            table.setAttribute("style", "margin-top: 50px;margin-left: 50px,width:500px");

            var node = document.createElement('div');
            node.className = 'm-viz-heading';

            var cnode = document.createElement('div');
            cnode.className = 'm-viz-table-col';
            var chld1 = document.createTextNode("Context");
            cnode.appendChild(chld1);
            node.appendChild(cnode);

            cnode = document.createElement('div');
            cnode.className = 'm-viz-table-col';
            var chld1 = document.createTextNode("Target");
            cnode.appendChild(chld1);
            node.appendChild(cnode);

            var i = 0;
            var j = 0;

            table.appendChild(node);
            self._el.append(table);
            self.table = this._el.find('#mode-table');


            node = document.createElement('div');
            node.className = 'm-viz-table-row';
            node.setAttribute("style", "background-color:#eee");


            var chld = document.createElement('div');
            chld.className = 'm-viz-table-col';
            var chld1 = document.createTextNode('System Models');
            chld.appendChild(chld1);
            node.appendChild(chld);

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col-wide-mod-1';
            chld.id = 'mode-model';
            chld.id1 = 'Model';
            chld.id2 = 0;
            var mtext = '-'
            chld.innerHTML = '<a href="#">' + mtext + '</a>';
            node.appendChild(chld);
            table.appendChild(node);

            node = document.createElement('div');
            node.className = 'm-viz-table-row';

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col';
            chld1 = document.createTextNode('Evidences');
            chld.appendChild(chld1);
            node.appendChild(chld);

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col-wide-mod-1';
            chld.id = 'mode-evidence';
            chld.id1 = 'Evidence';
            chld.id2 = 1;
            mtext = '-'
            chld.innerHTML = '<a style="text-align:left" href="#">' + mtext + '</a>';
            node.appendChild(chld);
            table.appendChild(node);

            node = document.createElement('div');
            node.className = 'm-viz-table-row';

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col';
            chld1 = document.createTextNode('Hazards');
            chld.appendChild(chld1);
            node.appendChild(chld);

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col-wide-mod-1';
            chld.id = 'mode-hazard';
            chld.id1 = 'Hazard';
            chld.id2 = 1;
            mtext = '-'
            chld.innerHTML = '<a style="text-align:left" href="#">' + mtext + '</a>';
            node.appendChild(chld);
            table.appendChild(node);

            node = document.createElement('div');
            node.className = 'm-viz-table-row';

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col';
            chld1 = document.createTextNode('Functions');
            chld.appendChild(chld1);
            node.appendChild(chld);

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col-wide-mod-1';
            chld.id = 'mode-function';
            chld.id1 = 'Function';
            chld.id2 = 1;
            mtext = '-'
            chld.innerHTML = '<a style="text-align:left" href="#">' + mtext + '</a>';
            node.appendChild(chld);
            table.appendChild(node);

            node = document.createElement('div');
            node.className = 'm-viz-table-row';

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col';
            chld1 = document.createTextNode('Requirements');
            chld.appendChild(chld1);
            node.appendChild(chld);

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col-wide-mod-1';
            chld.id = 'mode-requirement';
            chld.id1 = 'Requirement';
            chld.id2 = 1;
            mtext = '-'
            chld.innerHTML = '<a style="text-align:left" href="#">' + mtext + '</a>';
            node.appendChild(chld);
            table.appendChild(node);

            node = document.createElement('div');
            node.className = 'm-viz-table-row';

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col';
            chld1 = document.createTextNode('Barriers');
            chld.appendChild(chld1);
            node.appendChild(chld);

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col-wide-mod-1';
            chld.id = 'mode-barrier';
            chld.id1 = 'Mitigation';
            chld.id2 = 1;
            mtext = '-'
            chld.innerHTML = '<a style="text-align:left" href="#">' + mtext + '</a>';
            node.appendChild(chld);
            table.appendChild(node);

            node = document.createElement('div');
            node.className = 'm-viz-table-row';

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col';
            chld1 = document.createTextNode('DRMs');
            chld.appendChild(chld1);
            node.appendChild(chld);

            chld = document.createElement('div');
            chld.className = 'm-viz-table-col-wide-mod-1';
            chld.id = 'mode-bowtie';
            chld.id1 = 'DRM';
            chld.id2 = 1;
            mtext = '-'
            chld.innerHTML = '<a style="text-align:left" href="#">' + mtext + '</a>';
            node.appendChild(chld);
            table.appendChild(node);

            self._el.append(table);
            self.table = this._el.find('#mode-table');

            var modelist = [];
            var modes = self.gsnContextKeys;
            var values = self.selected_model_values;
            var k = 0;
            
            for (k = 0; k < modes.length; k++)
                modelist.push({value: k + 1, text: modes[k]});
            
            modelist = self.updateCheckListSource(modelist);

            self._logger.debug('context list ' + modes)

            $('#mode-model').editable({
                type: 'checklist',
                title: 'Select',
                size: '10',
                display: 'block',
                autotext: 'always',
                emptytext: 'None',
                value: values,
                source: modelist,
                success: function (response, newValue) {
                    self._logger.debug("new mode value = " + newValue + response);
                    self._logger.debug("new mode value = " + this.innerText);

                    self._logger.debug("element gme id = " + this.id1);
                    var i =0;
                    
                    var ids = self.getUpdatedContext(this.id1, newValue);//newValue);
                    self.onEditModelRefInfo(ids,'Model');
                }
            });


            modelist = [];
            modes = self.gsnEvidenceKeys;
            values = self.selected_evidence_values;
            k = 0;
            for (k = 0; k < modes.length; k++) 
                modelist.push({value: k + 1, text:modes[k]});//+self.ws});
            
            modelist = self.updateCheckListSource(modelist);

            self._logger.debug('evidence list ' + modes)

            $('#mode-evidence').editable({
                type: 'checklist',
                title: 'Select',
                size: '10',
                separator:'<br/>',
                display: 'block',
                autotext: 'always',
                emptytext: 'None',
                width: 'fit-content',
                value: values,
                source: modelist,
                success: function (response, newValue) {
                    self._logger.debug("new mode value = " + newValue + response);
                    self._logger.debug("new mode value = " + this.innerText);

                    self._logger.debug("element gme id = " + this.id1);
                    
                    var ids = self.getUpdatedEvidence(this.id1, newValue);
                    self.onEditModelRefInfo(ids,'Evidence');
                }
            });

            modelist = [];
            modes = self.gsnHazardKeys;
            values = self.selected_hazard_values;
            k = 0;
            for (k = 0; k < modes.length; k++) 
                modelist.push({value: k + 1, text:modes[k]});//+self.ws});
            
            modelist = self.updateCheckListSource(modelist);

            self._logger.debug('hazard list ' + modes)

            $('#mode-hazard').editable({
                type: 'checklist',
                title: 'Select',
                size: '10',
                separator:'<br/>',
                display: 'block',
                autotext: 'always',
                emptytext: 'None',
                width: 'fit-content',
                value: values,
                source: modelist,
                success: function (response, newValue) {
                    self._logger.debug("new mode value = " + newValue + response);
                    self._logger.debug("new mode value = " + this.innerText);

                    self._logger.debug("element gme id = " + this.id1);
                    
                    var ids = self.getUpdatedHazard(this.id1, newValue);
                    self.onEditModelRefInfo(ids,'Hazard');
                }
            });

            modelist = [];
            modes = self.gsnFnKeys;
            values = self.selected_fn_values;
            k = 0;
            for (k = 0; k < modes.length; k++) 
                modelist.push({value: k + 1, text:modes[k]});//+self.ws});
            
            modelist = self.updateCheckListSource(modelist);

            self._logger.debug('fn list ' + modes)

            $('#mode-function').editable({
                type: 'checklist',
                title: 'Select',
                size: '10',
                separator:'<br/>',
                display: 'block',
                autotext: 'always',
                emptytext: 'None',
                width: 'fit-content',
                value: values,
                source: modelist,
                success: function (response, newValue) {
                    self._logger.debug("new mode value = " + newValue + response);
                    self._logger.debug("new mode value = " + this.innerText);

                    self._logger.debug("element gme id = " + this.id1);
                    
                    var ids = self.getUpdatedFunction(this.id1, newValue);
                    self.onEditModelRefInfo(ids,'Function');
                }
            });

            modelist = [];
            modes = self.gsnReqKeys;
            values = self.selected_req_values;
            k = 0;
            for (k = 0; k < modes.length; k++) 
                modelist.push({value: k + 1, text:modes[k]});//+self.ws});
            
            modelist = self.updateCheckListSource(modelist);

            self._logger.debug('req list ' + modes)

            $('#mode-requirement').editable({
                type: 'checklist',
                title: 'Select',
                size: '10',
                separator:'<br/>',
                display: 'block',
                autotext: 'always',
                emptytext: 'None',
                width: 'fit-content',
                value: values,
                source: modelist,
                success: function (response, newValue) {
                    self._logger.debug("new mode value = " + newValue + response);
                    self._logger.debug("new mode value = " + this.innerText);

                    self._logger.debug("element gme id = " + this.id1);
                    
                    var ids = self.getUpdatedRequirement(this.id1, newValue);
                    self.onEditModelRefInfo(ids,'Requirement');
                }

            });

            modelist = [];
            modes = self.gsnBarrierKeys;
            values = self.selected_barrier_values;
            k = 0;
            for (k = 0; k < modes.length; k++) 
                modelist.push({value: k + 1, text:modes[k]});//+self.ws});
            
            modelist = self.updateCheckListSource(modelist);

            self._logger.debug('barrier list ' + modes)

            $('#mode-barrier').editable({
                type: 'checklist',
                title: 'Select',
                size: '10',
                separator:'<br/>',
                display: 'block',
                autotext: 'always',
                emptytext: 'None',
                width: 'fit-content',
                value: values,
                source: modelist,
                success: function (response, newValue) {
                    self._logger.debug("new mode value = " + newValue + response);
                    self._logger.debug("new mode value = " + this.innerText);

                    self._logger.debug("element gme id = " + this.id1);
                    
                    var ids = self.getUpdatedBarrier(this.id1, newValue);
                    self.onEditModelRefInfo(ids,'Mitigation');
                }
            });

            modelist = [];
            modes = self.gsnBowTieKeys;
            values = self.selected_bowtie_values;
            k = 0;
            for (k = 0; k < modes.length; k++) 
                modelist.push({value: k + 1, text:modes[k]});//+self.ws});
            
            modelist = self.updateCheckListSource(modelist);

            self._logger.debug('bowtie list ' + modes)

            $('#mode-bowtie').editable({
                type: 'checklist',
                title: 'Select',
                size: '10',
                separator:'<br/>',
                display: 'block',
                autotext: 'always',
                emptytext: 'None',
                width: 'fit-content',
                value: values,
                source: modelist,
                success: function (response, newValue) {
                    self._logger.debug("new mode value = " + newValue + response);
                    self._logger.debug("new mode value = " + this.innerText);

                    self._logger.debug("element gme id = " + this.id1);
                    
                    var ids = self.getUpdatedBowTie(this.id1, newValue);
                    self.onEditModelRefInfo(ids,'BowTie');
                }
            });


        };

        SelectorWidget.prototype.renderImplementorTable = function () {
            var self = this;
            self.assembleImplementorContexts();

            

            self._logger.debug('hostname ' + window.location.hostname);
            self._logger.debug('port ' + window.location.port);


            var table = document.createElement('div');
            table.className = 'm-viz-table'
            table.id = 'mode-table';
            table.setAttribute("style", "margin-top: 50px;margin-left: 50px,width:500px");

            var node = document.createElement('div');
            node.className = 'm-viz-heading';

            var cnode = document.createElement('div');
            cnode.className = 'm-viz-table-col';
            var chld1 = document.createTextNode("Target Component");
            cnode.appendChild(chld1);
            node.appendChild(cnode);

            cnode = document.createElement('div');
            cnode.className = 'm-viz-table-col';
            var chld1 = document.createTextNode("BTree Node");
            cnode.appendChild(chld1);
            node.appendChild(cnode);

            

            var i = 0;
            var j = 0;

            table.appendChild(node);
            self._el.append(table);
            self.table = this._el.find('#mode-table');


            node = document.createElement('div');
            node.className = 'm-viz-table-row';
            node.setAttribute("style", "background-color:#eee");


            var chld = document.createElement('div');
            chld = document.createElement('div');
            chld.className = 'm-viz-table-col-wide-mod-1';
            chld.id = 'mode-model';
            chld.id1 = 'Model';
            chld.id2 = 0;
            var mtext = '-'
            chld.innerHTML = '<a href="#">' + mtext + '</a>';
            node.appendChild(chld);

            chld = document.createElement('div');
			chld.className = 'm-viz-table-col';
			chld.id = 'btree';
			mtext = '-';
			chld.innerHTML = '<a href="#">' + mtext + '</a>';
			node.appendChild(chld);

            table.appendChild(node);

            node = document.createElement('div');
            node.className = 'm-viz-table-row';

            

            self._el.append(table);
            self.table = this._el.find('#mode-table');

            var modelist = [];
            var modes = self.gsnContextKeys;
            var values = self.selected_model_values;
            var k = 0;
            modelist.push({value: 1, text: '--None--'});
            for (k = 0; k < modes.length; k++)
                modelist.push({value: k + 2, text: modes[k]});
            
            

            self._logger.debug('context list ' + modes)

            $('#mode-model').editable({
                type: 'select',
                title: 'Select',
                size: '10',
                display: 'block',
                autotext: 'always',
                emptytext: 'None',
                value: values,
                source: modelist,
                success: function (response, newValue) {
                    self._logger.debug("new mode value = " + newValue + response);
                    self._logger.debug("new mode value = " + this.innerText);

                    self._logger.debug("element gme id = " + this.id1);
                    var i =0;
                    var ids = self.getUpdatedImplementor(this.id1, newValue);//newValue);
                    self.onEditSelectionInfo(ids);
                    if (ids == null && self.selected_refInfo != "")
                    {
                        self.onEditReferenceDetails('');
                        $('#btree').editable('setValue','');
                        $('#btree').editable('option', 'disabled', true);
                    }
                    if (ids != null && self.gsnBTreeInfo.indexOf(ids)!=-1)
                    {
                        $('#btree').editable('option', 'disabled', false);
                    }

                    if (ids != null && self.gsnBTreeInfo.indexOf(ids)==-1)
                    {
                        self.onEditReferenceDetails('');
                        $('#btree').editable('setValue','');
                        $('#btree').editable('option', 'disabled', true);
                        
                    }
                }
            });

            /*
            Textual entry
            $('#btree').editable({
				type: 'text',
				title: 'Btree Node',
				autotext: '-',
				emptytext: 'None',
				value: self.selected_refInfo,
				success: function (response, newValue) {
					self._logger.debug("new mode value = " + newValue + response);
					self._logger.debug("new mode value = " + this.innerText);
                    if (self.selected_refInfo != newValue)
                    {
                        self.selected_refInfo = newValue;
					    self.onEditReferenceDetails(newValue);
                    }
					
				}
			});*/
            /*
            select

            modelist =[];
            modelist.push({value: 1, text: '--None--'});
            for (k = 0; k < self.btreechoices.length; k++)
                modelist.push({value: k + 2, text: self.btreechoices[k]});
            values = 1;
            if (self.gsnBTreeInfo.indexOf(self.selected_model_results[0])!=-1)
            {
                values = self.btreechoices.indexOf(self.selected_refInfo)+2;
            }
            else {
                self.selected_refInfo = "";
            }
            
            
            $('#btree').editable({
				type: 'select',
				title: 'Btree Node',
				autotext: '-',
                display: 'block',
				emptytext: 'None',
				value: values,
                source: modelist,
				success: function (response, newValue) {
					self._logger.debug("new mode value = " + newValue + response);
					self._logger.debug("new mode value = " + this.innerText);
                    var ids=parseInt(newValue)-1;
                    if (ids > 0)
                    {
                        self.selected_refInfo = self.btreechoices[ids-1];
					    self.onEditReferenceDetails(self.selected_refInfo);
                    }
                    else{
                        self.selected_refInfo = '';
					    self.onEditReferenceDetails(self.selected_refInfo);
                    }
					
				}
			});

            if ((values == 1) && (self.gsnBTreeInfo.indexOf(self.selected_model_results[0])==-1))
            {
                self.onEditReferenceDetails('');
                $('#btree').editable('setValue',"");
                $('#btree').editable('option', 'disabled', true);
                
            }
            */
            
            //checklist

            modelist =[];
            for (k = 0; k < self.btreechoices.length; k++)
                modelist.push({value: k + 1, text: self.btreechoices[k]});
            
            self.updateCheckListSource(modelist);
 
            values = [];
            
            if ( self.selected_model_results.length > 0)
            {
                var selected_vals = self.selected_refInfo.split(',');
                var h=0;
                for(h=0; h!=selected_vals.length; h+=1)
                {
                    if (self.btreechoices.indexOf(selected_vals[h])!=-1)
                    {
                        values.push(self.btreechoices.indexOf(selected_vals[h])+1);
                    }

                }
                
            }
            else {
                self.selected_refInfo = "";
            }
            
            
            
            $('#btree').editable({
				type: 'checklist',
				title: 'Btree Node',
				autotext: 'always',
                display: 'block',
				emptytext: 'None',
				value: values,
                source: modelist,
				success: function (response, newValue) {
					self._logger.debug("new mode value = " + newValue + response);
					self._logger.debug("new mode value = " + this.innerText);
                    var h=0;
                    var selections = [];
                    self.selected_refInfo = '';
                    if (newValue.length > 0)
                    {
                        for(h=0; h!=newValue.length; h+=1)
                        {
                            var idval = parseInt(newValue[h])-1;
                            selections.push(self.btreechoices[idval])
                        }
                        self.selected_refInfo = selections.join(',')
                    }
				    self.onEditReferenceDetails(self.selected_refInfo);
					
				}
			});

            if ((values.length == 0) && (self.gsnBTreeInfo.indexOf(self.selected_model_results[0])==-1))
            {
                self.onEditReferenceDetails('');
                $('#btree').editable('setValue',"");
                $('#btree').editable('option', 'disabled', true);
                
            }
            



            


        };


        SelectorWidget.prototype.onWidgetContainerResize = function (width, height) {
            // this._logger.debug('Widget is resizing...');
        };

        // Adding/Removing/Updating items
        SelectorWidget.prototype.addNode = function (desc) {
            var self = this;
            if (desc) {

                // Add node to a table of nodes
                if (!desc.isGSN && !desc.isLaunchFile) {
                    if (desc.metaName) {
                        if (desc.isLEC) {
                            self.isLEC = 1;
                        }
                        if (desc.isSystemID) {
                            self.isSystemID = 1;
                        }
                        if (desc.isActivity) {
                            self.isActivity = 1;
                        }
                        self.addRefInfo(desc);
                    }
                }

                if (desc.isGSN) {
                    self.isGSN = 1;
                    var refElements = ['model','evidence', 'requirement','function', 'hazard','mitigation', 'bowtie'];
                    
                    if (desc.selected_results.length ==refElements.length)
                    {
                        self.selected_model_results = desc.selected_results[0];
                        self.selected_evidence_results = desc.selected_results[1];
                        self.selected_req_results = desc.selected_results[2];
                        self.selected_fn_results = desc.selected_results[3];
                        self.selected_hazard_results = desc.selected_results[4];
                        self.selected_barrier_results = desc.selected_results[5];
                        self.selected_bowtie_results = desc.selected_results[6];
                        
                    }
                    if (desc.metaName) {
                        self.addGSNInfo(desc);
                    }
                }

                if (desc.isLaunchFile) {
                    self.isLaunchFile = 1;
                    if (desc.metaName) {
                        self.addLaunchInfo(desc);
                        if (desc.isCurrentLaunchFile && desc.isDefault)
                        {
                            self.isDefaultLaunchFile = 1;
                        }
                    }
                }

                if (desc.isStructureRef) {
                    self.isStructureRef = 1;
                    if (desc.selected_results.length > 0)
                    {
                        self.selected_model_results = desc.selected_results;
                        self.selected_refInfo = desc.refInfo;
                    }
                    
                    if (desc.metaName) {
                        self.addStructureRefInfo(desc);
                    }
                    
                }

                if (desc.isBarrier || desc.isEffect || desc.isResponse) {
                    self.isBarrier = desc.isBarrier;
                    self.isEffect = desc.isEffect;
                    self.isResponse = desc.isResponse;
                    if (desc.selected_results.length > 0)
                    {
                        self.selected_fn_results = desc.selected_results;
                    }

                    if (desc.metaName) {
                        self.addFunctionInfo(desc);
                    }
                }


                if (desc.last == 1) {
                    self.renderTable();
                }

            }

        };

        SelectorWidget.prototype.removeNode = function (gmeId) {
            var desc = this.nodes[gmeId];
            if (desc) {
                //this._el.append('<div>Removing node "' + desc.name + '"</div>');
                delete this.nodes[gmeId];
            }
        };

        SelectorWidget.prototype.updateNode = function (desc) {
            if (desc) {
                this._logger.debug('Updating node:', desc);
                //this._el.append('<div>Updating node "' + desc.name + '"</div>');
            }
        };

        /* * * * * * * * Visualizer event handlers * * * * * * * */

        SelectorWidget.prototype.onNodeClick = function (/*id*/) {
            // This currently changes the active node to the given id and
            // this is overridden in the controller.
        };

        SelectorWidget.prototype.onEditModeInfo = function (/*id*/) {
            // This currently changes the active node to the given id and
            // this is overridden in the controller.
        }

        SelectorWidget.prototype.onBackgroundDblClick = function () {

        };

        /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
        SelectorWidget.prototype.destroy = function () {
        };

        SelectorWidget.prototype.onActivate = function () {
            this._logger.debug('SelectorWidget has been activated');
        };

        SelectorWidget.prototype.onDeactivate = function () {
            this._logger.debug('SelectorWidget has been deactivated');
        };

        return SelectorWidget;
    });
