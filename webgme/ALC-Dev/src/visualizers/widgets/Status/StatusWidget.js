/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jul 07 2016 11:24:16 GMT-0500 (Central Daylight Time).
 */

define(['deepforge/viz/Utils',
        'css!./styles/StatusWidget.css',
	    '../library/bootstrap3-editable-1.5.1/bootstrap3-editable/js/bootstrap-editable.min',
	    'css!../library/bootstrap3-editable-1.5.1/bootstrap3-editable/css/bootstrap-editable.css'],
	function (Utils) {
		'use strict';

		var StatusWidget,
			WIDGET_CLASS = 'st-viz';

		StatusWidget = function (logger, container) {
			this._logger = logger.fork('Widget');

			this._el = container;

			this.nodes = {};
			this._initialize();
			this.jobInfo = {};
			this.jobIDInfo = {};
			this.orderedJobNames = [];
			this.orderedJobIDs = [];
			this.job_activities = {};
			this.job_children = {};
			this.execInfo = {};
			this.info = {};
			this.init_contents = {};
			this.cur_contents = {};
			this.table_contents = {};
			this.clickIDs =[];
			this.skip_wf = [];
			this.startTime_wf = {};
			
			this.table = undefined;
			this.row_counter = {};
			this.entry_id = 0;
			this.entry_id_vals = {};
			this._logger.debug('ctor finished');
		}

		StatusWidget.prototype._initialize = function () {
			var width = this._el.width(),
				height = this._el.height(),
				self = this;

			$.fn.editable.defaults.mode = 'inline';
			// set widget class
			this._el.addClass(WIDGET_CLASS);

			var dummy = document.createElement('div');
			dummy.id = 'dummyheader';
			dummy.setAttribute("style", "margin-top: 50px;margin-left: 50px");
			this._el.append(dummy);

		};

		StatusWidget.prototype.addExecInfo = function (desc) {
			var self = this;
			self.execInfo[desc.id] = desc;
			var info = '';
			try {
					info =JSON.parse(desc.info);
			}
			catch(e){
				info = '';
				self._logger.debug('*****unable to parse info - 1 *****'+desc.info);
			}
			self.info[desc.id ] = info;
			self.init_contents[desc.id] =[];
			self.cur_contents[desc.id] =[]

			var init = desc.init;
			var initarray = init.split('\n');
			var i =0;
			var idx = 0;
			var jstr = 'Job --- '
			var jlen = jstr.length;
			var jname = ''
			self.job_activities = {};
			var astr='   Acitivity --- ';
			var alen=astr.length;
			var oldjname = '';
			for (i=0; i!= initarray.length; i+=1)
			{
				if (initarray[i] == '')
				{
					continue;
				}
				
				self.init_contents[desc.id].push(initarray[i]);
				idx = initarray[i].indexOf(jstr);
				if (idx > -1)
				{
					oldjname = jname;
					jname = initarray[i].substring(jlen);
					self.orderedJobNames.push(jname);
					self.job_activities[jname]=[]
					self.job_children[jname]=[]
					if (oldjname != '')
					{
						if (self.job_activities[oldjname].length ==0)
						{
							self.job_children[oldjname].push(jname);
						}
					}
					continue;

				}
				idx = initarray[i].indexOf(astr);
				if (idx > -1)
				{
					var aname = initarray[i].substring(alen);
					self.job_activities[jname].push(aname);
				}
			}

			var cur = desc.status;
			if (cur)
			{
				var curarray = cur.split('\n');
				i =0;
				var first_entry = true;
				for (i=0; i!= curarray.length; i+=1)
				{
					if (curarray[i] == '')
					{
						continue;
					}

					
					self.cur_contents[desc.id].push(curarray[i]);
					if (first_entry)
					{
						first_entry = false;
						var curval = curarray[i];
						var pval = JSON.parse(curval);
						var stime = pval['startTime'];
						var dtime = Date.parse(stime);
						if (!(dtime in self.startTime_wf))
						{
							self.startTime_wf[dtime]=[]
						}
						if (!(desc.id in self.startTime_wf[dtime]))
						{
							self.startTime_wf[dtime].push(desc.id);
						}
						
					}

					
				}
				
			}
			else{
				self.skip_wf.push(desc.id);
			}

		};

		StatusWidget.prototype.addJobInfo = function (desc) {
			var self = this;
			self.jobInfo[desc.id] = desc.execName;
			self.jobIDInfo[desc.execName] = desc.id;
		};



		StatusWidget.prototype.renderTable = function () {
			var self = this;
			var keys = Object.keys(self.info);
			var i =0;
			var curid = 0;
			/*
			self.table_contents = [];

			for( i =0; i!=self.orderedJobNames.length; i+=1)
			{
				self.orderedJobIDs.push(self.jobIDInfo[self.orderedJobNames[i]]);
			}
			
			//keys = self.orderedJobIDs;
			for(i=0; i!=keys.length; i+=1)
			{
				var  info = self.info[keys[i]];
				var jkeys =  Object.keys(info);
				var contents = [];
				var i1=0;
				var curcontents  = self.cur_contents[keys[i]];
				var execcontents = {};
				execcontents['name'] = self.execInfo[keys[i]].execName;
				execcontents['jobs']=[] ;
				execcontents['status']= -1;
				execcontents['id']= keys[i];
				var jcompleted = 0;
				var jskipped =0;
				jkeys = self.orderedJobIDs;

				for (i1=0; i1!= jkeys.length; i1+=1)
				{
					var jid = jkeys[i1];
					var jname = self.jobInfo[jid];
					var amap = info[jid];
					var akeys = Object.keys(amap);
					var i2 = 0;
					var jobstatus = -1;
					var acontents  = [];
					var acompleted = 0;
					var askipped = 0;
					for (i2 = 0; i2!= akeys.length; i2+=1)
					{
						var aname = akeys[i2];
						var aid = amap[aname];
						var statusstr1 = 'Job: '+jname + ' Activity: activity-'+aname+'-'+jname
						var statusstr0 = 'Job: '+jname + ' Activity: '+aname
						var statusstr2 = 'Job: '+jname + ' Activity: results-'+aname+'-'+jname
						var statusstr32 = '\\"jobName\\":\\"'+jname+'\\",\\"taskName\\":\\"results-'+aname+'-'+jname+'\\"'
						var statusstr31 = '\\"jobName\\":\\"'+jname+'\\",\\"taskName\\":\\"activity-'+aname+'-'+jname+'\\"'
						var ci = 0;
						var status = -1;
						for (ci = 0; ci!= curcontents.length; ci+=1)
						{
							if (curcontents[ci].indexOf(statusstr1)>-1 || curcontents[ci].indexOf(statusstr0)>-1 || curcontents[ci].indexOf(statusstr31)>-1)
							{
								status =0;
								//if ((curcontents[ci].indexOf('Error') >-1) || (curcontents[ci].indexOf('error') >-1))
								//{
								//	status = 1;
								//	jobstatus = 1;
								//}
								if ((curcontents[ci].indexOf('"success\":false') >-1))
								{
									status = 1;
									jobstatus = 1;
								}
							}
							if (status == -1 && (curcontents[ci].indexOf(statusstr2)>-1))
							{
								status = 2;							
							}
							if (status ==-1 && (curcontents[ci].indexOf(statusstr32)>-1))
							{
								status = 2;							
							}
						}
						var arow = {};
						arow['name'] = aname;
						arow['id'] = aid;
						arow['status'] = status;
						if ((status == 0) || (status == 2))
						{
							acompleted +=1;
						}
						if (status == 2)
						{
							askipped +=1;
						}
						acontents.push(arow);
						
					}
					var jobcontent = [];
					var jrow = {};
					jrow['name'] = jname;
					jrow['id'] = jid;
					if (acompleted == akeys.length)
						jobstatus =0;
					if (askipped == akeys.length)
						jobstatus =2;
					if (jobstatus == 1)
					{
						execcontents['status'] =1;
					}
					if((jobstatus == 0)||(jobstatus == 2))
					{
						jcompleted +=1;
					}
					if (jobstatus ==2)
					{
						jskipped +=1;
					}
					
					jrow['status'] = jobstatus;
					jrow['arows'] = acontents;
					execcontents['jobs'].push(jrow);
				}
				if (jcompleted  == jkeys.length)
				{
					execcontents['status'] = 0;
				}
				if (jskipped  == jkeys.length)
				{
					execcontents['status'] = 2;
				}
				self.table_contents.push(execcontents);


			}*/
			
			self.populateDataTable();

			/*var k=0;
			for(k=0; k!=self.clickIDs.length; k+=1)
			{
				var cid = self.clickIDs[k];
				var cb = document.getElementById(cid);
				cb.ondblclick = self.onNodeClick.bind(self, cid);

			}*/
			
			
		};
		
		StatusWidget.prototype.getReferenceString = function (name, id) {
			var self = this;
			var t = '<a href=#'+id+'>'+name+'</a>'
			return ret;
			
		};

		StatusWidget.prototype.getStatusString = function (status) {
			var self = this;
			var ret = 'Pending';
			if (status == 0)
			{
				ret = 'Finished';
			}
			if (status == 1){
				ret = 'Failed';
			}
			if (status == 100){
				ret = '-'
			}
			if (status == 2){
				ret = 'Skipped'
			}

			return ret;
		};

		StatusWidget.prototype.updateStatus = function (status, estatus) {
			var self = this;
			var ret = status;

			if (status == -1 && estatus == 1)
			{
				ret = 100;
			}
			

			return ret;
		};

		StatusWidget.prototype.getBKColor = function (status, category=''){
			var self = this;
			var ret = "background-color:#eee";
			if (category && category=='job')
			{
				ret = "background-color:#66ccff";
			}
			if (category && category=='exec')
			{
				ret = "background-color:#ffff80";
			}
			if (status == 0)
			{
				ret = "background-color:#5e5";
			}
			if (status == 1)
			{
				ret = "background-color:#e55";
			}

			return ret;
		};

		
		StatusWidget.prototype.getJobNameFromMessage = function(message)
		{
			var self = this;
			var jobname = '';
			if (message == '')
				return jobname;

			if (message.startsWith("Workflow") || message.startsWith("workflow"))
			{
				jobname = "Workflow";
			}

			if (message.startsWith("Job"))
			{
				jobname = message.split(' ')[1]
			}

			return jobname;



		};

		StatusWidget.prototype.convertjobname = function(curentry)
		{
			var self = this;
			var i = 0;
			var len = curentry.length;
			var name_vals = '';
			var iter_vals = '';
			for(i=0; i!=len; i+=1)
			{
				if (name_vals)
				{
					name_vals += ', '
				}
				name_vals += curentry[i][0];

				if (iter_vals)
				{
					iter_vals += ', ';
				}
				var iterentry = curentry[i][1];
				if (iterentry == null)
				{
					iter_vals += ' - '
				}
				else {
					iter_vals += iterentry.toString();
				}


			}

			var ret = name_vals + ' iteration: '+iter_vals;
			return ret;

		}

		StatusWidget.prototype.updateTable = function(descid)
		{
			var self = this;
			var i =0, j =0, ci =0;

			var tableid = 'mode-table-'+descid;
			var nodeid = 'mode-node-'+descid;
			var table_created = false;
			var workflow_printed = 0;
	

			var execName = self.execInfo[descid].execName
			var nodeh = document.getElementById(nodeid);
			if (! nodeh)
			{
		
				nodeh = document.createElement('div');
				nodeh.innerHTML = execName;
				nodeh.id = nodeid;
				nodeh.setAttribute("style", "margin-top: 50px;margin-left: 50px; font-weight:bold");
				nodeh.style.font = "bold 20px arial,serif";
				nodeh.setAttribute("display", "block");
				self._el.append(nodeh);
			}

			var table = document.getElementById(tableid);
			
			if (!table)
			{
				table_created = true;
				table = document.createElement('div');
				table.className = 'st-viz-table'
				table.id = tableid;
				table.setAttribute("style", "margin-top: 10px;margin-left: 50px");
			}
			else{
				//var tableidjq = "#"+tableid;
				//var foo = $(tableidjq);
				//foo.empty();
				//table = document.getElementById(tableid);
				while (table.lastChild) {
					table.removeChild(table.lastChild);
				  }
			}



			

		
			var node = document.createElement('div');
			node.className = 'st-viz-heading';
	
		
			var cnode = document.createElement('div');
			cnode.className = 'st-viz-table-col-c';
			var chld1 = document.createTextNode("Job");
			cnode.appendChild(chld1);
			node.appendChild(cnode);
	
			cnode = document.createElement('div');
			cnode.className = 'st-viz-table-col-c';
			var chld1 = document.createTextNode("Activity");
			cnode.appendChild(chld1);
			node.appendChild(cnode);

			cnode = document.createElement('div');
			cnode.className = 'st-viz-table-col-c';
			var chld1 = document.createTextNode("Status");
			cnode.appendChild(chld1);
			node.appendChild(cnode);

			cnode = document.createElement('div');
			cnode.className = 'st-viz-table-col-c';
			var chld1 = document.createTextNode("Results");
			cnode.appendChild(chld1);
			node.appendChild(cnode);

			/*
			cnode = document.createElement('div');
			cnode.className = 'st-viz-table-col-c';
			var chld1 = document.createTextNode("Folder");
			cnode.appendChild(chld1);
			node.appendChild(cnode);

			cnode = document.createElement('div');
			cnode.className = 'st-viz-table-col-c';
			var chld1 = document.createTextNode("URL");
			cnode.appendChild(chld1);
			node.appendChild(cnode);*/
			
			table.append(node);

			var script_file =''
			var stdout_file = ''
			var stderr_file = ''
			var exception_file = ''

			var curcontents = self.cur_contents[descid];
			var job_status_info = {};
			var job_activity_status_info = {};
			var job_activity_status_started_counter = {};
			var job_activity_status_completed_counter = {};
			var job_activity_status_results = {};
			var job_activity_status_visited_counter = {};

			for (ci = 0; ci!= curcontents.length; ci+=1)
			{
				var content = curcontents[ci];
				var mtext = content;
				var success = true;
				var error_val = null;
				var color_code = '#99ff99'
				

				try {
					var x1 = content.replace(/\\"/g, '');
					//var y1 = x1.replace(/\\\\n/g, '');
					//var z1 = y1.replace(/\\\\"/g, '');
					//x1 = x1.replace(/\\/g, '');
					//self._logger.debug('z1 = '+ z1)
					var contentval =JSON.parse(x1);
					self._logger.debug('parse successful')
					var ckeys = Object.keys(contentval);
					var jobname = '';
					var activityname = '';
					if ("job_path" in contentval)
					{
						jobname = contentval['job_path'];
					
						if (Array.isArray(jobname))
						{
							jobname = self.convertjobname(jobname);

							self._logger.debug('jobname is array, converted name is  '+jobname);
						}
						activityname = contentval['task_name']
						if (jobname == "workflow" && !activityname)
						{
							activityname = "";
						}
					}

					if ("messages" in contentval)
					{
						jobname = self.getJobNameFromMessage(contentval['messages'][0])
						activityname = jobname;
					}
					
					var evalMessage = '';
					success = contentval['success']
					error_val = contentval['error']
					var status=''
					var resulturl = []
					var resultpath = []
					var resultdir = []
					var result = []
					
					
					if (activityname.startsWith('inits') || activityname.startsWith('input')||activityname.startsWith('configuration'))
					{
						mtext = ''
					}
					else if (activityname.startsWith('results')){
						mtext = ''
						result = contentval['results']
						var r= 0;
						for(r=0; r!=result.length; r+=1)
						{
							resultpath.push(result[r]["path"])
							resultdir.push(result[r]["directory"])
							resulturl.push(result[r]["result_url"])
						}
						var startstring='results-execute-';
						var startlen = startstring.length;
						var actname = activityname.substring(startlen);
						var idx = actname.lastIndexOf('-');
						actname = actname.substring(0,idx);
						//job_activity_status_info[jobname][actname]=' Completed';
						job_activity_status_completed_counter[jobname][actname] +=1;
						if (job_activity_status_completed_counter[jobname][actname] == job_activity_status_started_counter[jobname][actname])
						{
							job_activity_status_info[jobname][actname]=' Completed';
						}
						job_activity_status_results[jobname][actname][job_activity_status_completed_counter[jobname][actname]]=[resultpath, resultdir, resulturl];
						
						var len = self.job_activities[jobname].length;
						var k=0;
						var jcompleted = 1;
						for(k=0; k!=len; k+=1)
						{
							var  aname =self.job_activities[jobname][k];
							if (aname in job_status_info[jobname])
							{
								if (job_status_info[jobname][aname]!=' Completed')
								{
									jcompleted = -1;
									break;

								}
							}
						}
						if (jcompleted ==1)
						{
							job_status_info[jobame]=' Completed';
						}

					}
					else {
						var evaluate = false;
						if (jobname.startsWith('evaluate-'))
						{
							evaluate = true;
							var evalMessage = contentval['exception'];
							var idx = jobname.indexOf('-');
							jobname = jobname.substring(idx+1)
							activityname = 'Check Loop'
							if (!evalMessage)
							{
								mtext = ' Job : '+ jobname + '   - Checking Loop : Terminated.'
								status = 'Loop terminated'
								
							}
							else {
								mtext = ' Job : '+ jobname + '   - Checking Loop : Continue to next iteration'
								status = 'Loop continues'
							}

							if (error_val || !success)
							{

								mtext = ' Job : '+ jobname + '   - Checking Loop . Error encountered - '+error_val
								status = 'Error: '+error_val

							}


						}
						else {

							if (jobname != 'workflow')
							{
								var idx = activityname.indexOf('-');
								var nidx = activityname.lastIndexOf('-');
								activityname = activityname.substring(idx+1, nidx)
								mtext = 'Job : '+ jobname + '   Activity: ' +activityname;
								if (success == null)
								{
									mtext += '   Status: Started'
									status = ' Started'
									color_code = '#ebf6f9'

									if (activityname == '')
									{
										job_status_info[jobname]=' Started';
									}
									else{
										if (!(jobname in job_activity_status_info))
										{
											job_activity_status_info[jobname]={}
											job_activity_status_started_counter[jobname] ={}
											job_activity_status_completed_counter[jobname] ={}
											job_activity_status_visited_counter[jobname] ={}
											job_activity_status_results[jobname]  ={}
										}
										if (activityname in job_activity_status_started_counter[jobname])
										{
											job_activity_status_started_counter[jobname][activityname] +=1

										}
										else
										{
											job_activity_status_started_counter[jobname][activityname] =1
											job_activity_status_completed_counter[jobname][activityname] =0
											job_activity_status_visited_counter[jobname][activityname] =0
											job_activity_status_results[jobname][activityname]={}

										}
										job_activity_status_results[jobname][activityname][job_activity_status_started_counter[jobname][activityname]]=[]
										
										job_activity_status_info[jobname][activityname]=' Started'

									}
								}
								else 
								{
									if (success && result.length > 0)
									{
										mtext += '   Status: Completed'
										status = ' Completed'
										color_code = '#99ff99'
									}
									else if (success)
									{
										mtext += '   Status: Started'
										status = ' Started'
										color_code = '#ebf6f9'
										if (activityname == '')
										{
											job_status_info[jobname]=' Started';
										}
										else{
											if (!(jobname in job_activity_status_info))
											{
												job_activity_status_info[jobname]={}
												job_activity_status_started_counter[jobname] ={}
												job_activity_status_completed_counter[jobname] ={}
												job_activity_status_visited_counter[jobname] ={}
												job_activity_status_results[jobname]={}
											}
											if (activityname in job_activity_status_started_counter[jobname])
											{
												job_activity_status_started_counter[jobname][activityname] +=1

											}
											else
											{
												job_activity_status_started_counter[jobname][activityname] =1
												job_activity_status_completed_counter[jobname][activityname] =0
												job_activity_status_visited_counter[jobname][activityname] =0
												job_activity_status_results[jobname][activityname]={}

											}
											job_activity_status_results[jobname][activityname][job_activity_status_started_counter[jobname][activityname]]=[]
											job_activity_status_info[jobname][activityname]=' Started'

										}
										
									}
									else 
									{
										mtext += '   Status: Error.'
										status  = ' Error '
										if (error_val)
										{
											mtext += '   Error Message: '
											mtext += error_val;
											status += ' : '+error_val;
										}
										color_code = '#ff6666'

										if (activityname == '')
										{
											job_status_info[jobname]=' Stopped with Errors';
										}
										else{
											if (!(jobname in job_activity_status_info))
											{
												job_activity_status_info[jobname]={}
											}
											job_activity_status_info[jobname][activityname]=' Stopped with Errors'

										}
									}

									
								}
							}
							else
							{
								mtext = ' Workflow - ';
								jobname = 'Workflow'
								activityname = ''

								if (success == null)
								{
									job_status_info[jobname]=' Started';
									mtext += '   Status: Started'
									status = ' Started'
									color_code = '#ebf6f9'
								}
								else 
								{
									if (success)
									{
										job_status_info[jobname]=' Completed';
										mtext += '   Status: Completed'
										status = ' Completed'
										color_code = '#99ff99'
									}
									else{
										job_status_info[jobname]=' Stopped with errors';
										mtext += '   Status: Stopped with errors.'
										status = ' Stopped with errors'
										color_code = '#ff6666'
									}
								}

								if (script_file == '')
								{
									script_file = contentval['script_file']
									stderr_file = contentval['stderr_file']
									stdout_file = contentval['stdout_file']
									if ('exceptions_file' in contentval)
									{

										exception_file = contentval['exceptions_file']
									}
									else{
										exception_file = contentval['exception_file']

									}
									
								}

							}
						}
					}

					//mtext = ckeys.toString();

				}
				catch(e){
					//info = '';
					self._logger.debug('*****unable to parse info - 00*****'+content);
					self._logger.debug('*****unable to parse info - 2*****'+x1);
					//self._logger.debug('*****unable to parse info - 3*****'+z1);
				}
			}

			for (ci = 0; ci!= curcontents.length; ci+=1)
			{
				var content = curcontents[ci];
				var mtext = content;
				var success = true;
				var error_val = null;
				var color_code = '#99ff99'
				

				try {
					var x1=content.replace(/\\"/g, '');
					//var y1 = x1.replace(/\\\\n/g, '');
					//var z1 = y1.replace(/\\\\"/g, '');
					//x1 = x1.replace(/\\/g, '');
					//self._logger.debug('z1 = '+ z1)
					var contentval =JSON.parse(x1);
					self._logger.debug('parse successful')
					var ckeys = Object.keys(contentval);
					/*var jobname = contentval['job_path'];
					if (Array.isArray(jobname))
					{
						jobname = self.convertjobname(jobname);

						self._logger.debug('jobname is array, converted name is  '+jobname);
					}
					var activityname = contentval['task_name']*/
					var jobname = '';
					var activityname = '';
					if ("job_path" in contentval)
					{
						jobname = contentval['job_path'];
					
						if (Array.isArray(jobname))
						{
							jobname = self.convertjobname(jobname);

							self._logger.debug('jobname is array, converted name is  '+jobname);
						}
						activityname = contentval['task_name']
						if (jobname == "workflow" && !activityname)
						{
							activityname = "";
						}
					}

					if ("messages" in contentval)
					{
						jobname = self.getJobNameFromMessage(contentval['messages'][0])
						activityname = jobname;
					}
					if (jobname == "workflow" && !activityname)
					{
						activityname = "";
					}
					var actname = '';
					var evalMessage = '';
					success = contentval['success']
					error_val = contentval['error']
					var status=''
					var resulturl = []
					var resultpath = []
					var resultdir = []
					var result = []
					if ('results' in contentval)
					{
						result = contentval['results']
					}
					
					if (activityname.startsWith('inits') || activityname.startsWith('input')||activityname.startsWith('configuration'))
					{
						mtext = ''
					}
					else if (activityname.startsWith('results')){
						mtext = ''
						result = contentval['results']
						var r= 0;
						for(r=0; r!=result.length; r+=1)
						{
							resultpath.push(result[r]["path"])
							resultdir.push(result[r]["directory"])
							resulturl.push(result[r]["result_url"])
						}

						var startstring='results-execute-';
						var startlen = startstring.length;
						actname = activityname.substring(startlen);
						var idx = actname.indexOf('-');
						actname = actname.substring(0,idx);
						

					}
					else {
						var evaluate = false;
						if (jobname.startsWith('evaluate-'))
						{
							evaluate = true;
							var evalMessage = contentval['exception'];
							var idx = jobname.indexOf('-');
							jobname = jobname.substring(idx+1)
							activityname = 'Check Loop'
							if (!evalMessage)
							{
								mtext = ' Job : '+ jobname + '   - Checking Loop : Terminated.'
								status = 'Loop terminated'
								
							}
							else {
								mtext = ' Job : '+ jobname + '   - Checking Loop : Continue to next iteration'
								status = 'Loop continues'
							}

							if (error_val || !success)
							{

								mtext = ' Job : '+ jobname + '   - Checking Loop . Error encountered - '+error_val
								status = 'Error: '+error_val

							}


						}
						else {

							if (jobname != 'workflow')
							{
								var idx = activityname.indexOf('-');
								var nidx = activityname.lastIndexOf('-');
								activityname = activityname.substring(idx+1, nidx)
								actname = activityname;
								mtext = 'Job : '+ jobname + '   Activity: ' +activityname;
								if (success == null)
								{
									mtext += '   Status: Started'
									status = ' Started'
									color_code = '#ebf6f9'
								}
								else 
								{
									if (success && result.length > 0)
									{
										mtext += '   Status: Completed'
										status = ' Completed'
										color_code = '#99ff99'
									}
									else if (success)
									{
										mtext += '   Status: Started'
										status = ' Started'
										color_code = '#ebf6f9'
										job_activity_status_visited_counter[jobname][actname] +=1
									}
									else 
									{
										mtext += '   Status: Error.'
										status  = ' Error '
										if (error_val)
										{
											mtext += '   Error Message: '
											mtext += error_val;
											status += ' : '+error_val;
										}
										color_code = '#ff6666'
									}
								}
							}
							else
							{
								mtext = ' Workflow - ';
								jobname = 'Workflow'
								activityname = ''

								if (success == null)
								{
									mtext += '   Status: Started'
									status = ' Started'
									color_code = '#ebf6f9'
								}
								else 
								{
									if (success)
									{
										mtext += '   Status: Completed'
										status = ' Completed'
										color_code = '#99ff99'
									}
									else{
										mtext += '   Status: Stopped with errors.'
										status = 'Stopped with errors'
										color_code = '#ff6666'
									}
								}

								if (script_file == '')
								{
									script_file = contentval['script_file']
									stderr_file = contentval['stderr_file']
									stdout_file = contentval['stdout_file']
									if ('exceptions_file' in contentval)
									{

										exception_file = contentval['exceptions_file']
									}
									else{
										exception_file = contentval['exception_file']

									}
									
								}

							}
						}
					}

					//mtext = ckeys.toString();

				}
				catch(e){
					//info = '';
					self._logger.debug('*****unable to parse info - 00a*****'+content);
					self._logger.debug('*****unable to parse info - 2*****'+x1);
					//self._logger.debug('*****unable to parse info - 3*****'+z1);
				}

				var print_job_results=0

				if ((jobname != 'Workflow') && (jobname != 'workflow'))
				{
					if (!activityname || (activityname == ''))
					{
						continue;
					}
				}
				
				if ((jobname == 'Workflow') && (workflow_printed==1))
				{
					continue;
				}
				if (mtext)
				{

					node = document.createElement('div');
					node.className = 'st-viz-table-row';
					node.setAttribute("style", "background-color:#66ccff");//BDB76B");
					if (!success || error_val)
					{
						//node.setAttribute("style", "background-color:#BDB76B");
						node.setAttribute("style", "background-color:66ccff");
					}

					if (actname=='')
					{
						status = job_status_info[jobname];
					}
					else {

						status = job_activity_status_info[jobname][actname];
						if (job_activity_status_completed_counter[jobname][actname] >= job_activity_status_visited_counter[jobname][actname])
						{
							print_job_results =1;
							status = ' Completed';
						}
					}

					if (status ==' Started')
					{
						color_code = '#ebf6f9'
					}

					if (status ==' Completed')
					{
						color_code = '#99ff99'
					}

					if (status ==' Stopped with Errors')
					{
						color_code = '#ff6666'
					}

					if (color_code)
					{
						var style_setting = "background-color:"+color_code;
						node.setAttribute("style",style_setting )
					}

					
					
					var chld = document.createElement('div');
					chld.className = 'st-viz-table-col';
					chld1 = document.createTextNode(jobname);
					chld.appendChild(chld1);
					node.appendChild(chld);

					chld = document.createElement('div');
					chld.className = 'st-viz-table-col';
					chld1 = document.createTextNode(activityname);
					chld.appendChild(chld1);
					node.appendChild(chld);

					chld = document.createElement('div');
					chld.className = 'st-viz-table-col';
					chld1 = document.createTextNode(status);
					chld.appendChild(chld1);
					node.appendChild(chld);


					

					chld = document.createElement('div');
					chld.className = 'st-viz-table-col';
					chld1 = document.createTextNode('');
					chld.appendChild(chld1);
					node.appendChild(chld);
					
					table.append(node);
				}

				if (print_job_results ==1)
				{
					var cresults = job_activity_status_results[jobname][actname][job_activity_status_visited_counter[jobname][actname]]
					var r=0;
					var resultpath =cresults[0];
					var resultdir = cresults[1];
					var resulturl = cresults[2];
					for (r=0; r!=resultpath.length; r+=1)
					{
						var chld = '';
						if (r==0)
						{
							node = table.lastChild;
							chld = node.lastChild;

						}
						else {
							node = document.createElement('div');
							node.className = 'st-viz-table-row';
							node.setAttribute("style", "background-color:#66ccff");
							if (color_code)
							{
								var style_setting = "background-color:"+color_code;
								node.setAttribute("style",style_setting )
							}
							chld = document.createElement('div');
							chld.className = 'st-viz-table-col';
							chld1 = document.createTextNode('');
							chld.appendChild(chld1);
							node.appendChild(chld);

							chld = document.createElement('div');
							chld.className = 'st-viz-table-col';
							chld1 = document.createTextNode('');
							chld.appendChild(chld1);
							node.appendChild(chld);

							chld = document.createElement('div');
							chld.className = 'st-viz-table-col';
							chld1 = document.createTextNode('');
							chld.appendChild(chld1);
							node.appendChild(chld);
							chld = document.createElement('div');
							chld.className = 'st-viz-table-col';


						}

						
						
						
						//chld1 = document.createTextNode(resultpath[r]);

						var result_dir = resultdir[r]
						if (result_dir)
						{
						    var posj = resultdir[r].indexOf('jupyter')
						    if (posj > -1)
                            {
                                result_dir = resultdir[r].substring(posj+8)
                            }
						}
						var address = self.getnodeaddress(resultpath[r])
						var mtext1 = '&nbsp;&nbsp; <a href="'+address+'" target="_blank"> Data </a>'
						mtext1 += '&nbsp;&nbsp;' //'<br/>'
						var rdir = result_dir;
						if (rdir)
						{
                            var rdirlist = rdir.split('/');
                            var len = rdirlist.length;
                            if (rdirlist[len-1].startsWith('TrainingResult'))
                            {
                                rdirlist[len-1] = rdirlist[len-2]
                                rdirlist.push('config-0')
                                rdir = rdirlist.join('/')
                            }
                            else {
                                rdir = result_dir;

                            }
                         }
						mtext1 += '<a href="/ipython/edit/'+rdir+'/slurm_job_log.txt" target="_blank"> Log </a>'

						//mtext1 += '<a href="/ipython/edit/'+rdir+'/results/execution_runner.log" target="_blank"> Log </a>'
						
						mtext1 += '&nbsp;&nbsp;' //'<br/>'
						mtext1 += '<a href="/ipython/notebooks/'+resulturl[r]+'" target="_blank"> Notebook </a>'
						mtext1 += '&nbsp;&nbsp;' //'<br/>'
						chld.innerHTML = mtext1;
						
						
						

						if (r!=0)
						{
							node.appendChild(chld);
							table.append(node);
						}
						

					}

				}

				
				if (jobname == 'Workflow')
				{
					//workflow_handled = true;
					workflow_printed =1
					node = table.lastChild;
					chld = node.lastChild;
					var posj = script_file.indexOf('jupyter')
					var script_file_val = script_file
					var stderr_file_val = stderr_file
					var stdout_file_val = stdout_file
					var exception_file_val = exception_file
					if (posj > -1)
					{ 
						script_file_val = script_file_val.substring(posj+8)
						stderr_file_val = stderr_file_val.substring(posj+8)
						stdout_file_val = stdout_file_val.substring(posj+8)
						exception_file_val = exception_file_val.substring(posj+8)
					}
						
					var mtext1 = '&nbsp;&nbsp; <a href="/ipython/edit/'+script_file_val+'" target="_blank"> Script </a>'
					mtext1 += '&nbsp;&nbsp;' //'<br/>'
					mtext1 += '&nbsp;&nbsp; <a href="/ipython/edit/'+stderr_file_val+'" target="_blank"> Log </a>'
					mtext1 += '&nbsp;&nbsp;' 
					mtext1 += '&nbsp;&nbsp; <a href="/ipython/edit/'+exception_file_val+'" target="_blank"> Error </a>'
					mtext1 += '&nbsp;&nbsp;' 
					chld.innerHTML = mtext1;
				}
			}
			if (table_created)
			{
				self._el.append(table);
			}
			

		};

		StatusWidget.prototype.populateDataTable = function () {
			var self = this;
			var  i =0, j=0;
			var keys = Object.keys(self.info);

			var timekeys = Object.keys(self.startTime_wf);
			timekeys.sort();
			timekeys.reverse();

			var contentids = [];

			for(i=0; i!=timekeys.length; i+=1)
			{
				var timeval= timekeys[i];
				var content_ids = self.startTime_wf[timeval];

				for (j=0; j!=content_ids.length; j+=1)
				{
					contentids.push(content_ids[j]);
				}

			}

			keys = contentids;
			

			for(i=0; i!=keys.length; i+=1)
			{
				if (self.skip_wf.indexOf(keys[i])>-1)
				{
					continue;
				}
				var curcontents  = self.cur_contents[keys[i]];
				var ci = 0;

				self.updateTable(keys[i]);

			}

			/*
			var len = self.table_contents.length;
			if (len == 0)
				return;
			
			var table = document.createElement('div');
			table.className = 'st-viz-table'
			table.id = 'mode-table';
			table.setAttribute("style", "margin-top: 10px;margin-left: 50px");

			
			var node = document.createElement('div');
			node.className = 'st-viz-heading';
	
			
			var cnode = document.createElement('div');
			cnode.className = 'st-viz-table-col-c';
			var chld1 = document.createTextNode("Execution");
			cnode.appendChild(chld1);
			node.appendChild(cnode);
      
			cnode = document.createElement('div');
			cnode.className = 'st-viz-table-col-c';
			var chld1 = document.createTextNode("Job");
			cnode.appendChild(chld1);
			node.appendChild(cnode);
	
			cnode = document.createElement('div');
			cnode.className = 'st-viz-table-col-c';
			var chld1 = document.createTextNode("Activity");
			cnode.appendChild(chld1);
			node.appendChild(cnode);

			cnode = document.createElement('div');
			cnode.className = 'st-viz-table-col-c';
			var chld1 = document.createTextNode("Status");
			cnode.appendChild(chld1);
			node.appendChild(cnode);
			
			table.append(node);
			var chld = '';
			var chld1 = '';
			var mtext  = '';
			var k = 0;

			for (i=0; i!= len; i+=1)
			{
				var econtent = self.table_contents[i];
				var ename = econtent['name'];
				var estatus = econtent['status'];
				var eid = econtent['id'];

				node = document.createElement('div');
				node.className = 'st-viz-table-row';
				node.setAttribute("style", "background-color:#ffff80");//self.getBKColor(estatus));
				node.id =eid;

				chld = document.createElement('div');
				chld.className = 'st-viz-table-col';
				mtext = ename;
				chld1 = document.createTextNode(mtext);
				chld.appendChild(chld1);
				node.appendChild(chld);
				for(k =0; k!=2; k+=1)
				{
					chld = document.createElement('div');
					chld.className = 'st-viz-table-col';
					mtext = '';
					chld1 = document.createTextNode(mtext);
					chld.appendChild(chld1);
					node.appendChild(chld);
				}

				chld = document.createElement('div');
				chld.className = 'st-viz-table-col';
				mtext = self.getStatusString(estatus);
				chld1 = document.createTextNode(mtext);
				chld.appendChild(chld1);
				chld.setAttribute("style", self.getBKColor(estatus,'exec'));
				node.appendChild(chld);

				table.append(node);
        


				var jobs = econtent['jobs'];
				var jlength = jobs.length;
				var j = 0;
				for (j= 0; j != jlength; j+=1)
				{
					var job = jobs[j];
					var jname = job['name'];
					var jstatus = job['status'];
					jstatus = self.updateStatus(jstatus,estatus);
					var jid = job['id'];
					node = document.createElement('div');
					node.className = 'st-viz-table-row';
					node.setAttribute("style", "background-color:#66ccff");//BDB76B");
					
					

					for(k =0; k!=1; k+=1)
					{
						chld = document.createElement('div');
						chld.className = 'st-viz-table-col';
						mtext = '';
						chld1 = document.createTextNode(mtext);
						chld.appendChild(chld1);
						
          				node.appendChild(chld);
					}
					chld = document.createElement('div');
					chld.className = 'st-viz-table-col';
					mtext = jname;
					chld1 = document.createTextNode(mtext);
					chld.appendChild(chld1);
					chld.id =jid;
					self.clickIDs.push(jid);
					chld.onclick = self.onNodeClick.bind(self, jid);
					node.appendChild(chld);

					for(k =0; k!=1; k+=1)
					{
						chld = document.createElement('div');
						chld.className = 'st-viz-table-col';
						mtext = '';
						chld1 = document.createTextNode(mtext);
						chld.appendChild(chld1);
						node.appendChild(chld);
					}
					

					chld = document.createElement('div');
					chld.className = 'st-viz-table-col';
					mtext = self.getStatusString(jstatus);
					chld1 = document.createTextNode(mtext);
					chld.appendChild(chld1);
					chld.setAttribute("style", self.getBKColor(jstatus,'job'));
					node.appendChild(chld);

					table.append(node);



					var acts = job['arows'];

					var a = 0;
					var alength = acts.length;
					for(a=0; a != alength; a+=1 )
					{
						var act = acts[a];
						var aname = act['name'];
						var astatus = act['status'];
						astatus = self.updateStatus(astatus,estatus);
						var aid    = act['id'];
						node = document.createElement('div');
						node.className = 'st-viz-table-row';
						node.setAttribute("style", "background-color:#eee");//self.getBKColor(astatus));
						

						for(k =0; k!=2; k+=1)
						{
							chld = document.createElement('div');
							chld.className = 'st-viz-table-col';
							mtext = '';
							chld1 = document.createTextNode(mtext);
							chld.appendChild(chld1);
							node.appendChild(chld);
						}

						chld = document.createElement('div');
						chld.className = 'st-viz-table-col';
						mtext = aname;
						chld1 = document.createTextNode(mtext);
						chld.appendChild(chld1);
						chld.id =aid;
						chld.onclick = self.onNodeClick.bind(self, aid);
						node.appendChild(chld);
						self.clickIDs.push(aid);

						chld = document.createElement('div');
						chld.className = 'st-viz-table-col';
						mtext = self.getStatusString(astatus);
						chld.setAttribute("style", self.getBKColor(astatus));
						chld1 = document.createTextNode(mtext);
						chld.appendChild(chld1);
						
						node.appendChild(chld);
						table.append(node);

					}

				}
			}*/
				
        
			//self._el.append(table);
      
     
		
		};
		
		
		
		StatusWidget.prototype.onWidgetContainerResize = function (width, height) {
			// this._logger.debug('Widget is resizing...');
		};

		// Adding/Removing/Updating items
		StatusWidget.prototype.addNode = function (desc) {
			var self = this;
			if (desc) {

				// Add node to a table of nodes
				if (desc.metaName)
				{
					if (desc.metaName == 'WFExecStatus')
					{
						self.addExecInfo(desc);
					}
					if (desc.metaName == 'WorkflowJob')
					{
						self.addJobInfo(desc);
					}
					
				}
				
				if (desc.last == 1)
				{
					self.renderTable();
				}

			}

		};

		StatusWidget.prototype.removeNode = function (gmeId) {
			var desc = this.nodes[gmeId];
			if (desc) {
				//this._el.append('<div>Removing node "' + desc.name + '"</div>');
				delete this.nodes[gmeId];
			}
		};

		StatusWidget.prototype.updateNode = function (desc) {
			var self = this;
			if (desc) {
				this._logger.debug('Updating node:', desc);
				if (desc.metaName == 'WFExecStatus')
				{
					self.addExecInfo(desc);
					self.updateTable(desc.id);
				}

				//this.updateNode(desc);

				//this._el.append('<div>Updating node "' + desc.name + '"</div>');
			}
		};

		/* * * * * * * * Visualizer event handlers * * * * * * * */

		StatusWidget.prototype.onNodeClick = function (/*id*/) {
			// This currently changes the active node to the given id and
			// this is overridden in the controller.
		};

		StatusWidget.prototype.onEditModeInfo = function (/*id*/) {
			// This currently changes the active node to the given id and
			// this is overridden in the controller.
		}

		StatusWidget.prototype.onBackgroundDblClick = function () {
			
		};

		/* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
		StatusWidget.prototype.destroy = function () {
		};

		StatusWidget.prototype.onActivate = function () {
			this._logger.debug('StatusWidget has been activated');
		};

		StatusWidget.prototype.onDeactivate = function () {
			this._logger.debug('StatusWidget has been deactivated');
		};

		return StatusWidget;
	
	});
