/*globals define, WebGMEGlobal, $*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Feb 23 2018 11:40:01 GMT-0600 (Central Standard Time).
 */

define([
    'panels/Params/CONSTANTS',
    'js/Controls/PropertyGrid/Widgets/AssetWidget',
    'js/Dialogs/MultiTab/MultiTabDialog',
    'js/Dialogs/Confirm/ConfirmDialog',
    'blob/BlobClient',
    'clipboard',
    'css!./styles/ParamsWidget.css'
], function (CONSTANTS, AssetWidget, MultiTabDialog, ConfirmDialog, BlobClient, Clipboard) {
    'use strict';

    const WIDGET_CLASS = 'params';

    function ParamsWidget(logger, container) {
        this.logger = logger.fork('Widget');
        this.el = container;
        this.blobClient = new BlobClient({logger: this.logger.fork('BlobClient')});
        this._initialize();

        this.attrs = {};
        this.cycle = 0;
        this.readOnly = false;
        this.paramDesc =  null;
        this.paramInfo = {};
        this.referenceInfo={};
        this.tsrc = [{"title": "Node 1", "key": "1",  selected: true }, {"title": "Folder 2", "key": "2", "folder": true, "expanded":true, "children": [  {"title": "Node 2.1", "key": "3", selected: true},  {"title": "Node 2.2", "key": "4"}]} ];
        this.treeSource = [];

        this.logger.debug('ctor finished');
    }

    ParamsWidget.prototype._initialize = function () {
        // var width = this.el.width(),
        //     height = this.el.height(),
        //     self = this;

        // set widget class
        this.el.addClass(WIDGET_CLASS);

        const topBar = $('<span>', {class: 'top-bar'});

        topBar.append($('<span>', {class: 'top-bar-title', text: 'Params'}));

        this.createNewBtn = $('<i>', {class: 'create-btn glyphicon glyphicon-plus-sign pull-right',
            title: 'Create new parameter'});

        this.createNewBtn.on('click', () => {
            if (this.readOnly) {
                return;
            }

            const addRow = $('<tr>');
            const nameInput = $('<td>');
            addRow.append(nameInput);

            const valueInput = $('<td>');
            addRow.append(valueInput);

            const refInput = $('<td>');
            addRow.append(refInput);

            addRow.appendTo(this.table);
            var text = '';
            var res = false;

            nameInput.editInPlace({
                class: 'in-place-edit',
                value: '',
                onChange: (oldValue, newValue) => {
                    res = this.addNewAttribute(newValue, '');
                    if (res)
                    {
                        text = newValue;

                    }
                    
                },
                onFinish: () => {
                    addRow.remove();
                    if (res)
                    {
                        this.addAttribute(text,'');
                        this.applySortAndFilters();
                    }
                }
            });

        });

        topBar.append(this.createNewBtn);

        this.el.append(topBar);

        topBar.append($('<div class="input-group">' +
            // '<span class="input-group-addon" id="basic-addon1"><i class="glyphicon glyphicon-filter"/></span>' +
            '<input type="text" class="form-control asset-filter" placeholder="Filter.." aria-describedby="basic-addon1">' +
            '</div>'));

        this.filterInput = topBar.find('input.asset-filter');

        this.filterInput.on('change paste keyup', (event) => {
            //console.log('Change in filter,', event.target.value);
            this.filter = (event.target.value || '').toUpperCase();
            this.applySortAndFilters();
        });

        this.filter = '';

        this.table = $('<table>', {class: 'table table-bordered table-striped'});

        const header = $('<tr>');

        const nameHeader = $('<th>', {text: 'Name', class: 'header-name'}).on('click', () => {
            if (this.reverseSort) {
                this.sortIcon.show();
                this.reverseSortIcon.hide();
            } else {
                this.sortIcon.hide();
                this.reverseSortIcon.show();
            }

            this.reverseSort = !this.reverseSort;
            this.applySortAndFilters();
        });

        this.reverseSort = false;
        this.sortIcon = $('<i>', {class: 'glyphicon glyphicon-sort-by-attributes sort-icon'});
        this.reverseSortIcon = $('<i>', {class: 'glyphicon glyphicon-sort-by-attributes-alt sort-icon'});

        this.sortIcon.hide();
        this.reverseSortIcon.hide();

        nameHeader.append(this.sortIcon).append(this.reverseSortIcon);

        header.append(nameHeader);
        header.append($('<th>', {text: 'Default Value', class: 'header-desc'}));
        header.append($('<th>', {text: 'Param Reference', class: 'header-asset'}));
        header.append($('<th>', {text: 'Referenced Value', class: 'header-asset'}));
        header.append($('<th>', {text: 'Actions', class: 'header-edit'}));

        this.tableBody = $('<tbody>');

        this.table.append(header);
        this.table.append(this.tableBody);

        this.tableBody.on('click', '.delete-btn', (event) => {
            const attrName = $(event.target).closest('tr').data('id');
            var rowValue = $(event.target).closest('tr');
            if (this.readOnly) {
                return;
            }

            (new ConfirmDialog()).show({deleteItem: attrName}, () => {
                this.deleteAttribute(attrName);
                rowValue.remove();
            });

        });

        this.tableBody.on('click', '.copy-download-url-btn, .copy-view-url-btn', (event) => {
            this.notifyUser({severity: 'success', message: 'Url copied to clipboard "' +
                $(event.target).attr('data-clipboard-text') + '".'});
        });

        this.tableBody.on('dblclick', '.row-name', (event) => {
            const trEl = $(event.target);
            const attrName = trEl.closest('tr').data('id');
            var cvalue =attrName;
            if (this.readOnly) {
                return;
            }

            trEl.editInPlace({
                class: 'in-place-edit',
                value: attrName,
                onChange: (oldValue, newValue) => {
                    this.renameAttribute(oldValue, newValue);
                    cvalue = newValue;
                },
                onFinish: () => {
                    // Wait for the new value to be accepted..
                    trEl.text(cvalue);
                }
            });
        });

        this.tableBody.on('dblclick', '.row-desc', (event) => {
            const trEl = $(event.target);
            const attrName = trEl.closest('tr').data('id');
            var desc = trEl.text();
            if (this.readOnly) {
                return;
            }

            trEl.editInPlace({
                class: 'in-place-edit',
                value: desc,
                enableEmpty: true,
                onChange: (oldValue, newValue) => {
                    this.updateAttributeValue(attrName, newValue);
                    desc = newValue;
                },
                onFinish: () => {
                    // Wait for the new value to be accepted..
                    trEl.text(desc);
                }
            });
        });


        /*
        var tsrc = [{"title": "Node 1", "key": "1",  selected: true }, {"title": "Folder 2", "key": "2", "folder": true, "expanded":true, "children": [  {"title": "Node 2.1", "key": "3", selected: true},  {"title": "Node 2.2", "key": "4"}]} ];
		
			$('#mode-0').fancytree({
				'checkbox': true,
				'activeVisible': true,
				'autoScroll': true,
				'scrollParent': scrollparent,
				'clickFolderMode': 3, // expand,
				'focusOnSelect': true,
				'icon': false, // make function returning icons,
				'imagePath': null, // store icons here for use,
				'selectMode': 3, // single select mode,
				'keyboard': true, // disable keyboard for now
				'expanded':true,
				'source': tsrc
			});
        */

       this.tableBody.on('dblclick', '.row-asset', (event) => {
           var self = this;
        var trEl = $(event.target);
        const attrName = trEl.closest('tr').data('id');
        //var desc = trEl.text();
        if (this.readOnly) {
            return;
        }

        var trchildren = trEl.children();
        var idx = trchildren.length -1;

        if (trchildren.length <= 1)
        {
            var treeparent1 = document.createElement('div');
            treeparent1.class = 'tree-parent';
            treeparent1.setAttribute("style", "margin-top: 50px;margin-left: 50px; font-weight:bold");
            treeparent1.style.font = "bold 20px arial,serif";
            treeparent1.setAttribute("display", "none");
            treeparent1.style.display = "none";
            trEl.append(treeparent1);
            idx +=1;

        }
        const treeparent = trEl.children()[idx];

        if (treeparent.style.display == "none")
        {

            treeparent.style.display="block";
            //self.attrs[attrName].refTree.show();

        
            const tsrc = [{"title": "Node 1", "key": "1",  selected: true }, {"title": "Folder 2", "key": "2", "folder": true, "expanded":true, "children": [  {"title": "Node 2.1", "key": "3", selected: true},  {"title": "Node 2.2", "key": "4"}]} ];
        
        	self.attrs[attrName].refTree = trEl.fancytree({
				'checkbox': "radio",
				'activeVisible': true,
				'autoScroll': true,
				'scrollParent': trEl,
				'clickFolderMode': 3, // expand,
				'focusOnSelect': true,
				'icon': false, // make function returning icons,
				'imagePath': null, // store icons here for use,
				'keyboard': true, // disable keyboard for now
                'expanded':true,
                'selectMode':1,
				'source': self.treeSource
            });

            if (self.attrs[attrName].refKey)
            {
                var node = self.attrs[attrName].refTree.fancytree("getTree").getNodeByKey(self.attrs[attrName].refKey);
                if (node)
                {
                    //node.selected = true;
                    node.setSelected(true);
                    node.setActive(true);
                }

            }
            

            var btn = document.createElement("BUTTON");
            btn.innerHTML='OK';
            btn.onclick=self.buttonok;
            btn.obj = self;
            btn.id = attrName;
            trEl.append(btn);


            var btnc = document.createElement("BUTTON");
            btnc.innerHTML='Cancel';
            btnc.onclick=self.buttoncancel;
            btnc.id = attrName;
            btnc.obj = self;
            trEl.append(btnc);


            
            
        }
        else{
            treeparent.style.display="none";
            self.attrs[attrName].refTree.fancytree("destroy")

        }



        /*trEl.editInPlace({
            class: 'in-place-edit',
            value: desc,
            enableEmpty: true,
            onChange: (oldValue, newValue) => {
                this.updateAttributeValue(attrName, newValue);
                desc = newValue;
            },
            onFinish: () => {
                // Wait for the new value to be accepted..
                trEl.text(desc);
            }
        });*/
    });

        this.el.append(this.table);
    };

    ParamsWidget.prototype.buttonok = function () {
        var self = this;
        var selected  = self.obj.attrs[self.id].refTree.fancytree("getTree").getSelectedNodes();//.fancytree("getSelectedNodes");
        var text = '-';
        var key = ''
        var value = '';
        if (selected.length)
        {
            text = selected[0].title;
            key = selected[0].key;
            value = selected[0].data["values"];

            //self.parentElement.textContent = text;
        }
        var parentElement = self.parentElement;
        self.parentElement.firstElementChild.style.display="none";
        self.obj.attrs[self.id].refKey =  key;
        self.obj.attrs[self.id].refTree.fancytree("destroy");
        //self.parentElement.firstElementChild.nextElementSibling.nextElementSibling.remove();
        //self.parentElement.lastElementChild.remove();
        if (selected.length)
        {
            parentElement.innerHTML = text;
            parentElement.nextElementSibling.innerHTML = value;
        }
        else {
            parentElement.textContent = '';

        }
        //self.remove();
        
        

        //self.parentElement.innerText = selected;
        //self.parentElement.firstElementChild.style.display="none";
        //self.parentElement.lastElementChild.remove();
        //self.parentElement.lastElementChild.remove();
        //self.obj.attrs[self.id].refTree.fancytree("destroy");
        //self.obj.attrs[self.id].refTree        

    };

    ParamsWidget.prototype.buttoncancel = function () {
        var self = this;
        self.parentElement.firstElementChild.style.display="none";
        self.parentElement.firstElementChild.nextElementSibling.nextElementSibling.remove();
        self.parentElement.lastElementChild.remove();
        self.obj.attrs[self.id].refTree.fancytree("destroy");
    };

    ParamsWidget.prototype.onWidgetContainerResize = function (width, height) {
        this.logger.debug('Widget is resizing...');
    };

    ParamsWidget.prototype.addNode = function (desc) {
        var self = this;
        if (desc) {

            // Add node to a table of nodes
            if (desc.metaName && desc.use ==1 && desc.current)
            {
                self.paramDesc =  desc;
                self.paramInfo = desc.info;
            }
            else if (desc.use ==1)
            {
                if (desc.referenceInfo)
                {
                    self.logger.info( ' reference list '+JSON.stringify(desc.referenceInfo))
                    var keys = Object.keys(desc.referenceInfo);
                    var i = 0;
                    for(i= 0 ; i!= keys.length; i+=1)
                    {
                        self.referenceInfo[keys[i]]=desc.referenceInfo[keys[i]];
                        self.treeSource.push(desc.referenceInfo[keys[i]]);
                    }
                }
                else {
                    self.logger.info( 'no reference list ')
                }
            }
            
            if (desc.last == 1)
            {
                self.renderTable();
            }

        }

    };

    ParamsWidget.prototype.updateNode = function (desc) {
        var self = this;
        if (desc) {
            if (self.paramsDesc.id == desc.id)
            {
                self.paramsDesc =  desc;
                self.paramInfo = desc.Info;
            }

            
        }

    };

    // Adding/Removing/Updating items
    /*
    ParamsWidget.prototype.atNewAttributes = function (newAttrs) {
        this.cycle += 1;

        newAttrs.forEach((attr) => {
            if (this.attrs.hasOwnProperty(name)) {
                this.updateAttribute(attr);
            } else {
                this.addAttribute(attr);
            }
        });

        Object.keys(this.attrs).forEach((attrName) => {
            if (this.attrs[attrName].cycle !== this.cycle) {
                this.removeAttribute(attrName);
            }
        });

        this.applySortAndFilters();
    };
    */

    ParamsWidget.prototype.renderTable = function () {
        var self = this;
        if (!self.paramDesc || !self.paramInfo)
        {
            return;
        }
        var keys = Object.keys(self.paramInfo);
        var i = 0;
        for(i = 0; i!= keys.length; i+=1)
        {
            self.addAttribute(keys[i], self.paramInfo[keys[i]]);
        }
        this.applySortAndFilters();
    }

    ParamsWidget.prototype.addAttribute = function (name, value) {
        const attrEl = $('<tr>');
        attrEl.data('id', name);

        attrEl.append($('<td>', {
            text: name,
            class: 'row-name'
        }));

        attrEl.append($('<td>', {
            text: value,
            class: 'row-desc'
        }));

        /*attrEl.append($('<td>', {
            text: '',
            class: 'row-asset'
        }));*/

        

        var assetRow = $('<td>', {
            text: '-',
            class: 'row-asset'
        });

        /*var treeparent = document.createElement('div');
        treeparent.class = 'tree-parent';
        treeparent.setAttribute("style", "margin-top: 50px;margin-left: 50px; font-weight:bold");
        treeparent.style.font = "bold 20px arial,serif";
        treeparent.setAttribute("display", "block");
        assetRow.append(treeparent);*/


        /*const assetWidget = new AssetWidget({
            name: 'params-widget',
            id: attr.name,
            value: attr.value,
        });

        assetWidget.onFinishChange((data) => {
            if (data.newValue !== data.oldValue) {
                this.setAttributeAsset(attr.name, data.newValue);
            }
        });

        assetRow.append(assetWidget.el);*/
        
        attrEl.append(assetRow);

        attrEl.append($('<td>', {
            text: '-',
        }));

        attrEl.append($('<td>', {class: 'row-edit'})
            /*.append($('<i>', {
                class: 'action-btn copy-view-url-btn glyphicon glyphicon-eye-open',
                tile: 'Copy view url to clipboard'
            }))
            .append($('<i>', {
                class: 'action-btn copy-download-url-btn glyphicon glyphicon-copy',
                tile: 'Copy download url to clipboard'
            }))*/
            .append($('<i>', {
                class: 'action-btn delete-btn glyphicon glyphicon-trash',
                title: 'Delete param...'
            }))
        );

        //const copyViewBtn = attrEl.find('.copy-view-url-btn');
        //const copyDownloadBtn = attrEl.find('.copy-download-url-btn');

        /*if (attr.value) {
            copyViewBtn.attr('data-clipboard-text', this.blobClient.getRelativeViewURL(attr.value));
            copyDownloadBtn.attr('data-clipboard-text', this.blobClient.getRelativeDownloadURL(attr.value));
        } else {
            copyViewBtn.hide();
            copyDownloadBtn.hide();
        }*/

        this.tableBody.append(attrEl);

       this.attrs[name] = {
            el: attrEl,
            value: value,
            refTree: '',
            refKey:''
        };

        
        var rowref = attrEl.find('.row-asset');

       /*var treeparent = document.createElement('div');
        treeparent.id = 'tree-parent';
        rowref.append(treeparent);*/

        rowref = attrEl.find('.row-asset');
        var treeparent_jquery = rowref.find('tree-parent');
        /*var treeparent = rowref.children()[0];




        this.attrs[name].refTree = treeparent_jquery.fancytree({
            'checkbox': "radio",
            'activeVisible': true,
            'autoScroll': true,
            'scrollParent': treeparent,
            'clickFolderMode': 3, // expand,
            'focusOnSelect': true,
            'icon': false, // make function returning icons,
            'imagePath': null, // store icons here for use,
             'selectMode': 1, // single select mode,
            'keyboard': true, // disable keyboard for now
            'expanded':true,
            'source': this.treeSource
        });

       
        //this.attrs[name].refTree.hide();
        treeparent.style.display = "none";
*/
        
    };

    ParamsWidget.prototype.updateAttribute = function (attr) {
        const attrEl = this.attrs[attr.name].el;

        if (this.attrs[attr.name].value !== attr.value) {
            this.attrs[attr.name].assetWidget.setValue(attr.value);
            this.attrs[attr.name].value = attr.value;

            const copyViewBtn = attrEl.find('.copy-view-url-btn');
            const copyDownloadBtn = attrEl.find('.copy-download-url-btn');

            if (attr.value) {
                copyViewBtn.attr('data-clipboard-text', this.blobClient.getRelativeViewURL(attr.value));
                copyDownloadBtn.attr('data-clipboard-text', this.blobClient.getRelativeDownloadURL(attr.value));
                copyViewBtn.show();
                copyDownloadBtn.show();
            } else {
                copyViewBtn.hide();
                copyDownloadBtn.hide();
            }
        }

        if (this.attrs[attr.name].description !== attr.desc.description) {
            attrEl.find('.row-desc').text(attr.desc.description);

            this.attrs[attr.name].description = attr.desc.description;
        }

        this.attrs[attr.name].cycle = this.cycle;
    };

    ParamsWidget.prototype.removeAttribute = function (attrName) {
        //this.attrs[attrName].assetWidget.destroy();
        //this.attrs[attrName].clipboards.forEach(cb => cb.destroy());
        this.attrs[attrName].el.remove();
        delete this.attrs[attrName];
    };

    ParamsWidget.prototype.applySortAndFilters = function () {
        const rows = this.tableBody.children('tr');

        rows.sort((a, b) => {
            const aName = $(a).children('td').eq(0).text().toUpperCase();
            const bName = $(b).children('td').eq(0).text().toUpperCase();

            if (aName > bName) {
                return this.reverseSort ? -1 : 1;
            } else if (aName < bName) {
                return this.reverseSort ? 1 : -1;
            }

            return 0;
        });

        rows.each((idx) => {
            const rowEl = $(rows[idx]);
            const rowName = rowEl.children('td').eq(0).text().toUpperCase();

            if (this.filter) {
                if (rowName.indexOf(this.filter) === -1) {
                    rowEl.hide();
                } else {
                    rowEl.show();
                }
            } else {
                rowEl.show();
            }
        });

        rows.detach().appendTo(this.tableBody);
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ParamsWidget.prototype.setReadOnly = function (isReadOnly) {
        this.readOnly = isReadOnly;
        Object.keys(this.attrs).forEach((attrId) => {
            const attrItem = this.attrs[attrId];

            attrItem.assetWidget.setReadOnly(isReadOnly);
        });

        if (this.readOnly) {
            this.el.addClass('read-only');
        } else {
            this.el.removeClass('read-only');
        }
    };

    ParamsWidget.prototype.destroy = function () {
        Object.keys(this.attrs).forEach((attrId) => {
            const attrItem = this.attrs[attrId];

            //attrItem.assetWidget.destroy();
            //attrItem.clipboards.forEach(cb => cb.destroy());
        });
    };

    ParamsWidget.prototype.onActivate = function () {
        this.logger.debug('ParamsWidget has been activated');
    };

    ParamsWidget.prototype.onDeactivate = function () {
        this.logger.debug('ParamsWidget has been deactivated');
    };

    return ParamsWidget;
});
