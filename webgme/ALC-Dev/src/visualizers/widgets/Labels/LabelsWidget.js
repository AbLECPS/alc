/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Jul 11 2016 14:10:23 GMT-0500 (Central Daylight Time).
 */

define(['css!./styles/LabelsWidget.css', '../library/bootstrap3-editable-1.5.1/bootstrap3-editable/js/bootstrap-editable.min', 'css!../library/bootstrap3-editable-1.5.1/bootstrap3-editable/css/bootstrap-editable.css'], function () {
    'use strict';

    var LabelsWidget,
        WIDGET_CLASS = 'l-viz';

    LabelsWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this.componentLabelInfo = {};
        this.systemLabelInfo = {};
        this.componentLabelKeys = [];
        this.systemLabelKeys = [];
        this.table = undefined;

        this._logger.debug('ctor finished');
    };

    LabelsWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        $.fn.editable.defaults.mode = 'inline';
        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header 
        var dummy = document.createElement('div');
        dummy.id = 'dummyheader';
        //table.style.background="#f3f3f3";
        dummy.setAttribute("style", "margin-top: 50px;margin-left: 50px");
        //this._el.append(dummy);

        // Registering to events can be done with jQuery (as normal)
        // this._el.on('dblclick', function (event) {
        // event.stopPropagation();
        // event.preventDefault();
        // self.onBackgroundDblClick();
        // });
    };

    LabelsWidget.prototype.addComponentLabelInfo = function (desc) {
        this.componentLabelInfo[desc.name] = desc;
    }

    LabelsWidget.prototype.addSystemLabelInfo = function (desc) {
        this.systemLabelInfo[desc.name] = desc;
    }

    LabelsWidget.prototype.renderTable = function () {
        var self = this;
        self.componentLabelKeys = Object.keys(self.componentLabelInfo);
        self.systemLabelKeys = Object.keys(self.systemLabelInfo);
        if (self.componentLabelKeys.length == 0 || self.systemLabelKeys.length == 0) {
            return;
        }

        self.componentLabelKeys.sort();
        self.systemLabelKeys.sort();

        var table = document.createElement('div');
        table.className = 'l-viz-table'
        table.id = 'label-table';
        table.setAttribute("style", "margin-top: 50px;");

        var node = document.createElement('div');
        node.className = 'l-viz-heading';

        var cnode = document.createElement('div');
        cnode.className = 'l-viz-table-col';
        var chld1 = document.createTextNode("Labels");
        cnode.appendChild(chld1);


        //cnode.setAttribute("style","position:absolute;");

        node.appendChild(cnode);

        var i = 0;
        for (i = 0; i < self.componentLabelKeys.length; i++) {
            cnode = document.createElement('div');
            cnode.className = 'l-viz-table-col-mod';
            var chld1 = document.createTextNode(self.componentLabelKeys[i]);
            cnode.appendChild(chld1);
            node.appendChild(cnode);
            node.appendChild(cnode);
        }

        table.appendChild(node);


        for (i = 0; i < self.systemLabelKeys.length; i++) {
            var desc = self.systemLabelInfo[self.systemLabelKeys[i]];
            node = document.createElement('div');
            node.className = 'l-viz-table-row';
            if ((i + 1) % 2 == 1) {
                node.setAttribute("style", "background-color:#eee;");
            }

            var chld = document.createElement('div');
            chld.className = 'l-viz-table-col';
            var chld1 = document.createTextNode(self.systemLabelKeys[i]);
            chld.appendChild(chld1);
            chld.ondblclick = self.onNodeClick.bind(self, desc.id);
            node.appendChild(chld);

            var j = 0;
            for (j = 0; j < self.componentLabelKeys.length; j++) {
                chld = document.createElement('div');
                chld.className = 'l-viz-table-col-mod';
                chld.id = 'label-' + i + '-' + j;
                chld.id1 = desc.id;
                chld.id2 = j;
                var mtext = '-'
                chld.innerHTML = '<a href="#">' + mtext + '</a>';
                node.appendChild(chld);
            }
            table.appendChild(node);

        }

        self._el.append(table);
        self.table = this._el.find('#label-table');

        for (j = 0; j < self.componentLabelKeys.length; j++) {
            var labellist = [];
            var k = 0;
            var labels = self.componentLabelInfo[self.componentLabelKeys[j]].labels;
            for (k = 0; k < labels.length; k++)
                labellist.push({ value: k + 1, text: labels[k] });

            for (i = 0; i < self.systemLabelKeys.length; i++) {
                var values = [];
                if (self.systemLabelInfo[self.systemLabelKeys[i]].labelselection) {
                    var clabels = (self.systemLabelInfo[self.systemLabelKeys[i]].labelselection[self.componentLabelKeys[j]]);
                    if (clabels) {
                        var clabelvalues = clabels.split(',');
                        for (k = 0; k < labels.length; k++) {
                            if (clabelvalues.indexOf(labels[k]) >= 0) {
                                values.push(k + 1);
                            }
                        }
                    }
                }

                $('#label-' + i + '-' + j).editable({
                    type: 'checklist',
                    title: 'Choose Label',
                    autotext: 'always',
                    emptytext: 'None',

                    value: values,
                    source: labellist,
                    success: function (response, newValue) {
                        self._logger.debug("new label value = " + newValue + response);
                        self._logger.debug("new label value = " + this.innerText);
                        self._logger.debug("element = " + this.id);
                        self._logger.debug("element gme id = " + this.id1);
                        self.onEditLabelInfo(this.id1, newValue, self.componentLabelInfo[self.componentLabelKeys[this.id2]].labels, self.componentLabelKeys[this.id2]);
                    }
                });
            }
        }

    }

    LabelsWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    LabelsWidget.prototype.addNode = function (desc) {
        var self = this;
        if (desc) {

            if (desc.use == 1) {
                // Add node to a table of nodes
                if (desc.metaName == 'FailureLabel' || (desc.labels && desc.labels.length > 0)) {
                    if (desc.labels && desc.labels.length > 0) {
                        self.addComponentLabelInfo(desc);
                    }
                    else {
                        self.addSystemLabelInfo(desc);
                    }
                }
            }
            if (desc.last == 1) {
                self.renderTable();
            }

        }
    };

    LabelsWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        if (desc) {
            //this._el.append('<div>Removing node "' + desc.name + '"</div>');
            delete this.nodes[gmeId];
        }
    };

    LabelsWidget.prototype.updateNode = function (desc) {
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    LabelsWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    LabelsWidget.prototype.onEditLabelInfo = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    }

    LabelsWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    LabelsWidget.prototype.destroy = function () {
    };

    LabelsWidget.prototype.onActivate = function () {
        this._logger.debug('LabelsWidget has been activated');
    };

    LabelsWidget.prototype.onDeactivate = function () {
        this._logger.debug('LabelsWidget has been deactivated');
    };

    return LabelsWidget;
});
