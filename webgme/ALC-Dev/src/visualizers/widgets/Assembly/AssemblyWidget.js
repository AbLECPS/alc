/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jul 07 2016 11:24:16 GMT-0500 (Central Daylight Time).
 */

define(['js/Dialogs/CodeEditor/CodeEditorDialog',
	    'css!./styles/AssemblyWidget.css',
		'../library/bootstrap3-editable-1.5.1/bootstrap3-editable/js/bootstrap-editable.min',
		'css!../library/bootstrap3-editable-1.5.1/bootstrap3-editable/css/bootstrap-editable.css'], 
		function (CodeEditorDialog) {
    'use strict';

    var AssemblyWidget,
        WIDGET_CLASS = 'm-viz';

    AssemblyWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();
		this.componentModeInfo = {};
		this.componentModeKeys = [];
		this.componentModes={};
		this.componentInitialMode={};
		this.componentCurrentMode={};
		this.systemModeInfo = {};
		this.systemModeKeys = [];
		this.componentParameterInfo = {};
		this.componentLECInfo = {};
		this.componentParameterValues = {};
		this.componentLECValues = {};
		this.activeImplIds = [];
		this.componentParamParent = {};
		this.componentLECParent = {};
		this.sortedComponentImplIDs=[];
		this.paramTables = {};
		this.paramTableTitles= {};
		this.lecTables = {};
		this.lecTableTitles ={};
		this.paramTablesID={};
		this.lecTablesID = {};
		this.parameterInfo = {};
		this.parameterInfoStr = {};
		this.parameterInfoKeys = {};
		this.paramTableCounter = 0;
		this.lecTableCounter = 0;

		this.refInfo = {};
		this.dataEntry = {};
		this.dataEntryIDs = {};
		this.sortedDataEntryKeys = [];

		this.table = undefined;
        this._logger.debug('ctor finished');
    };

    AssemblyWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

		$.fn.editable.defaults.mode = 'inline';
        // set widget class
        this._el.addClass(WIDGET_CLASS);
	
		var dummy = document.createElement('div');
		dummy.id='dummyheader';
		dummy.setAttribute("style", "margin-top: 50px;margin-left: 50px");
		this._el.append(dummy);

	};
	
	AssemblyWidget.prototype.addInfo = function (desc) {
		var self = this;
		if (desc.metaName == 'Block')
		{
			self.addComponentImplInfo(desc);
		}
		if (desc.metaName == "Result")
		{
			//self.addResultInfo(desc);
			if (desc.exptName)
			{
				self.refInfo[desc.exptName] = desc.results;
				var k = 0;
				var keys = Object.keys(desc.results);
				for(k=0;k!=keys.length; k+=1)
				{
					var entry=desc.exptName + '/'+keys[k];
					var val = desc.results[keys[k]];
					self.dataEntry[entry]= val;
					self.dataEntryIDs[val]=entry;
				}
				
				//self.selectedValues[desc.exptName]=[];
			}
		}
	};
    
    AssemblyWidget.prototype.addComponentImplInfo = function (desc) {
		var self = this;
		if (desc.modevars)
		{
			var k = Object.keys(desc.modevars);
			if ((k.length > 0) && (desc.phname.length > 0) )
			{
				var modename = desc.phname + '/' + desc.name;
				self.componentModeInfo[modename] = desc;
				self.componentModes[modename] = Object.keys(desc.modevars);
				self.componentModes[modename].sort();
				self.componentInitialMode[modename] = [];
				if (desc.initialmode.length > 0)
				{
					
					var i=0;
					for(i=0; i!=desc.initialmode.length; i+=1)
					{
						var modeid= desc.initialmode[i];
						self.componentInitialMode[modename].push(self.componentModes[modename].indexOf(modeid));
						var pid = self.componentModeInfo[modename].modevars[modeid]
						self.activeImplIds.push(pid);
					}
				}
			}
		}

		if (desc.params && desc.phname != '')
		{
			var k = Object.keys(desc.params);
			var descid = desc.implID;
			var pkeys = Object.keys(self.componentParamParent);
			

			if (k.length > 0)
			{
				if (pkeys.indexOf(descid) == -1)
				{
					self.componentParamParent[descid] = '';
					self.componentParameterInfo[descid]={};
					self.componentParameterValues[descid]={};
				}
				//if (desc.id == descid)
				//{
					self.componentParamParent[descid] = desc.phname+'/'+desc.name;
				//}
				var akeys = Object.keys(desc.params);
				var x=0;
				for(x=0; x!=akeys.length; x+=1)
				{
					self.componentParameterInfo[descid][akeys[x]]=desc.params[akeys[x]];
					self.componentParameterValues[descid][akeys[x]]=desc.paramValues[akeys[x]];
				}
			}
		}

		if (desc.lecmodels && desc.phname != '')
		{
			var k = Object.keys(desc.lecmodels);
			var descid = desc.implID;
			var pkeys = Object.keys(self.componentLECParent);
			if (k.length > 0)
			{
				if (pkeys.indexOf(descid) == -1)
				{
					self.componentLECParent[descid] = '';
					self.componentLECInfo[descid]={};
					self.componentLECValues[descid]={};
				}
				//if (desc.id == descid)
				//{
					self.componentLECParent[descid] = desc.phname+'/'+desc.name;
				//}
				var akeys = Object.keys(desc.lecmodels);
				var x=0;
				for(x=0; x!=akeys.length; x+=1)
				{
					self.componentLECInfo[descid][akeys[x]]=desc.lecmodels[akeys[x]];
					self.componentLECValues[descid][akeys[x]]=desc.lecmodelValues[akeys[x]];
				}

			}
		}
    };
	
	AssemblyWidget.prototype.getComponentModeID = function (modename, index) {
		var self = this;
		var mname = self.componentModes[modename][index-1];
		var retid = self.componentModeInfo[modename].modevars[mname];
		return retid;
	};
	
	AssemblyWidget.prototype.getComponentModeIDs = function (modename, inds) {
		var self = this;
		var i = 0;
		var retids = [];
		for(i=0; i!=inds.length; i+=1)
		{
			var index  = inds[i];
			var mname = self.componentModes[modename][index-1];
			var retid = self.componentModeInfo[modename].modevars[mname];
			retids.push(retid);
		}
		return retids;
    };
    
    
    AssemblyWidget.prototype.renderTable = function () {
		var self = this;
		self.componentModeKeys= Object.keys(self.componentModeInfo);
		if (self.componentModeKeys.length==0)
			return;
	
	
		self.componentModeKeys.sort();
		
	
		var nodeh = document.createElement('div');
		var chldh = document.createTextNode("Implementation Choice");
		nodeh.appendChild(chldh);
		nodeh.setAttribute("style", "margin-top: 20px;margin-left: 50px; font-weight:bold");
		self._el.append(nodeh);

		var table = document.createElement('div');
		table.className = 'm-viz-table'
		table.id='mode-table';
		table.setAttribute("style", "margin-top: 10px;margin-left: 50px");

		/*var nodeh = document.createElement('div');
		nodeh.className='m-viz-heading';
		var cnodeh = document.createElement('div');
		cnodeh.className='m-viz-col-span';
		//cnodeh.innerHTML = '<a href="> Entry </a>';
		var chldh = document.createTextNode("Block");
		cnodeh.appendChild(chldh);
		cnodeh.innerHTML = '<a href="> Entry </a>';
		nodeh.appendChild(cnodeh);
		table.appendChild(nodeh);*/
		
				
		var node = document.createElement('div');
		node.className='m-viz-heading';
		
		var cnode=document.createElement('div');
		cnode.className='m-viz-table-col';
		var chld1 = document.createTextNode("Block");
		cnode.appendChild(chld1);
		node.appendChild(cnode);
		
		cnode=document.createElement('div');
		cnode.className='m-viz-table-col';
		var chld1 = document.createTextNode("Implementation");
		cnode.appendChild(chld1);
		node.appendChild(cnode);
	
		var i=0;
		var j=0;
			
		table.appendChild(node);
		self._el.append(table);
		self.table=this._el.find('#mode-table');
	
		for(j=0; j<self.componentModeKeys.length; j++){
			var desc = self.componentModeInfo[self.componentModeKeys[j]];
			node = document.createElement('div');
			node.className='m-viz-table-row';
			if ((j+1) %2 ==1){
				node.setAttribute("style", "background-color:#eee");
			}
			
			var chld = document.createElement('div');
			chld.className='m-viz-table-col';
			var chld1 = document.createTextNode(self.componentModeKeys[j]);
			chld.appendChild(chld1);
			chld.ondblclick = self.onNodeClick.bind(self, desc.id);
			node.appendChild(chld);
			
			chld = document.createElement('div');
			chld.className='m-viz-table-col-mod';
			chld.id='mode-'+ j;
			chld.id1=desc.id;
			chld.id2= j;
			var mtext='-'
			chld.innerHTML = '<a href="#">'+mtext+'</a>';
			node.appendChild(chld);
			table.appendChild(node);
		
		}
	
		//self._el.append(table);
		//self.table=this._el.find('#mode-table');
	
		for(j=0; j<self.componentModeKeys.length; j++){
			var modelist = [];
			var k=0;
			var modes  = self.componentModes[self.componentModeKeys[j]];
			for(k=0; k<modes.length; k++)
				modelist.push({value:k+1, text:modes[k]});
	
			var k = 0;
			var cmodevalues = self.componentInitialMode[self.componentModeKeys[j]];
			var values = [];
			for (k=0; k!= cmodevalues.length; k+=1)
			{
			  values.push(cmodevalues[k] +1);
			}
			self.componentCurrentMode[self.componentModeKeys[j]] = values;
				
			$('#mode-'+j).editable({
				//type: 'select',
				 type: 'checklist',
				 title: 'Choose Imlementation',
				 autotext: 'always',
				 emptytext:'None',
				 value: values,
				 source: modelist,
				 success: function(response, newValue) {
					self._logger.debug("new mode value = " +newValue + response);
					self._logger.debug("new mode value = " +this.innerText);
					self._logger.debug("element = " +this.id);
					self._logger.debug("element gme id = " +this.id1);
					var curValue = self.componentCurrentMode[self.componentModeKeys[this.id2]];
					var curIds = self.getComponentModeIDs(self.componentModeKeys[this.id2], curValue);
					var newIds = self.getComponentModeIDs(self.componentModeKeys[this.id2], newValue);
					self.onEditModeInfo(this.id1,curIds , newIds);
					self.componentCurrentMode[self.componentModeKeys[this.id2]] = newValue;
					self.updateActiveImplIDs(curIds, newIds);
				 }
			 });
		   }
		
		   self.renderImplTables();
		    
	};
	
	AssemblyWidget.prototype.updateActiveImplIDs = function (curIds, newIds) {
		var self = this;
		var i = 0;
		var original = self.activeImplIds;
		self.activeImplIds = [];
		

		
		for(i=0; i!=original.length; i+=1)
		{
			var id =original[i];
			if ((curIds.indexOf(id)==-1) && (newIds.indexOf(id)==-1))
			{
				self.activeImplIds.push(id);
			}
		}


		for(i=0; i!=newIds.length; i+=1)
		{
			var id =newIds[i];
			if (self.activeImplIds.indexOf(id)==-1)
			{
				self.activeImplIds.push(id);
			}
		}

		self.updateTableVisibility();

		
	};

	AssemblyWidget.prototype.renderImplTables = function () {

		var self = this;
		self.buildComponentImplList();
		var datakeys = Object.keys(self.dataEntry);
		self.sortedDataEntryKeys = datakeys.sort();
		

		var list = self.sortedComponentImplIDs;
		var i = 0;
		var pkeys = Object.keys(self.componentParamParent);
		var lkeys = Object.keys(self.componentLECParent);
		for(i=0; i!=list.length; i+=1)
		{
			var id = list[i];
			if (pkeys.indexOf(id) > -1)
			{
				self.renderParameterTables(id);
			}
			if (lkeys.indexOf(id) > -1)
			{
				self.renderLECTables(id);
			}
		}

		self.updateTableVisibility();
		//activeImplIds

	};

	AssemblyWidget.prototype.updateTableVisibility = function () {
		var self = this;
		var pkeys = Object.keys(self.componentParamParent);
		var lkeys = Object.keys(self.componentLECParent);

		
		
		for (i=0; i!=pkeys.length; i+=1)
		{
			var id = pkeys[i];
			var keys = Object.keys(self.paramTables[id]);
			var j = 0;
			for (j=0; j!=keys.length; j+=1)
			{
				var id2 = keys[j];
				if (self.activeImplIds.indexOf(id) >-1)
				{
					if (self.paramTables[id][id2]!= '')
					{
					
						self.paramTables[id][id2].style.visibility = "visible";
						self.paramTables[id][id2].style.display = "table";
						self.paramTableTitles[id][id2].style.visibility = "visible";
						self.paramTableTitles[id][id2].style.display = "block";

					}
				}
				else
				{

					if (self.paramTables[id][id2]!= '')
					{
					
					//.style.visibility = "hidden";
						self.paramTables[id][id2].style.visibility = "hidden";
						self.paramTables[id][id2].style.display = "none";
						self.paramTableTitles[id][id2].style.visibility = "hidden";
						self.paramTableTitles[id][id2].style.display = "none";
					}
				}
			}

		}
		for (i=0; i!=lkeys.length; i+=1)
		{
			var id = lkeys[i];
			var keys = Object.keys(self.lecTables[id]);
			var j = 0;
			for (j=0; j!=keys.length; j+=1)
			{
				var id2 = keys[j];
				if (self.activeImplIds.indexOf(id) >-1)
				{
					//.style.visibility = "visible";
					if (self.lecTables[id][id2]!= '')
					{
						self.lecTables[id][id2].style.visibility = "visible";
						self.lecTableTitles[id][id2].style.visibility = "visible";
						self.lecTables[id][id2].style.display = "table";
						self.lecTableTitles[id][id2].style.display = "block'"

					}

				}
				else{

					if (self.lecTables[id][id2]!= '')
					{

						//.style.visibility = "hidden";
						self.lecTables[id][id2].style.visibility = "hidden";
						self.lecTableTitles[id][id2].style.visibility = "hidden";
						self.lecTables[id][id2].style.display = "none";
						self.lecTableTitles[id][id2].style.display = "none'"
					}
				}
			}

		}
	};

	AssemblyWidget.prototype.renderParameterTables = function (implid) {
		var self = this;
		var paramInfo = self.componentParameterInfo[implid];
		var paramValues = self.componentParameterValues[implid];

		var keys = Object.keys(paramInfo);
		var i = 0;
		self.paramTables[implid] = {};
		self.paramTableTitles[implid] = {};
		var implname = self.componentParamParent[implid];
		for(i=0; i!=keys.length; i+=1)
		{
			var pid = keys[i];
			var pname = paramInfo[pid];
			var pvalue = paramValues[pid];
			self.paramTables[implid][pid]='';
			self.paramTableTitles[implid][pid] = '';
			self.renderParameterTable(implid, pid, pname, pvalue, implname);
		}

	};

	AssemblyWidget.prototype.renderLECTables = function (implid) {
		var self = this;
		var lecInfo = self.componentLECInfo[implid];
		var lecValues = self.componentLECValues[implid];

		var keys = Object.keys(lecInfo);
		var i = 0;
		self.lecTables[implid] = {};
		self.lecTableTitles[implid]= {};
		var implname = self.componentLECParent[implid];
		for(i=0; i!=keys.length; i+=1)
		{
			var pid = keys[i];
			var lname = lecInfo[pid];
			var lvalue = lecValues[pid];
			self.lecTables[implid][pid]='';
			self.lecTableTitles[implid][pid]='';
			self.renderLECTable(implid, pid, lname, lvalue, implname);
		}

	};

	AssemblyWidget.prototype.updateTable = function (pid) {
		var self = this;
		var dialog = new CodeEditorDialog();
		var params ={
				"name": "Definition",
				"value": self.parameterInfoStr[pid],
				"multilineType": "javascript",
				"activeObject": pid,
				"activeSelection": [],
				"title": "Set Parameters",
				"readOnly":false
			  };
		dialog.show(params);

				
	};


	AssemblyWidget.prototype.renderParameterTable = function (implid, pid, pname, pvalue,implname) {
		var self = this;
		
		var nodeh = document.createElement('div');
		var chldh = document.createTextNode("Parameter Entries");
		nodeh.appendChild(chldh);
		nodeh.appendChild(document.createElement("br"));
		chldh = document.createTextNode(implname + '::'+pname);
		nodeh.appendChild(chldh);
		nodeh.setAttribute("style", "margin-top: 20px;margin-left: 50px; font-weight:bold");
		nodeh.setAttribute("display", "block");
		var titleid = 'param-table-title'+self.paramTableCounter.toString();
		nodeh.id=titleid;
		self._el.append(nodeh);
		self.paramTableTitles[implid][pid] = document.getElementById(titleid);//this._el.find('#'+titleid);

		
		var table = document.createElement('div');
		table.className = 'm-viz-table'
		var tableid = 'param-table-'+self.paramTableCounter.toString();
		self.paramTableCounter +=1;
		table.id = tableid;
		table.id1 = pid;
		table.ondblclick = self.updateTable.bind(self,pid);
		
		table.setAttribute("style", "margin-top: 10px;margin-left: 50px");

		self._el.append(table);

		self.paramTables[implid][pid] = document.getElementById(tableid);
		

		self.paramTablesID[pid]=this._el.find('#'+tableid);
		self.parameterInfo[pid] = {};
		self.parameterInfoStr[pid] = '';
		try{
			self._logger.debug('parameter value '+ pvalue)
			self.parameterInfoStr[pid] = pvalue;
			self.parameterInfo[pid] = JSON.parse(pvalue);
			self.parameterInfoKeys[pid]=[];
			self.populateParameterTable(pid);
			
		}
		catch (err)
		{
			self._logger.debug('error in parsing parameter definition = '+ pvalue);
			self._logger.debug('error message  = '+err);
		}

		
	};

	AssemblyWidget.prototype.removeEntriesFromParameterTable = function (pid) {
		var self = this;
		
		self.paramTablesID[pid].empty();

	};

	AssemblyWidget.prototype.populateParameterTable = function (pid) {
		var self = this;
		var  i =0;
		var keys = Object.keys(self.parameterInfo[pid]);
		var chld = '';
		
		if (self.parameterInfoKeys[pid].length)
		{
			self.removeEntriesFromParameterTable(pid);
			
		}

		var node = document.createElement('div');
		node.className = 'm-viz-heading';

		
		var cnode = document.createElement('div');
		cnode.className = 'm-viz-table-col';
		var chld1 = document.createTextNode("Parameter ");
		cnode.appendChild(chld1);
		node.appendChild(cnode);

		cnode = document.createElement('div');
		cnode.className = 'm-viz-table-col';
		var chld1 = document.createTextNode("Value");
		cnode.appendChild(chld1);
		node.appendChild(cnode);

		self.paramTablesID[pid].append(node);
		
		self.parameterInfoKeys[pid] = [];
		for (i=0; i!= keys.length; i+=1)
		{
			var key = keys[i];
			self.parameterInfoKeys[pid].push(key);
			var value = self.parameterInfo[pid][key];
			node = document.createElement('div');
			node.className = 'm-viz-table-row';
			node.setAttribute("style", "background-color:#eee");
			
			chld = document.createElement('div');
			chld.className = 'm-viz-table-col';
			var mtext = key;
			var chld1 = document.createTextNode(mtext);
			//chld.innerHTML = '<a href="#">' + mtext + '</a>';
			chld.appendChild(chld1);
			node.appendChild(chld);
			
			chld = document.createElement('div');
			chld.className = 'm-viz-table-col';
			mtext = value;
			//chld.innerHTML = '<a href="#">' + mtext + '</a>';
			chld1 = document.createTextNode(mtext);
			//chld.innerHTML = '<a href="#">' + mtext + '</a>';
			chld.appendChild(chld1);
			node.appendChild(chld);
			self.paramTablesID[pid].append(node);

		}
	};

	AssemblyWidget.prototype.renderLECTable = function (implid, pid, pname, pvalue,implname) {
		var self = this;
		
		var nodeh = document.createElement('div');
		var chldh = document.createTextNode("LEC Entries");
		nodeh.appendChild(chldh);
		nodeh.appendChild(document.createElement("br"));
		chldh = document.createTextNode(implname + '::'+pname);
		nodeh.appendChild(chldh);
		nodeh.setAttribute("style", "margin-top: 20px;margin-left: 50px; font-weight:bold");
		nodeh.setAttribute("display", "block");
		var titleid = 'lec-table-title'+self.lecTableCounter.toString();
		nodeh.id=titleid;
		self._el.append(nodeh);
		self.lecTableTitles[implid][pid] = document.getElementById(titleid);//this._el.find('#'+titleid);


		var table = document.createElement('div');
		table.className = 'm-viz-table'
		var tableid = 'lec-table-'+self.lecTableCounter.toString();
		
		table.id = tableid;
		//table.id1 = pid;
		//table.ondblclick = self.updateTable.bind(self,pid);
		
		table.setAttribute("style", "margin-top: 10px;margin-left: 50px");

		self._el.append(table);

		self.lecTables[implid][pid] = document.getElementById(tableid);//this._el.find('#'+tableid);

		self.lecTablesID[pid]=this._el.find('#'+tableid);

		var node = document.createElement('div');
		node.className = 'm-viz-heading';
		var cnode = document.createElement('div');
		cnode.className = 'm-viz-table-col';
		var chld1 = document.createTextNode("LEC Name ");
		cnode.appendChild(chld1);
		node.appendChild(cnode);

		cnode = document.createElement('div');
		cnode.className = 'm-viz-table-col';
		var chld1 = document.createTextNode("Model Reference");
		cnode.appendChild(chld1);
		node.appendChild(cnode);

		self.lecTablesID[pid].append(node);

		node = document.createElement('div');
		node.className = 'm-viz-table-row';
		node.setAttribute("style", "background-color:#eee");
		cnode = document.createElement('div');
		cnode.className = 'm-viz-table-col';
		chld1 = document.createTextNode(pname);
		cnode.appendChild(chld1);
		node.appendChild(cnode);

		var chld = document.createElement('div');
		chld.className = 'm-viz-table-col-mod';
		chld.id = 'lec-'+self.lecTableCounter.toString();
		chld.id1 = pid;
		var mtext = '-'
		chld.innerHTML = '<a href="#">' + mtext + '</a>';
		node.appendChild(chld);
		self.lecTablesID[pid].append(node);
		var modelist = [];
		var i= 0;
		modelist.push({ value: 1, text: '--None--' });
		for(i=0; i!=self.sortedDataEntryKeys.length; i+=1)
		{
			modelist.push({value: i+2, text: self.sortedDataEntryKeys[i]});
		}
		var values = 0;
		if (pvalue){
			values = self.sortedDataEntryKeys.indexOf(self.dataEntryIDs[pvalue]) +2;
		}
		

		$('#lec-' + self.lecTableCounter).editable({
			type: 'select',
			title: 'Select',
			autotext: 'always',
			emptytext: 'None',
			value: values,
			source: modelist,
			success: function (response, newValue) {
				self._logger.debug("new mode value = " + newValue + response);
				self._logger.debug("new mode value = " + this.innerText);
				
				self._logger.debug("element gme id = " + this.id1);
				var idx = newValue -1;
				var refid = '';
				if (idx > 0)
				{
					var newstr = self.sortedDataEntryKeys[idx-1];
					refid = self.dataEntry[newstr];
				}

				//self.onEditSelectionInfo(path);
				self.onEditLECInfo(this.id1, refid);
				
			}
		});

		self.lecTableCounter +=1;


		
		// self.parameterInfoKeys[pid] = [];
		// for (i=0; i!= keys.length; i+=1)
		// {
		// 	var key = keys[i];
		// 	self.parameterInfoKeys[pid].push(key);
		// 	var value = self.parameterInfo[pid][key];
		// 	node = document.createElement('div');
		// 	node.className = 'm-viz-table-row';
		// 	node.setAttribute("style", "background-color:#eee");
			
		// 	chld = document.createElement('div');
		// 	chld.className = 'm-viz-table-col-mod';
		// 	var mtext = key;
		// 	var chld1 = document.createTextNode(mtext);
		// 	//chld.innerHTML = '<a href="#">' + mtext + '</a>';
		// 	chld.appendChild(chld1);
		// 	node.appendChild(chld);
			
		// 	chld = document.createElement('div');
		// 	chld.className = 'm-viz-table-col-mod';
		// 	mtext = value;
		// 	//chld.innerHTML = '<a href="#">' + mtext + '</a>';
		// 	chld1 = document.createTextNode(mtext);
		// 	//chld.innerHTML = '<a href="#">' + mtext + '</a>';
		// 	chld.appendChild(chld1);
		// 	node.appendChild(chld);
		// 	self.paramTablesID[pid].append(node);

		// }
		

		
	};



	AssemblyWidget.prototype.buildComponentImplList = function () {
		var self = this;
		var keys   = Object.keys(self.componentParamParent);
		var names  = {};
		var nameslist = [];
		var i =0;
		for(i=0; i!=keys.length; i+=1)
		{
			var key = keys[i];
			var name = self.componentParamParent[key];
			names[name] = key;
			if (nameslist.indexOf(name)==-1)
				nameslist.push(name);
		}
		keys   = Object.keys(self.componentLECParent);
		for(i=0; i!=keys.length; i+=1)
		{
			var key = keys[i];
			var name = self.componentLECParent[key];
			names[name] = key;
			if (nameslist.indexOf(name)==-1)
				nameslist.push(name);
		}

		nameslist = nameslist.sort();
		self.sortedComponentImplIDs= [];
		for(i=0; i!=nameslist.length; i+=1)
		{

			var name = nameslist[i];
			var key = names[name];
			self.sortedComponentImplIDs.push(key);

		}

	};
    
    

    AssemblyWidget.prototype.onWidgetContainerResize = function (width, height) {
        // this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    AssemblyWidget.prototype.addNode = function (desc) {
		var self = this;
        if (desc) {
	    
			if (desc.use ==1) {
				// Add node to a table of nodes
				self.addInfo(desc);
				
				
			}
			if (desc.last ==1)
				self.renderTable();
	    
            
        }
	
    };

    AssemblyWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
	if (desc)
	{
		//this._el.append('<div>Removing node "' + desc.name + '"</div>');
		delete this.nodes[gmeId];
	}
    };

    AssemblyWidget.prototype.updateNode = function (desc) {
		var self = this;
        if (desc) {
			this._logger.debug('Updating node:', desc);
			if (desc.metaName == 'Params' && desc.use ==1)
			{
				if (desc.paramValues)
				{
					var pid = desc.id;
					var pvalue = desc.paramValues;
					
					try{
						self.parameterInfoStr[pid] = pvalue;
						self.parameterInfo[pid] = JSON.parse(pvalue);
						self.populateParameterTable(pid);
						
					}
					catch (err)
					{
						self._logger.debug('error in parsing parameter definition = '+ pvalue);
						self._logger.debug('error message  = '+err);
					}
					
					
				}
			}
            //this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    AssemblyWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };
    
     AssemblyWidget.prototype.onEditModeInfo = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    }

    AssemblyWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    AssemblyWidget.prototype.destroy = function () {
    };

    AssemblyWidget.prototype.onActivate = function () {
        this._logger.debug('AssemblyWidget has been activated');
    };

    AssemblyWidget.prototype.onDeactivate = function () {
        this._logger.debug('AssemblyWidget has been deactivated');
    };

    return AssemblyWidget;
});
