/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon May 30 2016 15:16:13 GMT-0500 (Central Daylight Time).
 */

define(['css!./styles/TVizWidget.css',
        '../library/bootstrap3-editable-1.5.1/bootstrap3-editable/js/bootstrap-editable.min',
		'css!../library/bootstrap3-editable-1.5.1/bootstrap3-editable/css/bootstrap-editable.css'], 
	function () {
    'use strict';

    var TVizWidget,
        WIDGET_CLASS = 't-viz';

    TVizWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;
	

        this.nodes = {};
	this.modes = {};
	this.connmodes = [];
	this.modenames=[];
	this.modelist = [];
	
	this.failureLabels = {};
	this.connlabels = [];
	this.failureLabelNames=[];
	this.failureLabelList = [];
	this.mvcount = 0;
	
	
	this.tables=[];
        this._initialize();

        this._logger.debug('ctor finished');
    };

    TVizWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;
	$.fn.editable.defaults.mode = 'inline';
	// $(document).append('<link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet">');
	// $(document).append('<script src="http://code.jquery.com/jquery-2.0.3.min.js"></script> ');
	// $(document).append('<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js"></script>');
	// $(document).append('<link href="//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/css/bootstrap-editable.css" rel="stylesheet"/>');
	// $(document).append('<script src="//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/js/bootstrap-editable.min.js"></script>');
	
	    
        // set widget class
        this._el.addClass(WIDGET_CLASS);
	self.connid=0;

        // Create a dummy header 
        var table = document.createElement('div');
	table.className = 't-viz-table'
	table.id='mode-fault-table';
	//table.style.background="#f3f3f3";
	table.setAttribute("style", "margin-top: 50px;margin-left: 50px");
	
	var node = document.createElement('div');
	node.className='t-viz-heading';
	var cnode=document.createElement('div');
	cnode.className='t-viz-table-col';
	var chld1 = document.createTextNode("Source");
	cnode.appendChild(chld1);
	node.appendChild(cnode);
	cnode=document.createElement('div');
	cnode.className='t-viz-table-col';
	var chld1 = document.createTextNode("Destination");
	cnode.appendChild(chld1);
	node.appendChild(cnode);
	cnode=document.createElement('div');
	cnode.className='t-viz-table-col-mod';
	var chld1 = document.createTextNode("Activation Condition");
	cnode.appendChild(chld1);
	node.appendChild(cnode);
	cnode=document.createElement('div');
	cnode.className='t-viz-table-col-mod';
	var chld1 = document.createTextNode("Failure Label(s)");
	cnode.appendChild(chld1);
	node.appendChild(cnode);
	table.appendChild(node);
	
	this._el.append(table);
	
	self.table=this._el.find('#mode-fault-table');
	
	if (this.table)
	{
		self._logger.debug('got table');
	}
	else {
		self._logger.debug('****** not got table');
	}
	
	

        // Registering to events can be done with jQuery (as normal)
        // this._el.on('dblclick', function (event) {
            // event.stopPropagation();
            // event.preventDefault();
            // self.onBackgroundDblClick();
        // });
    };

    TVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    
    // Adding/Removing/Updating items
    var NODE_WHITELIST = {
        Port2Fault: true,
	Failure_Prop:true,
	Fault2Port:true,
	Flow:true,
	MaterialFlow:true,
	SignalFlow:true,
	PowerFlow:true,
	ModeVariable:true,
	FailureLabel:true,
	FailureLabels:true
    };
    
    TVizWidget.prototype.addNode = function (desc) {
	var self = this;
	var isValid = NODE_WHITELIST[desc.metaName];
        if (isValid) {
	
	  
	   if (desc.isConnection)
	   {
		    // Add node to a table of nodes
		    
		    self.nodes[desc.id] = desc;
		    self.connid +=1;
		    var node = document.createElement('div');
		    node.className='t-viz-table-row';
		    if (self.connid %2 ==1){
			node.setAttribute("style", "background-color:#eee");
		    }
		    
		    var chld = document.createElement('div');
		    chld.className='t-viz-table-col';
		    var chld1 = document.createTextNode(desc.src.name);
		    chld.appendChild(chld1);
		    chld.ondblclick = self.onNodeClick.bind(self, desc.id);
		    node.appendChild(chld);
		    
		    chld = document.createElement('div');
		    chld.className='t-viz-table-col';
		    chld1 = document.createTextNode(desc.dst.name);
		    chld.appendChild(chld1);
		    chld.ondblclick = self.onNodeClick.bind(self, desc.id);
		    node.appendChild(chld);
		    
		    chld = document.createElement('div');
		    chld.className='t-viz-table-col-mod';
		    chld.id='mode-'+ self.connid;
		    chld.id1=desc.id;
			var mtext = '-';
			if (desc.metaName == 'Fault2Port' || desc.metaName=='Port2Fault'   || desc.metaName == 'Failure_Prop' )
			{
				mtext= mtext=desc.modelabel;
				chld.innerHTML = '<a href="#">'+mtext+'</a>';
			}
			else{
				mtext= 'N/A';
				chld.innerHTML = '<a href="#">'+mtext+'</a>';
			}
				
			 
		     self.connmodes.push(mtext);
		     node.appendChild(chld);
		     
		     
		    chld = document.createElement('div');
		    chld.className='t-viz-table-col-mod';
		    chld.id='fault-'+ self.connid;
		    chld.id1=desc.id;
		    var ftext='-'
		     if (desc.metaName == 'Fault2Port' || desc.metaName=='Port2Fault'  || desc.metaName == 'MaterialFlow' || desc.metaName == 'PowerFlow' || desc.metaName == 'SignalFlow')
		     {
			 ftext=desc.faultlabel;
			 chld.innerHTML = '<a href="#">'+ftext+'</a>';
			 
		     }
		     else {
			ftext = 'N/A';
			chld.innerHTML =ftext;
			
		     }
		     self.connlabels.push(ftext);
		     node.appendChild(chld);
		     self.table.append(node);
		     
		    
		  
		    // if ((desc.metaName == 'Fault2Port' || desc.metaName=='Port2Fault' || desc.metaName == 'Flow'))
		    // {
			// //chld.text = desc.faultlabel;
			 // chld1 = document.createTextNode(desc.faultlabel);
			 // chld.appendChild(chld1);
			 // chld.ondblclick = self.onEditNode.bind(self, desc.id, chld.id);
		    // }
		    // else{
			// //chld.text = '-';
			 // chld1 = document.createTextNode('N/A');
			 // chld.appendChild(chld1);
		    // }
		    
		    // node.appendChild(chld);
		    //self.tables.push(node);
		   
		     //$('#mode-'+self.connid).editable();
		    
		    // self._logger.debug(self._el);
		     // $('#mode-'+self.connid).editable({
			 // type: 'text',
			 // title: 'Enter mode',
			 // success: function(response, newValue) {
				// self._logger.debug("new mode value = " +newValue);
			 // }
		 // });
		 // $('#mode-'+self.connid).editable({
			 // type: 'checklist',
			 // title: 'Choose Mode',
			 // autotext: 'always',
			 // value: [],
			 // //source: [ {value: 1, text: 'Channel1'}, {value: 2, text: 'Channel2'}, {value: 3, text: 'Channel3'}],
			 // source: self.modenames,
			 // success: function(response, newValue) {
				// self._logger.debug("new mode value = " +newValue + response);
				// self._logger.debug("new mode value = " +this.innerText);
			 // }
		 // });
		 self._logger.debug('added conn');
		    
	}
	else{
		if (desc.metaName == 'ModeVariable'){
			self.modes[desc.id] = desc;
			self.modenames.push(desc.name);
		}
		else if (desc.metaName == 'FailureLabel'){
			self.failureLabels[desc.id] = desc;
			if (self.failureLabelNames.indexOf(desc.name) == -1)
				self.failureLabelNames.push(desc.name);
		}
		else if (desc.metaName == 'FailureLabels'){
			var i=0;
			for (i=0; i!= desc.labels.length; i+=1)
			{
				var label = desc.labels[i];
				if (self.failureLabelNames.indexOf(label) == -1)
					self.failureLabelNames.push(label);
			}
		}
		
		
	}
		
        }
	
	if (desc.last==1){
		self.setEditableProperties();
	}
	
    };
    
   TVizWidget.prototype.setEditableProperties = function () {
        var self = this;
	var i =0, j=0;
	var values=[];
	self.modenames.sort();
	self.failureLabelNames.sort();
	
	// for(j=0; j!=self.modenames.length; j++)
	// {
	   // self.modelist.push({value:j+1, text:self.modenames[j]});
	// }
	// self._logger.debug(' modelist : ' +self.modelist);
	
	for(j=0; j!=self.failureLabelNames.length; j++)
	{
	   self.failureLabelList.push({value:j+1, text:self.failureLabelNames[j]});
	}
	self._logger.debug(' failureLabelList : ' +self.failureLabelList);
	
		
	for (i=1; i<=self.connid; i++){
		if (self.connmodes[i-1] != 'N/A')
		{
			values =self.connmodes[i-1];
			// for(j=0; j!=self.modenames.length; j++) {
				// if (self.connmodes[i-1].indexOf(self.modenames[j]) >=0)
				// {
					// values.push(j+1);
				// }
			// }
			
			$('#mode-'+i).editable({
				 type: 'text',
				 title: 'Specify Activation Condition',
				 defaultValue: '',
				 emptytext:'-',
				 value: values,
				 //source: [ {value: 1, text: 'Channel1'}, {value: 2, text: 'Channel2'}, {value: 3, text: 'Channel3'}],
				 //source: self.modelist,
				 success: function(response, newValue) {
					self._logger.debug("new mode value = " +newValue + response);
					self._logger.debug("new mode value = " +this.innerText);
					self._logger.debug("element = " +this.id);
					self._logger.debug("element gme id = " +this.id1);
					self.onEditMode(this.id1, newValue);
				 }
			 });
		 }
		 
		 if (self.connlabels[i-1] != 'N/A')
		 {
			values =[];
			for(j=0; j!=self.failureLabelNames.length; j++) {
				if (self.connlabels[i-1].indexOf(self.failureLabelNames[j]) >=0)
				{
					values.push(j+1);
				}
			}
			
			$('#fault-'+i).editable({
				 type: 'checklist',
				 title: 'Choose Label',
				 autotext: 'always',
				 emptytext:'None',
				 value: values,
				 //source: [ {value: 1, text: 'Channel1'}, {value: 2, text: 'Channel2'}, {value: 3, text: 'Channel3'}],
				 source: self.failureLabelList,
				 success: function(response, newValue) {
					self._logger.debug("new mode value = " +newValue + response);
					self._logger.debug("new mode value = " +this.innerText);
					self._logger.debug("element = " +this.id);
					self._logger.debug("element gme id = " +this.id1);
					self.onEditFailureLabel(this.id1, newValue, self.failureLabelNames);
				 }
			 });
		 }
	}
   };
		 

    TVizWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
	if (desc)
	{
		//this._el.append('<div>Removing node "' + desc.name + '"</div>');
		delete this.nodes[gmeId];
	}
    };

    TVizWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            //this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    TVizWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };
    
    TVizWidget.prototype.onEditNode = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };
    
    TVizWidget.prototype.onEditMode = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };
    
    TVizWidget.prototype.onEditFailureLabel = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };



    TVizWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    TVizWidget.prototype.destroy = function () {
    };

    TVizWidget.prototype.onActivate = function () {
        this._logger.debug('TVizWidget has been activated');
	
	
    };

    TVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('TVizWidget has been deactivated');
    };

    return TVizWidget;
});
