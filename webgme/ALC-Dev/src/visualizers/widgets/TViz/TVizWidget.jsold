/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon May 30 2016 15:16:13 GMT-0500 (Central Daylight Time).
 */

define(['css!./styles/TVizWidget.css'], function () {
    'use strict';

    var TVizWidget,
        WIDGET_CLASS = 't-viz';

    TVizWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;
	

        this.nodes = {};
	this.modes = {};
	this.modenames = [];
        this._initialize();

        this._logger.debug('ctor finished');
    };

    TVizWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;
	
	this._el.append('<link href="//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/css/bootstrap-editable.css" rel="stylesheet"/>');
	this._el.append('<script src="//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/js/bootstrap-editable.min.js"></script>');
	    
        // set widget class
        this._el.addClass(WIDGET_CLASS);
	self.connid=0;

        // Create a dummy header 
        var table = document.createElement('div');
	table.className = 't-viz-table'
	table.id='mode-fault-table';
	//table.style.background="#f3f3f3";
	table.setAttribute("style", "margin-top: 50px;margin-left: 50px");
	
	var node = document.createElement('div');
	node.className='t-viz-heading';
	var cnode=document.createElement('div');
	cnode.className='t-viz-table-col';
	var chld1 = document.createTextNode("Source");
	cnode.appendChild(chld1);
	node.appendChild(cnode);
	cnode=document.createElement('div');
	cnode.className='t-viz-table-col';
	var chld1 = document.createTextNode("Destination");
	cnode.appendChild(chld1);
	node.appendChild(cnode);
	cnode=document.createElement('div');
	cnode.className='t-viz-table-col-mod';
	var chld1 = document.createTextNode("Active Mode(s)");
	cnode.appendChild(chld1);
	node.appendChild(cnode);
	cnode=document.createElement('div');
	cnode.className='t-viz-table-col-mod';
	var chld1 = document.createTextNode("Failure Label(s)");
	cnode.appendChild(chld1);
	node.appendChild(cnode);
	table.appendChild(node);
	
	this._el.append(table);
	
	self.table=this._el.find('#mode-fault-table');
	
	if (this.table)
	{
		self._logger.debug('got table');
	}
	else {
		self._logger.debug('****** not got table');
	}
	
	

        // Registering to events can be done with jQuery (as normal)
        // this._el.on('dblclick', function (event) {
            // event.stopPropagation();
            // event.preventDefault();
            // self.onBackgroundDblClick();
        // });
    };

    TVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    
    // Adding/Removing/Updating items
    var NODE_WHITELIST = {
        Port2Fault: true,
	Failure_Prop:true,
	Fault2Port:true,
	Flow:true,
	Mode:true
    };
    TVizWidget.prototype.addNode = function (desc) {
    var self = this;
        if (desc.isConnection) {
	
	   var isValid = NODE_WHITELIST[desc.metaName];
	   if (isValid)
	   {
		if (desc.isConnection)
		{
		    // Add node to a table of nodes
		    self.nodes[desc.id] = desc;
		    self.connid +=1;
		    var node = document.createElement('div');
		    node.className='t-viz-table-row';
		    if (self.connid %2 ==1){
			node.setAttribute("style", "background-color:#eee");
		    }
		    
		    var chld = document.createElement('div');
		    chld.className='t-viz-table-col';
		    var chld1 = document.createTextNode(desc.src.name);
		    chld.appendChild(chld1);
		    chld.ondblclick = self.onNodeClick.bind(self, desc.id);
		    node.appendChild(chld);
		    
		    chld = document.createElement('div');
		    chld.className='t-viz-table-col';
		    chld1 = document.createTextNode(desc.dst.name);
		    chld.appendChild(chld1);
		    chld.ondblclick = self.onNodeClick.bind(self, desc.id);
		    node.appendChild(chld);
		    
		    chld = document.createElement('div');
		    chld.className='t-viz-table-col-mod';
		    if (desc.modelabel)
		    {
			//chld.text = desc.modelabel;
			 chld1 = document.createTextNode(desc.modelabel);
		    }
		    else{
			 chld1 = document.createTextNode('-');
			 //chld.text = '-';
		    }
		    chld.appendChild(chld1);
		    chld.id='mode-'+ self.connid;
		    chld.ondblclick = self.onEditNode.bind(self, desc.id, chld.id);
		    
		    
		    
		    node.appendChild(chld);
		    
		    chld = document.createElement('div');
		    chld.className='t-viz-table-col-mod';
		    self._logger.debug('++++++++++++add node fault label '+desc.faultlabel);
		    if (desc.faultlabel)
		    {
			//chld.text = desc.faultlabel;
			 chld1 = document.createTextNode(desc.faultlabel);
		    }
		    else{
			//chld.text = '-';
			 chld1 = document.createTextNode('-');
		    }
		    chld.id='fault-'+ self.connid;
		    chld.ondblclick = self.onEditNode.bind(self, desc.id, chld.id);
		    chld.appendChild(chld1);
		    node.appendChild(chld);
		    self.table.append(node);
		    
		    // self._logger.debug(self._el);
		    
		    
		    
		}
		else{
			self.modes[desc.id] = desc;
			self.modenames.push(desc.name);
		}
		
	    }
        }
    };

    TVizWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
	if (desc)
	{
		//this._el.append('<div>Removing node "' + desc.name + '"</div>');
		delete this.nodes[gmeId];
	}
    };

    TVizWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            //this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    TVizWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };
    
    TVizWidget.prototype.onEditNode = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    TVizWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    TVizWidget.prototype.destroy = function () {
    };

    TVizWidget.prototype.onActivate = function () {
        this._logger.debug('TVizWidget has been activated');
    };

    TVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('TVizWidget has been deactivated');
    };

    return TVizWidget;
});
