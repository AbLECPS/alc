/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jul 07 2016 11:24:16 GMT-0500 (Central Daylight Time).
 */

define(['js/Dialogs/CodeEditor/CodeEditorDialog',
	    'css!./styles/ParamMapWidget.css',
		'../library/bootstrap3-editable-1.5.1/bootstrap3-editable/js/bootstrap-editable.min',
		'css!../library/bootstrap3-editable-1.5.1/bootstrap3-editable/css/bootstrap-editable.css'], 
		function (CodeEditorDialog) {
    'use strict';

    var ParamMapWidget,
        WIDGET_CLASS = 'ros-viz';

    ParamMapWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();
				

		this.rosNodes = {};
		this.rosNodeID = {};
		this.rosNodePortNames = {};
		this.rosNodePortNameToID = {};
		this.rosNodeKeys = [];
		this.rosTableTitles = {};
		this.rosTables = {};
		this.rosTablesID = {};
		this.rosTableCounter  = 0;
		this.messageNames = [];
		this.messageNamesToID = {};
		


		this.systemparameters = {};
		this.parameterMap = {};

		this.table = undefined;
        this._logger.debug('ctor finished');
    };

    ParamMapWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

		$.fn.editable.defaults.mode = 'inline';
        // set widget class
        this._el.addClass(WIDGET_CLASS);
	
		var dummy = document.createElement('div');
		dummy.id='dummyheader';
		dummy.setAttribute("style", "margin-top: 50px;margin-left: 50px");
		this._el.append(dummy);

	};
	
	ParamMapWidget.prototype.addInfo = function (desc) {
		var self = this;
		if (desc.metaName == 'ROSInfo')
		{
			self.addROSNodeInfo(desc);
		}
		if ((desc.metaName == "Params"))
		{
			self.addSystemParameterInfo(desc);
		}
	};
    
    ParamMapWidget.prototype.addROSNodeInfo = function (desc) {
		var self = this;
		if (desc.parameters)
		{

			var k = Object.keys(desc.parameters);
			if ((k.length > 0) && (desc.phname.length > 0) )
			{
				self.rosNodes[desc.id] = desc;
				self.rosNodeID[desc.phname]= desc.id;
				self.rosNodePortNames[desc.id]=[];
				self.rosNodePortNameToID[desc.id]={}
				var portids = Object.keys(desc.parameters);
				var i=0;
				for(i=0; i!=portids.length; i+=1)
				{
					var portid = portids[i];
					self.rosNodePortNames[desc.id].push(desc.parameters[portid]['name']);
					self.rosNodePortNameToID[desc.id][desc.parameters[portid]['name']] = portid;
					
				}
				self.rosNodePortNames[desc.id].sort()
				
			}
		}

		
	};
	
	ParamMapWidget.prototype.addSystemParameterInfo = function (desc) {
		var self = this;
		if (desc.systemparameters)
		{

			var keys = Object.keys(desc.systemparameters);
			var k = 0 ;
			for (k=0; k!=keys.length; k+=1)
			{
				self.systemparameters[keys[k]] = desc.systemparameters[keys[k]];
				var k1= 0;
				var rosargs = self.systemparameters[keys[k]].rosargs;
				var num = rosargs.length;
				for(k1=0; k1!=num; k1+=1)
				{
					self.parameterMap[rosargs[k1]]=keys[k];
				}

			}
			
		}

		
	};

	ParamMapWidget.prototype.getParameterMap = function (id) {
		var self = this;
		var keys = Object.keys(self.parameterMap);
		if (keys.indexOf(id)>-1)
		{
			return self.parameterMap[id];
		}
		return '';

	};


	
	ParamMapWidget.prototype.getSystemParameterDisplayName = function (mid) {
		var self = this;
		var ret = '';
		var keys = Object.keys(self.systemparameters);
		if (keys.indexOf(mid)>-1)
		{
			return self.systemparameters[mid].name;
		}

		return ret;

	};
	

	
	ParamMapWidget.prototype.getParameters = function(){
		var self = this;

		var modelist = [];
		var i= 0;
		
		modelist.push({value: 1, text: '--NONE--'});
		for(i=0; i!=self.messageNames.length; i+=1)
		{
			modelist.push({value: i+2, text: self.messageNames[i]});
		}

		return modelist;
	};

	ParamMapWidget.prototype.getParameterValues = function(val){
		var self = this;

		if (val == '' || self.messageNames.indexOf(val) ==-1)
		{
			return 1;
		}

		var idx = self.messageNames.indexOf(val) +2;
				
		return idx;
	};

	ParamMapWidget.prototype.getParameterID = function(idx){
		var self = this;
		var index = parseInt(idx);

		if (index==1)
		{
			return '';
		}
		
		return self.messageNamesToID[self.messageNames[index-2]];
		
	};

	ParamMapWidget.prototype.buildParameterStrs = function (){

		var self = this;
		var keys = Object.keys(self.systemparameters);
		var k = 0;

		for(k=0; k!=keys.length; k+=1)
		{
			var msgid = keys[k];
			var msgstr = self.systemparameters[msgid].name;
			self.messageNamesToID[msgstr]= msgid;
			self.messageNames.push(msgstr);
			
		}
		self.messageNames.sort();

	
	};
	
    
    
    ParamMapWidget.prototype.renderTable = function () {
		var self = this;
		self.rosNodeKeys = Object.keys (self.rosNodeID);
		if (self.rosNodeKeys.length==0)
			return;
	
	
		self.rosNodeKeys.sort();
		self.buildParameterStrs();
		
	
		/*var nodeh = document.createElement('div');
		var chldh = document.createTextNode("ROS Node Interfaces");
		nodeh.appendChild(chldh);
		nodeh.setAttribute("style", "margin-top: 20px;margin-left: 50px; font-weight:bold");
		self._el.append(nodeh);*/

		var i =0;
		for(i=0; i!= self.rosNodeKeys.length; i +=1)
		{
			var nodename = self.rosNodeKeys[i];
			var nodeid  =  self.rosNodeID[nodename];
			self.renderROSNodeTable(nodeid, nodename);
		}

		    
	};
	
	
	ParamMapWidget.prototype.renderROSNodeTable = function (blkid, blkname) {
		var self = this;
		
		var nodeh = document.createElement('div');
		var titleText = 'ROS Arguments in : '+blkname;
		if (self.rosNodes[blkid].nodetype != 'Node')
		{
			titleText = self.rosNodes[blkid].nodetype + ' in : '+blkname;
		}
		//var chldh = document.createTextNode('ROS Node Interfaces in : '+blkname);
		//nodeh.appendChild(chldh);
        nodeh.className = 'ros-fake-link';
		nodeh.innerHTML = titleText;
		nodeh.setAttribute("style", "margin-top: 50px;margin-left: 50px; font-weight:bold");
		nodeh.style.font = "bold 20px arial,serif";
		nodeh.setAttribute("display", "block");
		var titleid = 'ros-table-title'+self.rosTableCounter.toString();
		nodeh.id=titleid;
		self._el.append(nodeh);
		self.rosTableTitles[blkid] = document.getElementById(titleid);//this._el.find('#'+titleid);

		
		var table = document.createElement('div');
		table.className = 'ros-viz-table'
		var tableid = 'ros-table-'+self.rosTableCounter.toString();
		table.id = tableid;
		table.id1 = blkid;
		//table.ondblclick = self.updateTable.bind(self,pid);
		
		table.setAttribute("style", "margin-top: 10px;margin-left: 50px");

		self._el.append(table);

		self.rosTables[blkid] = document.getElementById(tableid);
		self.rosTablesID[blkid]=this._el.find('#'+tableid);
		self.populateROSTable(blkid);
		self.rosTableCounter +=1;

		nodeh.onclick = self.onNodeClick.bind(self, blkid);
			
		
		
	};

	

	ParamMapWidget.prototype.populateROSTable = function (blkid) {
		var self = this;
		var  i =0;
		var portnames  =  self.rosNodePortNames[blkid];
		var portids =  self.rosNodePortNameToID[blkid];
		var parameters = self.rosNodes[blkid].parameters;
		var keys = portnames;
		var chld = '';
		var mtext ='';

		var show_issues = false;
		for (i=0; i!= keys.length; i+=1)
		{
			var key = keys[i];
			var pid = portids[key];
			var pinfo = parameters[pid];
		}
		
		

		var node = document.createElement('div');
		node.className = 'ros-viz-heading';

		
		var cnode = document.createElement('div');
		cnode.className = 'ros-viz-table-type-col';
		var chld1 = document.createTextNode("ROS Argument");
		cnode.appendChild(chld1);
		node.appendChild(cnode);

		cnode = document.createElement('div');
		cnode.className = 'ros-viz-table-type-col';
		var chld1 = document.createTextNode("Default");
		cnode.appendChild(chld1);
		node.appendChild(cnode);


		cnode = document.createElement('div');
		cnode.className = 'ros-viz-table-col';
		var chld1 = document.createTextNode("Parameter Map");
		cnode.appendChild(chld1);
		node.appendChild(cnode);

		
		self.rosTablesID[blkid].append(node);
		
		
		var info = {};

		

		for (i=0; i!= keys.length; i+=1)
		{
			var key = keys[i];
			var pid = portids[key];
			var pinfo = parameters[pid];
			var mid =  self.getParameterMap(pid);
			var defaultval = pinfo.default;
			

			var mname = '';
			if (mid)
			{
				mname = self.getSystemParameterDisplayName(mid);
			}
			info[i]=mname;

						
			node = document.createElement('div');
			node.className = 'ros-viz-table-row';
			node.setAttribute("style", "background-color:#eee");
			
			chld = document.createElement('div');
			chld.className = 'ros-viz-table-type-col';
			var name = key;
			var chld1 = document.createTextNode(name);
			chld.id1 = pid;
			
			chld.appendChild(chld1);
			node.appendChild(chld);
			
			chld = document.createElement('div');
			chld.className = 'ros-viz-table-type-col';
			chld.id = 'type-'+self.rosTableCounter.toString()+'-'+i.toString();
			chld.id1 = pid;
			chld.id2 = 'type';
			mtext = defaultval;
			chld.innerHTML = '<a href="#">' + mtext + '</a>';
			node.appendChild(chld);

			chld = document.createElement('div');
			chld.className = 'ros-viz-table-col';
			chld.id = 'message-'+self.rosTableCounter.toString()+'-'+i.toString();
			chld.id1 = pid;
			chld.id2 = 'message';
			mtext = mname;
			chld.innerHTML = '<a href="#">' + mtext + '</a>';
			node.appendChild(chld);

			self.rosTablesID[blkid].append(node);
			
		}

		
		//message type
		for (i=0; i!= keys.length; i+=1)
		{
			var mesvalue = self.getParameterValues(info[i]);
			var mesmodes = self.getParameters();

			$('#message-' +self.rosTableCounter.toString()+'-'+i.toString()).editable({
				type: 'select',
				title: 'Select',
				autotext: 'always',
				emptytext: 'None',
				value: mesvalue,
				source: mesmodes,
				success: function (response, newValue) {
					self._logger.debug("new mode value = " + newValue + response);
					self._logger.debug("new mode value = " + this.innerText);
					var minfo = self.getParameterID(newValue);
					var curmid = self.getParameterMap(this.id1);
					self.onEditParameterInfo(this.id1, curmid,minfo);
					self.parameterMap[this.id1]=minfo;
				}
			});
		}

		

	};

	

    ParamMapWidget.prototype.onWidgetContainerResize = function (width, height) {
        // this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    ParamMapWidget.prototype.addNode = function (desc) {
		var self = this;
        if (desc) {
	    
			if (desc.use ==1) {
				// Add node to a table of nodes
				self.addInfo(desc);
				
				
			}
			if (desc.last ==1)
				self.renderTable();
	    
            
        }
	
    };

    ParamMapWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
	if (desc)
	{
		//this._el.append('<div>Removing node "' + desc.name + '"</div>');
		delete this.nodes[gmeId];
	}
    };

    ParamMapWidget.prototype.updateNode = function (desc) {
		var self = this;
        if (desc) {
			this._logger.debug('Updating node:', desc);
			
            //this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    ParamMapWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };
    
     ParamMapWidget.prototype.onEditModeInfo = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    }

    ParamMapWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ParamMapWidget.prototype.destroy = function () {
    };

    ParamMapWidget.prototype.onActivate = function () {
        this._logger.debug('ParamMapWidget has been activated');
    };

    ParamMapWidget.prototype.onDeactivate = function () {
        this._logger.debug('ParamMapWidget has been deactivated');
    };

    return ParamMapWidget;
});
