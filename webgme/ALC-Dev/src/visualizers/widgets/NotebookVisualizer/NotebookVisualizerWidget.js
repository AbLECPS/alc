/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Oct 18 2016 15:26:27 GMT-0500 (Central Daylight Time).
 */

define(['css!./styles/NotebookVisualizerWidget.css'], function () {
    'use strict';

    var NotebookVisualizerWidget,
        WIDGET_CLASS = 'm-o-c-a-notebook-visualizer';

    NotebookVisualizerWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');

        this.notebookIframe = null;
    };

    NotebookVisualizerWidget.prototype._initialize = function (nodeData) {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        if (!nodeData) {
            console.log('URL is empty. Something is wrong!');
            return;
        }


        // set widget class
        this._el.addClass(WIDGET_CLASS);

        var dummy = document.createElement('div');
            dummy.id = 'dummyheader';
            dummy.setAttribute("style", "margin-top:25px;");
            this._el.append(dummy);

        // Create a dummy header 
        //this._el.append('<h3>NotebookVisualizer Events:</h3>');
        var notebookIframe = document.createElement('iframe');
        notebookIframe.name = "notebook";
        notebookIframe.style.height = "100%";
        notebookIframe.style.width = "100%";
        //notebookIframe.src = "ipython";
        var nburl = this.getNotebookUrl(nodeData);
        this._logger.debug('***notebook url = ' + nburl);
        if (nburl) {

            notebookIframe.src = nburl;
            this._el.append(notebookIframe);
            this.notebookIframe = notebookIframe;

        }
        else {
            console.log('URL is empty. Something is wrong!');
            return;
        }

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    NotebookVisualizerWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    NotebookVisualizerWidget.prototype.getNotebookUrl = function (desc) {
        // Replace "localhost:9999" with "moca.isis.vanderbilt.edu" if you're running this on localhost
        //return "http://129.59.105.83:12888/notebooks/nag-test.ipynb";

        var h = window.location.hostname;
        var p = window.location.port;
        if (desc.url) {
            if (desc.url.indexOf("ipython") == 0) {
                if (p)
                {
                    var url = "http://" + h + ":" + p +'/'+ desc.url;
                    return url;
                }
                else{
                    var url = "https://" + h +'/'+ desc.url;
                    return url;
                }
            }

            if (desc.url.indexOf("matlab") == 0) {
                if (p)
                {
                    var url = "http://" + h + ":" + p + '/'+desc.url;
                    return url;
                }
                else{
                    var url = "https://" + h +'/'+ desc.url;
                    return url;
                }
            }
            if ((desc.parentMetaTypeName.indexOf('VerificationSetup') == -1) && (desc.parentMetaTypeName.indexOf('ValidationSetup') == -1) && (desc.parentMetaTypeName.indexOf('SystemIDSetup') == -1)) {
                if (desc.url.indexOf("ipython") == -1) {
                    if (p)
                    {
                        var url = "http://" + h + ":" + p + "/ipython/notebooks/" + desc.url;
                        return url;
                    }
                    else{
                        var url = "http://" + h + "/ipython/notebooks/" + desc.url;
                        return url;
                    }
                }
                else
                    return desc.url;
            }
            else {
                if (desc.url.indexOf("matlab") == -1) {
                    
                    if (p)
                    {
                        var url = "http://" + h + ":" + p + "/matlab/notebooks/" + desc.url;
                        return url;
                    }
                    else{
                        var url = "https://" + h  + "/matlab/notebooks/" + desc.url;
                        return url;
                    }
                }
                else
                    return desc.url;
            }
        }
        else {
            return "";
        }


    };

    // Adding/Removing/Updating items
    NotebookVisualizerWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            this.nodes[desc.id] = desc;
            node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
                desc.childrenIds.length + ' ' + label + '.';

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    NotebookVisualizerWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    NotebookVisualizerWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    NotebookVisualizerWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    NotebookVisualizerWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    NotebookVisualizerWidget.prototype.destroy = function () {
        // TODO: Remove iframe here
    };

    NotebookVisualizerWidget.prototype.onActivate = function () {
        this._logger.debug('NotebookVisualizerWidget has been activated');
    };

    NotebookVisualizerWidget.prototype.onDeactivate = function () {
        this._logger.debug('NotebookVisualizerWidget has been deactivated');
    };

    return NotebookVisualizerWidget;
});
