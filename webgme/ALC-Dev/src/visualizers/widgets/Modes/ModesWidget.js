/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jul 07 2016 11:24:16 GMT-0500 (Central Daylight Time).
 */

define(['css!./styles/ModesWidget.css','../library/bootstrap3-editable-1.5.1/bootstrap3-editable/js/bootstrap-editable.min','css!../library/bootstrap3-editable-1.5.1/bootstrap3-editable/css/bootstrap-editable.css'], function () {
    'use strict';

    var ModesWidget,
        WIDGET_CLASS = 'm-viz';

    ModesWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();
		this.componentModeInfo = {};
		this.componentModeKeys = [];
		this.componentModes={};
		this.componentInitialMode={};
		this.systemModeInfo = {};
		this.systemModeKeys = [];
		this.table = undefined;
        this._logger.debug('ctor finished');
    };

    ModesWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

		$.fn.editable.defaults.mode = 'inline';
        // set widget class
        this._el.addClass(WIDGET_CLASS);
	
		var dummy = document.createElement('div');
		dummy.id='dummyheader';
		dummy.setAttribute("style", "margin-top: 50px;margin-left: 50px");
		this._el.append(dummy);

    };
    
    ModesWidget.prototype.addComponentModeInfo = function (desc) {
		var self = this;
		var modename = desc.phname + '/' + desc.name;
		self.componentModeInfo[modename] = desc;
		self.componentModes[modename] = Object.keys(desc.modevars);
		self.componentModes[modename].sort();
		if (desc.initialmode)
			self.componentInitialMode[modename] = self.componentModes[modename].indexOf(desc.initialmode);
    };
	
	ModesWidget.prototype.getComponentModeID = function (modename, index) {
		var self = this;
		var mname = self.componentModes[modename][index-1];
		var retid = self.componentModeInfo[modename].modevars[mname];
		return retid;
    };
    
    
    ModesWidget.prototype.addSystemModeInfo = function (desc) {
		var self = this;
		var keys = Object.keys(desc.systemmodes);
		
		var i =0;
		for(i=0; i!= keys.length; i+=1)
		{
			this.systemModeInfo[keys[i]] = desc.systemmodes[keys[i]];
			
		}
    };
    
    ModesWidget.prototype.renderTable = function () {
		var self = this;
		self.componentModeKeys= Object.keys(self.componentModeInfo);
		self.systemModeKeys = Object.keys(self.systemModeInfo);
		if (self.componentModeKeys.length==0 || self.systemModeKeys.length==0)
			return;
	
	
		self.componentModeKeys.sort();
		self.systemModeKeys.sort();
	
		var table = document.createElement('div');
		table.className = 'm-viz-table'
		table.id='mode-table';
		table.setAttribute("style", "margin-top: 50px;margin-left: 50px");
		
		var node = document.createElement('div');
		node.className='m-viz-heading';
		
		var cnode=document.createElement('div');
		cnode.className='m-viz-table-col';
		var chld1 = document.createTextNode("Modes");
		cnode.appendChild(chld1);
		node.appendChild(cnode);
	
		var i=0;
		for(i=0; i<self.componentModeKeys.length; i++){
			cnode=document.createElement('div');
			cnode.className='m-viz-table-col';
			var chld1 = document.createTextNode(self.componentModeKeys[i]);
			cnode.appendChild(chld1);
			node.appendChild(cnode);
		}
	
		table.appendChild(node);
		
	
		for(i=0; i<self.systemModeKeys.length; i++){
			var desc = self.systemModeInfo[self.systemModeKeys[i]];
			node = document.createElement('div');
			node.className='m-viz-table-row';
			if ((i+1) %2 ==1){
				node.setAttribute("style", "background-color:#eee");
			}
		    
			var chld = document.createElement('div');
			chld.className='m-viz-table-col';
			var chld1 = document.createTextNode(self.systemModeKeys[i]);
			chld.appendChild(chld1);
			chld.ondblclick = self.onNodeClick.bind(self, desc.id);
			node.appendChild(chld);
		
			var j=0;
			for(j=0; j<self.componentModeKeys.length; j++){
				chld = document.createElement('div');
				chld.className='m-viz-table-col-mod';
				chld.id='mode-'+ i+'-'+j;
				chld.id1=desc.id;
				chld.id2= j;
				var mtext='-'
				chld.innerHTML = '<a href="#">'+mtext+'</a>';
				node.appendChild(chld);
			}
			table.appendChild(node);
		
		}
	
		self._el.append(table);
		self.table=this._el.find('#mode-table');
	
		for(j=0; j<self.componentModeKeys.length; j++){
			var modelist = [];
			var k=0;
			var modes  = self.componentModes[self.componentModeKeys[j]];
			for(k=0; k<modes.length; k++)
				modelist.push({value:k+1, text:modes[k]});
	
			for(i=0; i<self.systemModeKeys.length; i++){
				var values =[self.componentInitialMode[self.componentModeKeys[j]] +1];
				if (self.systemModeInfo[self.systemModeKeys[i]].modeselection)
				{
					var cmodekeys = Object.keys(self.systemModeInfo[self.systemModeKeys[i]].modeselection);
					if (cmodekeys.indexOf(self.componentModeKeys[j]) !=-1)
					{
						var cmodes = self.systemModeInfo[self.systemModeKeys[i]].modeselection[self.componentModeKeys[j]];
						if (cmodes)
						{
							values = [];
							var cmodevalues = cmodes.split(',');
							for(k=0; k<modes.length; k++){
								if (cmodevalues.indexOf(modes[k])>=0)
									values.push(k+1);
							}
							
						}
					}
					
				}
				
			$('#mode-'+i+'-'+j).editable({
				 type: 'checklist',
				 title: 'Choose Mode',
				 autotext: 'always',
				 emptytext:'All',
				 value: values,
				 source: modelist,
				 success: function(response, newValue) {
					self._logger.debug("new mode value = " +newValue + response);
					self._logger.debug("new mode value = " +this.innerText);
					self._logger.debug("element = " +this.id);
					self._logger.debug("element gme id = " +this.id1);
					self.onEditModeInfo(this.id1, newValue, self.componentModes[self.componentModeKeys[this.id2]], self.componentModeKeys[this.id2]);
				 }
			 });
		   }
		}
    
    };
    
    

    ModesWidget.prototype.onWidgetContainerResize = function (width, height) {
        // this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    ModesWidget.prototype.addNode = function (desc) {
		var self = this;
        if (desc) {
	    
			if (desc.use ==1) {
				// Add node to a table of nodes
				if (desc.metaName=='ModeVariable')
					 self.addComponentModeInfo(desc);
				if (desc.metaName=='System_Model')
					 self.addSystemModeInfo(desc);
				
			}
			if (desc.last ==1)
				self.renderTable();
	    
            
        }
	
    };

    ModesWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
	if (desc)
	{
		//this._el.append('<div>Removing node "' + desc.name + '"</div>');
		delete this.nodes[gmeId];
	}
    };

    ModesWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            //this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    ModesWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };
    
     ModesWidget.prototype.onEditModeInfo = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    }

    ModesWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ModesWidget.prototype.destroy = function () {
    };

    ModesWidget.prototype.onActivate = function () {
        this._logger.debug('ModesWidget has been activated');
    };

    ModesWidget.prototype.onDeactivate = function () {
        this._logger.debug('ModesWidget has been deactivated');
    };

    return ModesWidget;
});
