/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Mar 30 2022 10:22:23 GMT-0500 (CDT).
 */

define(['./ActivityChoicesDefinitionTree',
        './ActivityInputDefinitionTree',
        './ActivityCampaignDefinitionTree',
        'js/Utils/ComponentSettings',
        'css!./styles/ActivityDefinitionWidget.css'], function (ActivityChoicesDefinitionTree, ActivityInputDefinitionTree, ActivityCampaignDefinitionTree) {
    'use strict';

    var WIDGET_CLASS = 'Activity Definition';

    function ActivityDefinitionWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    ActivityDefinitionWidget.prototype._initialize = function () {
        var self = this;

        this._el.addClass(WIDGET_CLASS);

        this._el[0].setAttribute("style", "margin:20px");

        // Choices tree

        this._choicesChildNodes = {};
        this._choicesDict = {};

        let topDiv = $('<div/>', {});
        this._choicesTreeEl = $('<div/>', {});
        this._choicesTreeEl[0].id = 'choices-container';

        topDiv[0].setAttribute('style', 'margin-top:25px');

        this._options = {};
        this._choicesTree = new ActivityChoicesDefinitionTree(this._choicesTreeEl, this._options);

        this._choicesTree.onNodeOpen = function(nodeId)
        {
            self.createChildNodesWithData(nodeId);
        }

        this._el.append($('<h4>Choices: </h4>', {}));
        topDiv.append(this._choicesTreeEl);
        this._el.append(topDiv);

        // Input tree

        this._inputChildNodes = {};
        this._resultsChildNodes = {};
        this._inputDict = {};

        let topInputDiv = $('<div/>', {});
        this._inputTreeEl = $('<div/>', {});
        this._inputTreeEl[0].id = 'input-container';

        topInputDiv[0].setAttribute('style', 'margin-top:25px');

        this._options = {};
        this._inputTree = new ActivityInputDefinitionTree(this._inputTreeEl, this._options);

        this._inputTree.onNodeOpen = function(nodeId)
        {
        }

        var inputHeader = $('<h4>Inputs: </h4>', {});
        inputHeader[0].setAttribute('style', 'margin-top:25px');
        this._el.append(inputHeader);
        topInputDiv.append(this._inputTreeEl);
        this._el.append(topInputDiv);

        // Campaign Tree

        /*this._campaignChildNodes = {};
        this._campaignDict = {};

        let topCampaignDiv = $('<div/>', {});
        this._campaignTreeEl = $('<div/>', {});
        this._campaignTreeEl[0].id = 'campaign-container';

        topCampaignDiv[0].setAttribute('style', 'margin-top:25px');

        this._options = {};
        this._campaignTree = new ActivityCampaignDefinitionTree(this._campaignTreeEl, this._options);

        this._campaignTree.onNodeOpen = function(nodeId)
        {
        }

        var campaignHeader = $('<h4>Campaign: </h4>', {});
        campaignHeader[0].setAttribute('style', 'margin-top:25px');
        this._el.append(campaignHeader);
        topCampaignDiv.append(this._campaignTreeEl);
        this._el.append(topCampaignDiv);*/

        var divFooter = $('<footer/>', {});
        divFooter[0].setAttribute('style', 'bottom:0px');
        divFooter[0].setAttribute('style', 'height:50px');
        this._el.append(divFooter);
    };

    ActivityDefinitionWidget.prototype.createChildNodesWithData = function(nodeId,tree)
    {
        var self = this;
        var paramList = this._choicesDict[nodeId];
        paramList.slice(0).reverse().map((param) => {
            self._choicesTree.createNode(self._choicesChildNodes[nodeId],{
                id: param[0],
                name: param[1],
                hasChildren: false,
                folder: false,
                icon: 'glyphicon',
                data: {id:param[0],
                       name:param[1],
                       type:param[4],
                       value:param[2],
                       default:param[5],
                       codeType:param[6],
                       description:param[7]}
            });
        });
    };

    ActivityDefinitionWidget.prototype.createChoiceTables = function (dict) {
        for(var key in dict)
        {
            if (key.length < 1)
            {
                continue;
            }

            this._choicesChildNodes[key] = this._choicesTree.createNode(null, {
                id: key,
                name: key,
                hasChildren: true,
                folder: true,
                class: key
            });
        }
    };

    ActivityDefinitionWidget.prototype.createInputTables = function (idict, rdict) {
        for(var key in idict)
        {
            if (key.length < 1)
            {
                continue;
            }

            this._inputChildNodes[key] = this._inputTree.createNode(null, {
                id: key,
                name: key,
                hasChildren: true,
                folder: true,
                class: key,
                checkbox: false,
                radiogroup: false,
                data: { id: idict[key][0], multiselect: idict[key][1] }
            });

            for(var rkey in rdict)
            {
                if(rdict[rkey].length > 0)
                {
                    if(idict[key][1])
                    {
                        this._resultsChildNodes[rkey] = this._inputTree.createNode(this._inputChildNodes[key], {
                            id: rkey,
                            name: rkey,
                            hasChildren: true,
                            folder: true,
                            checkbox: true,
                            class: rkey,
                            radiogroup: false
                        });
                    }
                    else
                    {
                        this._resultsChildNodes[rkey] = this._inputTree.createNode(this._inputChildNodes[key], {
                            id: rkey,
                            name: rkey,
                            hasChildren: true,
                            folder: true,
                            class: rkey,
                            checkbox: false,
                            radiogroup: true
                        });
                    }

                    for(var entry of rdict[rkey])
                    {
                        if(idict[key][1])
                        {
                            this._inputTree.createNode(this._resultsChildNodes[rkey], {
                                id: entry[0],
                                name: entry[1],
                                hasChildren: false,
                                folder: false,
                                icon: 'glyphicon',
                                class: entry[1],
                                checkbox: true,
                                radiogroup: false,
                                data: { id: entry[0], multiselect: true, parent: key }
                            });
                        }
                        else
                        {
                            this._inputTree.createNode(this._resultsChildNodes[rkey], {
                                id: entry[0],
                                name: entry[1],
                                hasChildren: false,
                                folder: false,
                                icon: 'glyphicon',
                                class: entry[1],
                                checkbox: true,
                                radiogroup: false,
                                data: { id: entry[0], multiselect: false, parent: key }
                            });
                        }
                    }
                }
            }
        }
    };

    ActivityDefinitionWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    ActivityDefinitionWidget.prototype.addNode = function (desc) {
        if (desc) {
            this.nodes[desc.id] = desc;

            if(desc['ChoicesDict'] !== null)
            {
                this._choicesDict = desc['ChoicesDict'];
                this.createChoiceTables(this._choicesDict);
            }

            if(desc['InputsDict'] !== null && 
               desc['ResultsDict'] !== null)
            {
                this._inputDict = desc['InputsDict'];
                this._resultsDict = desc['ResultsDict'];
                this.createInputTables(this._inputDict, this._resultsDict);
            }
        }
    };

    ActivityDefinitionWidget.prototype.removeNode = function (gmeId) {
        delete this.nodes[gmeId];
    };

    ActivityDefinitionWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    ActivityDefinitionWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    ActivityDefinitionWidget.prototype.onBackgroundDblClick = function () {
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ActivityDefinitionWidget.prototype.destroy = function () {
    };

    ActivityDefinitionWidget.prototype.onActivate = function () {
        this._logger.debug('ActivityDefinitionWidget has been activated');
    };

    ActivityDefinitionWidget.prototype.onDeactivate = function () {
        this._logger.debug('ActivityDefinitionWidget has been deactivated');
    };

    return ActivityDefinitionWidget;
});
