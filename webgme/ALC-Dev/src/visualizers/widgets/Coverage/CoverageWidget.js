/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Apr 11 2018 10:42:14 GMT-0500 (Central Daylight Time).
 */

define(['css!./styles/CoverageWidget.css',
        '../library/bootstrap3-editable-1.5.1/bootstrap3-editable/js/bootstrap-editable.min',
		'css!../library/bootstrap3-editable-1.5.1/bootstrap3-editable/css/bootstrap-editable.css'
], function () {
    'use strict';

    var CoverageWidget,
        WIDGET_CLASS = 'coverage';

    CoverageWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();
		this.comptype     = '';
		this.compinfo     = '';
		this.fninfo       = '';
		this.compcoverage = '';
		this.fncoverage   = '';
		this.gsncoverage  = '';
		this.tabcontent = '';
		//this.tablistids = ['tab-comp-type', 'tab-comp-info', 'tab-fn-info', 'tab-comp-coverage','tab-fn-coverage','tab-gsn-coverage'];
		//this.tablistnames = ['Parts List', 'Instance List', 'Component - Functions', 'Function Coverage','Component Coverage','GSN Coverage'];
		//this.tablistids = ['tab-comp-type', 'tab-comp-info', 'tab-comp-coverage','tab-fn-coverage','tab-gsn-coverage'];
		//this.tablistnames = ['Parts List', 'Instance List',  'Function Coverage','Component Coverage','GSN Coverage'];
		this.tablistids = ['tab-comp-type', 'tab-comp-info', 'tab-comp-coverage','tab-fn-coverage','tab-gsn-coverage', 'tab-requirements-list', 'tab-requirements-coverage'];
		this.tablistnames = ['Parts List', 'Instance List',  'Function Coverage','Component Coverage','GSN Coverage', 'Requirements List', 'Requirements Coverage'];
		this.actionChoices = [ {value: 1, text: 'Needs Attention'}, {value: 2, text: 'Completed'}, {value: 3, text: 'Ignore'}];
		this.actionValues = ['Needs Attention','Completed','Ignore'];
		this.idvs = [];
		this.idv1 = [];
		this.nodeID = '';

        this._logger.debug('ctor finished');
    };

    CoverageWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;
		$.fn.editable.defaults.mode = 'inline';
		

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header 
        //this._el.append('<h3>Coverage Events:</h3>');

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    CoverageWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };
	
	CoverageWidget.prototype.eraseContent = function (table) {
		while (table.firstChild) {
          table.removeChild(table.firstChild);
		}
	}
	
	CoverageWidget.prototype.addList = function(tablistids, tablistnames)
	{
		var self = this,
		i= 0;
		
		var ulid = 'table-list';
		var ul = self._el.find('#'+ulid);
		if  (ul.length > 0)
		{
			return 0;
		}
		
		ul = document.createElement('ul');
		ul.className = 'nav nav-tabs';
		for (i=0; i!= tablistids.length; i+=1)
		{
			var li = document.createElement('li');
			if (i==0)
				li.className = 'active';
			var newAnchor = document.createElement('a');
			newAnchor.href = "#" + tablistids[i];
			newAnchor.innerHTML = tablistnames[i];
			newAnchor.setAttribute("data-toggle", "tab");
			li.appendChild(newAnchor);
			ul.appendChild(li);
		}
		
		self._el.append(ul);
		return 1;
	};
	
	CoverageWidget.prototype.addTable = function(tableid, title, tabid,isactive = 0)
	{
		var self = this;
		
		var ltabcontent = document.createElement('div');
		ltabcontent.id = tabid;
		if (isactive ==1)
			ltabcontent.className = 'tab-pane fade in active';
		else
			ltabcontent.className = 'tab-pane fade';
	
		
		//var titlehtml = '<br><br><h4 style="margin-left:15px">' + title +'</h4>';
		//ltabcontent.append(titlehtml);
		var table = document.createElement('div');
		table.className = 'coverage-viz-table'
		table.id=tableid;
		table.setAttribute("style", "margin-top: 10px;margin-left: 10px");
		ltabcontent.append(table);
		self.tabcontent.append(ltabcontent);
		return table;
	};
	
	CoverageWidget.prototype.createSepRow = function(num)
	{
		var self = this;
		var rownode = document.createElement('div');
		rownode.className='t-viz-table-row';
		rownode.setAttribute("style", "background-color:#99b");
		var i =0;
		for(i=0; i!= num; i+=1)
			self.addCell(rownode,' ');
		
		return rownode;
	};
	
	CoverageWidget.prototype.createRow = function( isHeading, rowIndex=0)
	{
		var self = this;
		var rownode = document.createElement('div');
		if (isHeading==1)
			rownode.className='coverage-viz-heading';
		else{
			rownode.className='t-viz-table-row';
			if (rowIndex %2 == 1)
			{
				rownode.setAttribute("style", "background-color:#eee");
			}
			
			
		}
		
		return rownode;
	}
	
	CoverageWidget.prototype.addCell = function (rownode, data, style='') 
	{
		var self = this;
		var cnode=document.createElement('div');
		cnode.className='coverage-viz-table-col';
		var tval='', lval='';
		
		if (Array.isArray(data))
		{
			if (data.length ==2)
			{
				tval = data[0];
				lval=data[1];			
			}
			else
				tval = data;
		}
		else
		{
			tval = data;
		}
		// if (tval=='' || tval==' ')
		// {
			// tval = '-'
		// }
		var chld1 = document.createTextNode(tval);
		cnode.appendChild(chld1);
		
		var styleprops='';
		if (style.indexOf('X') !=-1)
		{
			styleprops += "text-align:center;color:red; font-weight:bold;";
		}
		
		if (style.indexOf('h') !=-1)
		{
			styleprops += "text-align:center;font-weight:bold;";
		}
		if (style.indexOf('c') !=-1)
		{
			styleprops += "color:darkcyan;font-weight:bold;";
		}
		if (style.indexOf('ic') !=-1)
		{
			styleprops += "color:gray;font-weight:bold;font-style:italic;";
		}
		if (style.indexOf('fn') !=-1)
		{
			styleprops += "color:saddlebrown; font-weight:bold;";
		}
		if (style.indexOf('fm') !=-1)
		{
			styleprops += "color:red; font-weight:bold;";
		}
		if (style.indexOf('ef') !=-1)
		{
			styleprops += "color:magenta; font-weight:bold;";
		}
		if (style.indexOf('re') !=-1)
		{
			styleprops += "color:saddlebrown;font-weight:bold;";
		}
		if (style.indexOf('gsn') !=-1)
		{
			styleprops += "color:blue;font-weight:bold;";
			//styleprops += "color:MediumTurquoise ;font-weight:bold;";
		}
		if (tval=='?')
		{
			styleprops += "color:red; font-weight:bold;";
		}
		
		
		if (styleprops)
		{
			cnode.setAttribute("style", styleprops);
		}
		
		
		
		
			
		if (lval)
			cnode.ondblclick = self.onNodeClick.bind(self, lval);
		
		
		rownode.appendChild(cnode);
		
		
		
	};
	
	CoverageWidget.prototype.addEditableCell = function (rownode, data, idv, id, prefix) 
	{
		var self = this;
		var cnode=document.createElement('div');
		cnode.className='coverage-viz-table-col-mod';
		cnode.id = prefix+"-"+id;
		cnode.id1 = idv;
		cnode.id2 = prefix;
		
		if (data == '')
			cnode.innerHTML = '<a href="#">'+'</a>';
		else
			cnode.innerHTML = '<a href="#">'+data+'</a>';
			
			
		
		
		// if (prefix == 'u')
		// {
			// cnode.editable({
				 // type: 'text',
				 // title: 'Username',
				 // success: function(response, newValue) {
					// self._logger.debug("username = " +newValue);
				 // }
			 // });
		// }
		
		// if (prefix == 'c')
		// {		
			 // cnode.editable({
				 // type: 'textarea',
				 // title: 'Username',
				 // success: function(response, newValue) {
					// self._logger.debug("username = " +newValue);
				 // }
			 // });
		// }
		
		// if (prefix == 'a')
		// {		
			// cnode.editable({
				 // type: 'checklist',
				 // title: 'Action',
				 // defaultValue: 'Needs Attention',
				 // emptytext:'Needs Attention',
				 // value: 1,
				 // source: [ {value: 1, text: 'Needs Attention'}, {value: 2, text: 'Completed'}, {value: 3, text: 'Ignore'}],
				 // source: self.modelist,
				 // success: function(response, newValue) {
					// self._logger.debug("new action value = " +newValue);
				 // }
			 // });
		// }
			 
		rownode.appendChild(cnode);
		
	};
	
	
	
	CoverageWidget.prototype.updateCompType = function (desc, tabid) {
		var self = this;
		var rnode;
		var i;
		var table = '';
		var tableid = 'comp-type-table';
		table = self._el.find('#'+tableid);
		if (table.length>=1)
		{
			self.eraseContent(table);
			
		}
		else
		{
			
			table = self.addTable(tableid, "Parts List", tabid,1);
			//table=this._el.find('#'+tableid);
		}
		
		
		self.comptype = desc;
		var style ='';
		for(i=0; i!= self.comptype.length; i+=1)
		{
			if (i==0)
				rnode = self.createRow(1);
			else
			{
				var seprow = self.createSepRow(1);
				table.append(seprow);
				rnode = self.createRow(0, 1);
			}
			
			if (i==0)
				style ='h';
			else
				style = 'c';
			self.addCell(rnode,self.comptype[i],style);
			table.append(rnode);
		}
	};
	
	CoverageWidget.prototype.updateCompInfo = function (desc, tabid) {
		var self = this;
		var rnode;
		var i, j;
		var table = '';
		var tableid = 'comp-info-table';
		table = self._el.find('#'+tableid);
		if (table.length==0)
		{
			table = self.addTable(tableid, "Instance List", tabid);
			//table = self._el.find('#'+tableid);
		}
		else
		{
			self.eraseContent(table);
		}
		
		
		self.compinfo = desc;
		var rcounter =1;
		var style ='';
		for(i=0; i!= self.compinfo.length; i+=1)
		{
			if (i==0)
				rnode = self.createRow(1);
			else
			{
				if (self.compinfo[i][0].length >1)
				{
					var rsepnode = self.createSepRow(2);
					table.append(rsepnode);
					rcounter =1;
				}
				rnode = self.createRow(0, rcounter);
				rcounter +=1;
			}
			
			
			for(j=0; j!=self.compinfo[i].length; j+=1)
			{
				if (i==0)
					style ='h';
				else
				{
					style = 'c';
				}
				self.addCell(rnode,self.compinfo[i][j],style);
			}

			table.append(rnode);
		}
		
	};
	
	CoverageWidget.prototype.updateFnInfo = function (desc, tabid) {
		var self = this;
		var i, j;
		var table = '';
		var tableid = 'fn-info-table';
		table = self._el.find('#'+tableid);
		if  (table.length==0)
		{
			table = self.addTable(tableid,"Component - Functions", tabid);
			//table = self._el.find('#'+tableid);
		}
		else
		{
			self.eraseContent(table);
		}
		
		self.fninfo = desc;
		var rnode = self.createRow(1);
		self.addCell(rnode,"Component",'h');
		for(j=0; j!=self.fninfo[0].length; j+=1)
			self.addCell(rnode,self.fninfo[0][j],'h');
		table.append(rnode);
		
		for(i=1; i!= self.fninfo.length; i+=1)
		{
			var rsepnode = self.createSepRow(self.fninfo[0].length+1);
			table.append(rsepnode);
			rnode = self.createRow(0, 1);
			for(j=0; j!=self.fninfo[i].length; j+=1)
			{
				if (j!=0)
					self.addCell(rnode,self.fninfo[i][j],'X');
				else
					self.addCell(rnode,self.fninfo[i][j],'c');
			}
			table.append(rnode);
		}
		
	};
	
	CoverageWidget.prototype.updateCompCoverage = function (desc, tabid) {
		var self = this;
		var i, j;
		var rnode;
		var table = '';
		var tableid = 'comp-coverage-table';
		table = self._el.find('#'+tableid);
		if  (table.length==0)
		{
			table  = self.addTable(tableid, "Function Coverage", tabid);
			//table = self._el.find('#'+tableid);
		}
		else
		{
			self.eraseContent(table);
		}
		
		self.compcoverage = desc;
		
		var rowcounter = 1;
		for(i=0; i!= self.compcoverage.length; i+=1)
		{
			if (i==0)
				rnode = self.createRow(1);
			else
			{
				if (self.compcoverage[i][0].length > 1)
				{
					var rsepnode = self.createSepRow(2);
					table.append(rsepnode);
					rowcounter =1;
				}
						
				rnode = self.createRow(0, rowcounter);
				rowcounter +=1;
			}
			
			for(j=0; j!=self.compcoverage[i].length; j+=1)
			{
				var style='';
				if (i>0)
				{
					if (j==0)
						style ='fn'
					else
						style = 'c';
				}
				self.addCell(rnode,self.compcoverage[i][j], style);
			}
			table.append(rnode);
		}
		
	};
	CoverageWidget.prototype.updateFnCoverage = function (desc, tabid) {
		var self = this;
		var rnode;
		var i, j;
		var table = '';
		var tableid = 'fn-coverage-table';
		table = self._el.find('#'+tableid);
		if  (table.length==0)
		{
			table = self.addTable(tableid, "Component Coverage", tabid);
			//table = self._el.find('#'+tableid);
		}
		else
		{
			self.eraseContent(table);
		}
		
		
		self.fncoverage = desc;
		var rowcounter = 1;
		for(i=0; i!= self.fncoverage.length; i+=1)
		{
			if (i==0)
				rnode = self.createRow(1);
			else
			{
				rnode = self.createRow(0, i);
				if (self.fncoverage[i][0].length > 1)
				{
					var rsepnode = self.createSepRow(3);
					table.append(rsepnode);
					rowcounter =1;
				}
						
				rnode = self.createRow(0, rowcounter);
				rowcounter +=1;
				
			}
			
			for(j=0; j!=self.fncoverage[i].length; j+=1)
			{
				var style = '';
				if (i>0)
				{
					if (j==0)
						style ='c'
					if (j==1)
						style = 'fn';
				}
				
				self.addCell(rnode,self.fncoverage[i][j],style);
			}
			table.append(rnode);
		}
		
	};
	
	CoverageWidget.prototype.updateGSNCoverage = function (desc, tabid) {
		var self = this;
		
		var rnode;
		var i, j;
		var table = '';
		var tableid = 'gsn-coverage-table';
		table = self._el.find('#'+tableid);
		if  (table.length==0)
		{
			table = self.addTable(tableid, "GSN Coverage", tabid);
			//table = self._el.find('#'+tableid);
		}
		else
		{
			self.eraseContent(table);
		}
		
		
		self.gsncoverage = desc;
		
		self.idvs = [];
		self.idv1 = [];
		
		var rcounter = 0;
		var styles =['c','fm','ef','re','gsn'];
		var style = '';
		for(i=0; i!= self.gsncoverage.length; i+=1)
		{
			var values =self.gsncoverage[i].value; 
			
			if (i==0)
				rnode = self.createRow(1);
			else
			{
				if (values.length >0 && values[0].length >1)
				{
					var rsepnode = self.createSepRow(12);
					table.append(rsepnode);
					rcounter =1;
				}
				rnode = self.createRow(0, rcounter);
				rcounter +=1;
				
			}
			
			
			
			for(j=0; j!=values.length; j+=1)
			{
				style = '';
				if ((i>0) &&(j<styles.length))
					style = styles[j];
				self.addCell(rnode,values[j],style);
			}
			
			for(j=values.length; j!=self.gsncoverage[0].value.length; j+=1)
				self.addCell(rnode," ");
			
			if (i ==0)
			{
				self.addCell(rnode, "Action");
				self.addCell(rnode, "Assigned To");
				self.addCell(rnode, "Comment");
			}
			else{
				var idv = self.gsncoverage[i].id;
				
				if (idv != '')
				{
					rnode.id = idv;
					if (self.idvs.indexOf(idv) >-1)
					{
						self._logger.debug('********Duplicate id ' + idv);
					}
					self.idvs.push(idv);
					var idv1 = i.toString();
					self.idv1.push(i);
					//var idv1 = idv;
					
					
					self.addEditableCell(rnode, (self.gsncoverage[i].stat?self.gsncoverage[i].stat:''), i, idv1,'a');
					self.addEditableCell(rnode, (self.gsncoverage[i].assignedTo?self.gsncoverage[i].assignedTo:''), i, idv1,'u');
					self.addEditableCell(rnode, (self.gsncoverage[i].comment?self.gsncoverage[i].comment:''), i, idv1,'c');
				}
				else
				{
					self.addCell(rnode, '');
					self.addCell(rnode, '');
					self.addCell(rnode, '');
				}
				
				
				
			}
			
			
			
		
			table.append(rnode);
		}
		
		

		
	};
	
	CoverageWidget.prototype.setEditable = function () {
		var self = this, i=0;
		var idvs = self.idv1;
		
		
		for(i=0; i!= idvs.length; i+=1)
		{
		
			var idx = idvs[i];
			var x = idx.toString();
		
			var action  = self.gsncoverage[idx].stat;
			var actionIdx = self.actionValues.indexOf(action)+1;
			var assignedTo = self.gsncoverage[idx].assignedTo;
			var comment  = self.gsncoverage[idx].comment;
			
			
			
		 $('#u-'+x).editable({
			 type: 'text',
			 title: 'Username',
			 defaultValue: 'username',
			 emptytext:'-',
			 value: assignedTo,
			 success: function(response, newValue) {
				self._logger.debug("username = " +newValue);
				self.gsncoverage[this.id1].assignedTo = newValue;
				self.onEditGSNCoverage(self.nodeID,self.gsncoverage);
			 }
		 });
		 
		 $('#c-'+x).editable({
			 type: 'textarea',
			 title: 'Username',
			 defaultValue: 'comments',
			 emptytext:'-',
			 value: comment,
			 success: function(response, newValue) {
				self._logger.debug("username = " +newValue);
				self.gsncoverage[this.id1].comment = newValue;
				self.onEditGSNCoverage(self.nodeID,self.gsncoverage);
				
			 }
		 });
		 
		 		 
		 $('#a-'+x).editable({
				 type: 'select',
				 title: 'Action',
				 defaultValue: 'Needs Attention',
				 emptytext:'-',
				 value: actionIdx,
				 source: self.actionChoices,
				 success: function(response, newValue) {
					self._logger.debug("new action value = " +newValue);
					self.gsncoverage[this.id1].stat = self.actionValues[newValue-1];
					self.onEditGSNCoverage(self.nodeID,self.gsncoverage);
				 }
			 });
		}
		
	};

    // Adding/Removing/Updating items
    CoverageWidget.prototype.addNode = function (desc) {
		var self = this;
		var i=0;
		
        if (desc && desc.use == 1) {
			
			var added = self.addList(self.tablistids, self.tablistnames);
			
			if (added ==1)
			{
				self.tabcontent = document.createElement('div');
				self.tabcontent.className = 'tab-content'; 
				self.tabcontent.id = 'table-content';
				self._el.append(self.tabcontent);
			}
			
			self.nodeID = desc.id;
			
			self.updateCompType(desc.comptype, self.tablistids[0]);
			self.updateCompInfo(desc.compinfo, self.tablistids[1]);
			//self.updateFnInfo(desc.fninfo, self.tablistids[2]);
			self.updateCompCoverage(desc.compcoverage,self.tablistids[2]);
			self.updateFnCoverage(desc.fncoverage, self.tablistids[3]);
			self.updateGSNCoverage(desc.gsncoverage, self.tablistids[4]);
			self.setEditable();
			
			
			
           /* // Add node to a table of nodes
            var node = document.createElement('div');


            this.nodes[desc.id] = desc;
            node.innerHTML = 'Adding node "' + desc.name + '" (click to view). <br>'
			node.innerHTML +='CompType <br>';
			for(i=0; i!= desc.comptype.length; i+=1)
			{
				if (desc.comptype[i].length ==1)
				{
					node.innerHTML += desc.comptype[i][0]+' <br>';
				}
				else
				{
					node.innerHTML += '<a href=\"'+desc.comptype[i][1]+'\">'+desc.comptype[i][0]+'</a><br>';
				}
			}

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);*/
        }
    };

    CoverageWidget.prototype.removeNode = function (gmeId) {
        delete this.nodes;
		this.nodes = {};
    };

    CoverageWidget.prototype.updateNode = function (desc) {
		var self = this;
        if (desc) {
			self._logger.debug('update node called');
			// if (desc.comptype != self.comptype)
			// {
				// self.updateCompType(desc.comptype, self.tablistids[0]);
			// }
			// if (desc.compinfo != self.compinfo)
			// {
				// self.updateCompInfo(desc.compinfo, self.tablistids[1]);
			// }
			// if (desc.fninfo != self.fninfo)
			// {
				// self.updateFnInfo(desc.fninfo, self.tablistids[2]);
			// }
			// if (desc.compcoverage != self.compcoverage)
			// {
				// self.updateCompCoverage(desc.compcoverage,self.tablistids[3]);
			// }
			// if (desc.fncoverage != self.fncoverage)
			// {
				// self.updateFnCoverage(desc.fncoverage, self.tablistids[4]);
			// }
			// if (desc.gsncoverage != self.gsncoverage)
			// {
				// self.updateGSNCoverage(desc.gsncoverage, self.tablistids[5]);
			// }
            
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    CoverageWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    CoverageWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    CoverageWidget.prototype.destroy = function () {
    };

    CoverageWidget.prototype.onActivate = function () {
        //this._logger.debug('CoverageWidget has been activated');
    };

    CoverageWidget.prototype.onDeactivate = function () {
        //this._logger.debug('CoverageWidget has been deactivated');
    };

    return CoverageWidget;
});
