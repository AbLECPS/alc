/**
 * generated by Xtext 2.25.0
 */
package edu.vanderbilt.isis.alc.btree.tests;

import com.google.inject.Inject;
import edu.vanderbilt.isis.alc.btree.bTree.BehaviorModel;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(BTreeInjectorProvider.class)
@SuppressWarnings("all")
public class BTreeParsingTest {
  @Inject
  private ParseHelper<BehaviorModel> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system BlueROV;  //system name");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.append("//basic types ");
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.newLine();
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("type bool;");
      _builder.newLine();
      _builder.append("type integer;");
      _builder.newLine();
      _builder.append("type float;");
      _builder.newLine();
      _builder.append("type float32;");
      _builder.newLine();
      _builder.append("type float64;");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.append("//message types");
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.append("message Bool std_msgs");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("bool value;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("message Float32 std_msgs");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float value;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("message String std_msgs");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("string value;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("message PixhawkHW vandy_bluerov");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float64 thrusters_power;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float64 batt_capacity_remaining;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float64 batt_voltage_remaining;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float64 batt_charge_remaining;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float32[] rpm;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("message AssuranceMonitorConfidence ng_msgs");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float32 confidence_level;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float32[] values;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("message HSDCommand ng_msgs");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float64 heading;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float64 speed;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("float64 depth;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("message LEC1OutputAssuredStamped ng_msgs");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("AssuranceMonitorConfidence[] confs;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("HSDCommand cmd;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("float64 current_heading;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("message Float32MultiArray std_msgs");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("float32[] data;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.append("//topics");
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.newLine();
      _builder.append("topic PixhawkHW pixhawk_hw \"/iver0/pixhawk_hw\";");
      _builder.newLine();
      _builder.append("topic LEC1OutputAssuredStamped lec_dd_am \"/lec_dd_am/p_value\";");
      _builder.newLine();
      _builder.append("topic Bool bb_geofence \"/iver0/bb_geofence\";");
      _builder.newLine();
      _builder.append("topic Bool bb_pipelost \"/iver0/bb_pipe_lost\";");
      _builder.newLine();
      _builder.append("topic Float32 bb_home_dist \"/iver0/bb_home_dist\";");
      _builder.newLine();
      _builder.append("topic LEC1OutputAssuredStamped lec2_left_am \"/lec2_am/left/p_value\";");
      _builder.newLine();
      _builder.append("topic LEC1OutputAssuredStamped lec2_right_am \"/lec2_am/right/p_value\"; ");
      _builder.newLine();
      _builder.append("topic String bb_mission \"/bb_mission\";");
      _builder.newLine();
      _builder.append("topic Bool bb_rth \"/iver0/bb_rth\";");
      _builder.newLine();
      _builder.append("topic Bool bb_sensor_failure \"/iver0/sensor_failure_rpm\";");
      _builder.newLine();
      _builder.append("topic Bool bb_waypoints_completed \"/iver0/waypoints_completed\";");
      _builder.newLine();
      _builder.append("topic HSDCommand hsd_pipeline_mapping \"/iver0/hsd_pipeline_mapping\";");
      _builder.newLine();
      _builder.append("topic HSDCommand hsd_to_surface \"/iver0/hsd_to_surface\";");
      _builder.newLine();
      _builder.append("topic HSDCommand hsd_to_rth \"/iver0/hsd_to_rth\";");
      _builder.newLine();
      _builder.append("topic HSDCommand hsd_to_waypoint \"/iver0/hsd_to_waypoint\";");
      _builder.newLine();
      _builder.append("topic HSDCommand hsd_obstacle_avoidance \"/iver0/hsd_obstacle_avoidance\";");
      _builder.newLine();
      _builder.append("topic HSDCommand hsd_command \"/iver0/hsd_command\";");
      _builder.newLine();
      _builder.append("topic String cm_hsd_input \"/iver0/cm_hsd_input\";");
      _builder.newLine();
      _builder.append("topic Float32MultiArray degradation_detector \"/iver0/degradation_detector\";");
      _builder.newLine();
      _builder.append("topic Float32MultiArray degradation_detector_am \"/iver0/degradation_detector_am/p_value\";");
      _builder.newLine();
      _builder.append("topic Float32MultiArray lec_input \"/iver0/thruster_cmd_logging\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.append("//Blackboard variables");
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.newLine();
      _builder.append("var PixhawkHW battery;");
      _builder.newLine();
      _builder.append("var LEC1OutputAssuredStamped lec_dd_am;");
      _builder.newLine();
      _builder.append("var Bool bb_geofence = \"False\";");
      _builder.newLine();
      _builder.append("var Bool bb_pipelost = \"False\";");
      _builder.newLine();
      _builder.append("var Float32 bb_home_dist = 1000; ");
      _builder.newLine();
      _builder.append("var LEC1OutputAssuredStamped lec2_am_l;");
      _builder.newLine();
      _builder.append("var LEC1OutputAssuredStamped lec2_am_r;");
      _builder.newLine();
      _builder.append("var String bb_mission = \"\";");
      _builder.newLine();
      _builder.append("var Bool bb_rth = \"False\";");
      _builder.newLine();
      _builder.append("var Bool bb_sensor_failure = \"False\";");
      _builder.newLine();
      _builder.append("var Bool bb_waypoints_completed = \"False\";");
      _builder.newLine();
      _builder.append("var HSDCommand bb_HSD_out;");
      _builder.newLine();
      _builder.append("var Bool bb_pipe_mapping_enable = \"False\";");
      _builder.newLine();
      _builder.append("var bool bb_obstacle_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool event_reallocate_button = \"False\";");
      _builder.newLine();
      _builder.append("var Float32MultiArray dd_output;");
      _builder.newLine();
      _builder.append("var Float32MultiArray lec_input;");
      _builder.newLine();
      _builder.append("var bool battery_low_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool lec_dd_am_warning = \"False\" ;");
      _builder.newLine();
      _builder.append("var bool dd_z_axis_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool bb_rth_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool bb_rth_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool bb_geofence_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool lec2_am_l_speed_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool lec2_am_l_pipe_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool lec2_am_r_speed_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool lec2_am_r_pipe_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool bb_pipe_lost_warning =\"False\";");
      _builder.newLine();
      _builder.append("var bool bb_sensor_failure_warning =\"False\";");
      _builder.newLine();
      _builder.append("var bool bb_home_reached =\"False\";");
      _builder.newLine();
      _builder.append("var bool dd_z_axis_warning = \"False\";");
      _builder.newLine();
      _builder.append("var bool dd_xy_axis_degradation = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.append("//Blackboard nodes");
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.newLine();
      _builder.append("input battery2bb pixhawk_hw -> battery ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool battery_low_warning = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float failsafe_battery_low_threshold=0.1;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment  \"This node captures the state of the battery\"");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("input ddlecam2bb lec_dd_am -> lec_dd_am");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool lec_dd_am_warning = \"False\" ;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float dd_threshold = 5.0 ;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment  \"This node captures the state of the lec dd assurance monitor\"");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("input rth2bb bb_rth -> bb_rth");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool bb_rth_warning = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg bool failsafe_rth_enable =\"True\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment  \"This node captures if the uuv is commanded to return to home\"");
      _builder.newLine();
      _builder.append("end ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("input geofence2bb bb_geofence -> bb_geofence");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool bb_geofence_warning = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment  \"This node captures if the uuv is within  the geofence\"");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("input lec2_am_l_2bb  lec2_left_am -> lec2_am_l");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool lec2_am_l_speed_warning = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool lec2_am_l_pipe_warning = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float pipe_estimation_good_log_val = 5.0;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float speed_good_log_val  = 2.5;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment  \"This node captures the output of the lec2 assurance monitor left\"");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("input lec2_am_r_2bb lec2_right_am -> lec2_am_r");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool lec2_am_r_speed_warning = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool lec2_am_r_pipe_warning = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float pipe_estimation_good_log_val =5.0;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float speed_good_log_val =2.5;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment  \"This node captures the output of the lec2 assurance monitor right\"");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("input pipe_lost2bb bb_pipelost -> bb_pipelost");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool bb_pipe_lost_warning =\"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment  \"This node captures if the pipe is not in visibility of UUV\"");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("input sensor_failure2bb  bb_sensor_failure -> bb_sensor_failure");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool bb_sensor_failure_warning =\"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment  \"This node captures sensor failure\"");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("input waypoints_completed2bb  bb_waypoints_completed -> bb_waypoints_completed");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment \"This node captures if the waypoints are completed\"");
      _builder.newLine();
      _builder.append("end ");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("input home2bb bb_home_dist -> bb_home_dist");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool bb_home_reached =\"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float home_reached_threshold =15;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment \"This node captures if the uuv is home\" ");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("input mission2bb bb_mission -> bb_mission");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg bool enable_waypoint_following = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment  \"This node captures the current mission\"");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("input ddlec2bb degradation_detector -> dd_output ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool dd_z_axis_warning = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var bool dd_xy_axis_degradation = \"False\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float decision_threshold = 0.7;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float total_degradation_threshold=0.0;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg integer num_classes=22;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("comment  \"This node captures the output of the DD LEC\"");
      _builder.newLine();
      _builder.append("end   ");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.append("//checkers for blackboard variables");
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//check is_reallocation_requested ");
      _builder.newLine();
      _builder.append("//        event_reallocate_button==\"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("check is_reallocation_requested ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("dd_xy_axis_degradation==\"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_dd_am ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("lec_dd_am_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_lec2am_ls ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("lec2_am_l_speed_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_lec2am_rs ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("lec2_am_r_speed_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_lec2am_lp ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("lec2_am_l_pipe_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_lec2am_rp ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("lec2_am_r_pipe_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_geofence ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("bb_geofence_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_rth ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("bb_rth_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_surface ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("bb_home_reached ==\"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_pipe_post ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("bb_pipe_lost_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_waypoints_completed ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("bb_waypoints_completed == \"True\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check check_sensor_failure ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("bb_sensor_failure_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check battery_low_fs ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("battery_low_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("check is_track_pipe_mission_requested ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("bb_mission  == \"pipe_track\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("check is_waypoint_requested ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("bb_mission  == \"waypoint\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("check is_snr_requested ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("bb_mission  == \"fdr\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("check dd_z_axis");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("dd_z_axis_warning == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("check dd_xy_axis");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("dd_xy_axis_degradation == \"False\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.append("//standard behavioral nodes");
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.newLine();
      _builder.append("success success_node;");
      _builder.newLine();
      _builder.append("failure failure_node;");
      _builder.newLine();
      _builder.append("running running_node;");
      _builder.newLine();
      _builder.append("running idle;");
      _builder.newLine();
      _builder.append("//running reallocate_task;");
      _builder.newLine();
      _builder.append("//running  dd_lec_task; ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.append("//custom behavioral nodes");
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task surface_task");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("in hsd_to_surface hsd_to_surface_;");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("out cm_hsd_input cm_hsd_input_;");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("var HSDCommand HSD_out;");
      _builder.newLine();
      _builder.append("end     ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task  rth_task ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("in  hsd_to_rth hsd_to_rth_;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("out cm_hsd_input cm_hsd_input_;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var HSDCommand HSD_out;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task  loiter_task ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("in hsd_pipeline_mapping  hsd_pipeline_mapping_;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("out cm_hsd_input  cm_hsd_input_;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var HSDCommand HSD_out ;");
      _builder.newLine();
      _builder.append("end    ");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("task obstacle_avoidance");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("in hsd_obstacle_avoidance hsd_obstacle_avoidance_;");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("out hsd_command hsd_pub;");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("var HSDCommand HSD_out;");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("var bool bb_obstacle_warning = \"False\" ;");
      _builder.newLine();
      _builder.append("end     ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task  speed_max_task ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var HSDCommand HSD_out;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float uuv_max_speed=0.9;");
      _builder.newLine();
      _builder.append("end    ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task  speed_min_task ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var HSDCommand HSD_out;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float uuv_min_speed=0.4;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task  pipe_mapping_enable_task ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var Bool pipe_mapping_enable;");
      _builder.newLine();
      _builder.append("end    ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task  pipe_mapping_disable_task ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var Bool pipe_mapping_enable;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task  tracking_task ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("in hsd_pipeline_mapping  hsd_pipeline_mapping_;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("out cm_hsd_input cm_hsd_input_;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var HSDCommand HSD_out ;");
      _builder.newLine();
      _builder.append("end    ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task  waypoint_task ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("in hsd_to_waypoint hsd_waypoint_, bb_waypoints_completed hsd_waypoint_completed_;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("out cm_hsd_input cm_hsd_input_;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var HSDCommand HSD_out ;");
      _builder.newLine();
      _builder.append("end   ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task  reallocate_task ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("var float total_degradation=0;");
      _builder.newLine();
      _builder.append("end   ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task dd_lec_task");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("in lec_input lec_input_;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("out degradation_detector degradation_detector_, degradation_detector_am degradation_detector_am_;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float[] normalizer=[1000, 1000, 1000, 1000, 1000, 1000, 6000, 6000, 6000, 6000, 6000, 6000, 30]; //why not working?");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg float threshold=0.7;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg integer num_classes=22;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("arg integer ann_input_len=13;");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.append("//tree definition");
      _builder.newLine();
      _builder.append("//-----------------------------------");
      _builder.newLine();
      _builder.newLine();
      _builder.append("tree(updatetime=500.0,timeout=15.0)");
      _builder.newLine();
      _builder.append("par BlueROV {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("par topics2bb {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("mon battery2bb, rth2bb, geofence2bb");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("mon lec2_am_r_2bb, lec2_am_l_2bb, pipe_lost2bb");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("mon sensor_failure2bb, waypoints_completed2bb");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("mon mission2bb, ddlec2bb");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("sel dd_tasks {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("do reallocate_check {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if is_reallocation_requested");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("exec reallocate_task");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("exec dd_lec_task");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("exec obstacle_avoidance");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("sel priorities {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("do battery_check {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if battery_low_fs ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("exec surface_task");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("do sensor_failure_selector {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if check_sensor_failure");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("exec surface_task");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("do home_reached_selector  {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if check_surface  ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("exec surface_task ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("do rth_selector  {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if check_rth  ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("par rth_par {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("exec rth_task  ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("mon home2bb");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("do geofence_selector  {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if check_geofence  ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("par rth_par {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("exec rth_task  ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("mon home2bb");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("do pipe_lost_selector  {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if check_pipe_post  ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("exec loiter_task");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("seq track_pipe_mission  {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("chk is_track_pipe_mission_requested");
      _builder.newLine();
      _builder.append("\t        ");
      _builder.append("par tracking  {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("exec tracking_task  ");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("sel lec2am_speed_cmd {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("do lec2am_l_speed_check {");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("if check_lec2am_ls");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("exec speed_min_task ");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("} ");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("do lec2am_r_speed_check  {");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("if check_lec2am_rs  ");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("exec speed_min_task");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("exec speed_max_task ");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("sel lec2am_mapping_cmd {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("do lec2am_l_mapping_check  {");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("if check_lec2am_lp  ");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("exec pipe_mapping_disable_task");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("do lec2am_r_mapping_check  {");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("if check_lec2am_rp  ");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("then {");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("exec pipe_mapping_disable_task");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("exec pipe_mapping_enable_task");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("seq track_pipe_mission_end {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("timer evaluate(0.5)");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("seq waypoint_mission  {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("chk is_waypoint_requested ");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("sel waypoint_selector {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("sel waypoints_condition(failure)  {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("do waypoints_sif {");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("if check_waypoints_completed");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("then { ");
      _builder.newLine();
      _builder.append("                            ");
      _builder.append("exec waypoint_task");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("seq waypoint_end {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("exec loiter_task");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("exec running_node");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("exec idle");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//-------done------------------");
      _builder.newLine();
      final BehaviorModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
