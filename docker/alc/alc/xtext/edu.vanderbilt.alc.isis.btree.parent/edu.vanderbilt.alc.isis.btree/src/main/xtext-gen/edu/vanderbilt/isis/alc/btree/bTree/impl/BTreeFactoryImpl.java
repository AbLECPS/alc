/**
 * generated by Xtext 2.25.0
 */
package edu.vanderbilt.isis.alc.btree.bTree.impl;

import edu.vanderbilt.isis.alc.btree.bTree.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BTreeFactoryImpl extends EFactoryImpl implements BTreeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BTreeFactory init()
  {
    try
    {
      BTreeFactory theBTreeFactory = (BTreeFactory)EPackage.Registry.INSTANCE.getEFactory(BTreePackage.eNS_URI);
      if (theBTreeFactory != null)
      {
        return theBTreeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BTreeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BTreeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BTreePackage.BEHAVIOR_MODEL: return createBehaviorModel();
      case BTreePackage.SIMPLE_TYPE: return createSimpleType();
      case BTreePackage.MESSAGE_TYPE: return createMessageType();
      case BTreePackage.TYPE: return createType();
      case BTreePackage.FIELD: return createField();
      case BTreePackage.TOPIC: return createTopic();
      case BTreePackage.BB_VAR: return createBBVar();
      case BTreePackage.BB_EVENT: return createBBEvent();
      case BTreePackage.ARG: return createArg();
      case BTreePackage.DEFAULT_TYPE: return createDefaultType();
      case BTreePackage.BASE_ARRAY_TYPE: return createBaseArrayType();
      case BTreePackage.BB_NODE: return createBBNode();
      case BTreePackage.CHECK_NODE: return createCheckNode();
      case BTreePackage.BEHAVIOR_NODE: return createBehaviorNode();
      case BTreePackage.STD_BEHAVIOR_NODE: return createStdBehaviorNode();
      case BTreePackage.TASK_NODE: return createTaskNode();
      case BTreePackage.TOPIC_ARG: return createTopicArg();
      case BTreePackage.BTREE: return createBTree();
      case BTreePackage.BTREE_NODE: return createBTreeNode();
      case BTreePackage.CHILD_NODE: return createChildNode();
      case BTreePackage.PAR_BT_NODE: return createParBTNode();
      case BTreePackage.SEQ_BT_NODE: return createSeqBTNode();
      case BTreePackage.SEL_BT_NODE: return createSelBTNode();
      case BTreePackage.SIFBT_NODE: return createSIFBTNode();
      case BTreePackage.MON_BT_NODE: return createMonBTNode();
      case BTreePackage.TASK_BT_NODE: return createTaskBTNode();
      case BTreePackage.TIMER_BT_NODE: return createTimerBTNode();
      case BTreePackage.CHECK_BT_NODE: return createCheckBTNode();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorModel createBehaviorModel()
  {
    BehaviorModelImpl behaviorModel = new BehaviorModelImpl();
    return behaviorModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleType createSimpleType()
  {
    SimpleTypeImpl simpleType = new SimpleTypeImpl();
    return simpleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageType createMessageType()
  {
    MessageTypeImpl messageType = new MessageTypeImpl();
    return messageType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Topic createTopic()
  {
    TopicImpl topic = new TopicImpl();
    return topic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BBVar createBBVar()
  {
    BBVarImpl bbVar = new BBVarImpl();
    return bbVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BBEvent createBBEvent()
  {
    BBEventImpl bbEvent = new BBEventImpl();
    return bbEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arg createArg()
  {
    ArgImpl arg = new ArgImpl();
    return arg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefaultType createDefaultType()
  {
    DefaultTypeImpl defaultType = new DefaultTypeImpl();
    return defaultType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BaseArrayType createBaseArrayType()
  {
    BaseArrayTypeImpl baseArrayType = new BaseArrayTypeImpl();
    return baseArrayType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BBNode createBBNode()
  {
    BBNodeImpl bbNode = new BBNodeImpl();
    return bbNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckNode createCheckNode()
  {
    CheckNodeImpl checkNode = new CheckNodeImpl();
    return checkNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorNode createBehaviorNode()
  {
    BehaviorNodeImpl behaviorNode = new BehaviorNodeImpl();
    return behaviorNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StdBehaviorNode createStdBehaviorNode()
  {
    StdBehaviorNodeImpl stdBehaviorNode = new StdBehaviorNodeImpl();
    return stdBehaviorNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskNode createTaskNode()
  {
    TaskNodeImpl taskNode = new TaskNodeImpl();
    return taskNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TopicArg createTopicArg()
  {
    TopicArgImpl topicArg = new TopicArgImpl();
    return topicArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BTree createBTree()
  {
    BTreeImpl bTree = new BTreeImpl();
    return bTree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BTreeNode createBTreeNode()
  {
    BTreeNodeImpl bTreeNode = new BTreeNodeImpl();
    return bTreeNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChildNode createChildNode()
  {
    ChildNodeImpl childNode = new ChildNodeImpl();
    return childNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParBTNode createParBTNode()
  {
    ParBTNodeImpl parBTNode = new ParBTNodeImpl();
    return parBTNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SeqBTNode createSeqBTNode()
  {
    SeqBTNodeImpl seqBTNode = new SeqBTNodeImpl();
    return seqBTNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelBTNode createSelBTNode()
  {
    SelBTNodeImpl selBTNode = new SelBTNodeImpl();
    return selBTNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SIFBTNode createSIFBTNode()
  {
    SIFBTNodeImpl sifbtNode = new SIFBTNodeImpl();
    return sifbtNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MonBTNode createMonBTNode()
  {
    MonBTNodeImpl monBTNode = new MonBTNodeImpl();
    return monBTNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskBTNode createTaskBTNode()
  {
    TaskBTNodeImpl taskBTNode = new TaskBTNodeImpl();
    return taskBTNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimerBTNode createTimerBTNode()
  {
    TimerBTNodeImpl timerBTNode = new TimerBTNodeImpl();
    return timerBTNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckBTNode createCheckBTNode()
  {
    CheckBTNodeImpl checkBTNode = new CheckBTNodeImpl();
    return checkBTNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BTreePackage getBTreePackage()
  {
    return (BTreePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BTreePackage getPackage()
  {
    return BTreePackage.eINSTANCE;
  }

} //BTreeFactoryImpl
