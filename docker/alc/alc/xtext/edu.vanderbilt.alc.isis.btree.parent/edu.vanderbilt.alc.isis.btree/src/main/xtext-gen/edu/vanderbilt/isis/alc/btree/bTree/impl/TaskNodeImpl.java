/**
 * generated by Xtext 2.25.0
 */
package edu.vanderbilt.isis.alc.btree.bTree.impl;

import edu.vanderbilt.isis.alc.btree.bTree.Arg;
import edu.vanderbilt.isis.alc.btree.bTree.BBVar;
import edu.vanderbilt.isis.alc.btree.bTree.BTreePackage;
import edu.vanderbilt.isis.alc.btree.bTree.TaskNode;
import edu.vanderbilt.isis.alc.btree.bTree.TopicArg;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.TaskNodeImpl#getInput_topics <em>Input topics</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.TaskNodeImpl#getOutput_topics <em>Output topics</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.TaskNodeImpl#getBb_vars <em>Bb vars</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.TaskNodeImpl#getArgs <em>Args</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.TaskNodeImpl#getComment <em>Comment</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskNodeImpl extends BehaviorNodeImpl implements TaskNode
{
  /**
   * The cached value of the '{@link #getInput_topics() <em>Input topics</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInput_topics()
   * @generated
   * @ordered
   */
  protected EList<TopicArg> input_topics;

  /**
   * The cached value of the '{@link #getOutput_topics() <em>Output topics</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutput_topics()
   * @generated
   * @ordered
   */
  protected EList<TopicArg> output_topics;

  /**
   * The cached value of the '{@link #getBb_vars() <em>Bb vars</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBb_vars()
   * @generated
   * @ordered
   */
  protected EList<BBVar> bb_vars;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<Arg> args;

  /**
   * The default value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected static final String COMMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected String comment = COMMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskNodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BTreePackage.Literals.TASK_NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TopicArg> getInput_topics()
  {
    if (input_topics == null)
    {
      input_topics = new EObjectContainmentEList<TopicArg>(TopicArg.class, this, BTreePackage.TASK_NODE__INPUT_TOPICS);
    }
    return input_topics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TopicArg> getOutput_topics()
  {
    if (output_topics == null)
    {
      output_topics = new EObjectContainmentEList<TopicArg>(TopicArg.class, this, BTreePackage.TASK_NODE__OUTPUT_TOPICS);
    }
    return output_topics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BBVar> getBb_vars()
  {
    if (bb_vars == null)
    {
      bb_vars = new EObjectContainmentEList<BBVar>(BBVar.class, this, BTreePackage.TASK_NODE__BB_VARS);
    }
    return bb_vars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Arg> getArgs()
  {
    if (args == null)
    {
      args = new EObjectContainmentEList<Arg>(Arg.class, this, BTreePackage.TASK_NODE__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(String newComment)
  {
    String oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BTreePackage.TASK_NODE__COMMENT, oldComment, comment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BTreePackage.TASK_NODE__INPUT_TOPICS:
        return ((InternalEList<?>)getInput_topics()).basicRemove(otherEnd, msgs);
      case BTreePackage.TASK_NODE__OUTPUT_TOPICS:
        return ((InternalEList<?>)getOutput_topics()).basicRemove(otherEnd, msgs);
      case BTreePackage.TASK_NODE__BB_VARS:
        return ((InternalEList<?>)getBb_vars()).basicRemove(otherEnd, msgs);
      case BTreePackage.TASK_NODE__ARGS:
        return ((InternalEList<?>)getArgs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BTreePackage.TASK_NODE__INPUT_TOPICS:
        return getInput_topics();
      case BTreePackage.TASK_NODE__OUTPUT_TOPICS:
        return getOutput_topics();
      case BTreePackage.TASK_NODE__BB_VARS:
        return getBb_vars();
      case BTreePackage.TASK_NODE__ARGS:
        return getArgs();
      case BTreePackage.TASK_NODE__COMMENT:
        return getComment();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BTreePackage.TASK_NODE__INPUT_TOPICS:
        getInput_topics().clear();
        getInput_topics().addAll((Collection<? extends TopicArg>)newValue);
        return;
      case BTreePackage.TASK_NODE__OUTPUT_TOPICS:
        getOutput_topics().clear();
        getOutput_topics().addAll((Collection<? extends TopicArg>)newValue);
        return;
      case BTreePackage.TASK_NODE__BB_VARS:
        getBb_vars().clear();
        getBb_vars().addAll((Collection<? extends BBVar>)newValue);
        return;
      case BTreePackage.TASK_NODE__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends Arg>)newValue);
        return;
      case BTreePackage.TASK_NODE__COMMENT:
        setComment((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BTreePackage.TASK_NODE__INPUT_TOPICS:
        getInput_topics().clear();
        return;
      case BTreePackage.TASK_NODE__OUTPUT_TOPICS:
        getOutput_topics().clear();
        return;
      case BTreePackage.TASK_NODE__BB_VARS:
        getBb_vars().clear();
        return;
      case BTreePackage.TASK_NODE__ARGS:
        getArgs().clear();
        return;
      case BTreePackage.TASK_NODE__COMMENT:
        setComment(COMMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BTreePackage.TASK_NODE__INPUT_TOPICS:
        return input_topics != null && !input_topics.isEmpty();
      case BTreePackage.TASK_NODE__OUTPUT_TOPICS:
        return output_topics != null && !output_topics.isEmpty();
      case BTreePackage.TASK_NODE__BB_VARS:
        return bb_vars != null && !bb_vars.isEmpty();
      case BTreePackage.TASK_NODE__ARGS:
        return args != null && !args.isEmpty();
      case BTreePackage.TASK_NODE__COMMENT:
        return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (comment: ");
    result.append(comment);
    result.append(')');
    return result.toString();
  }

} //TaskNodeImpl
