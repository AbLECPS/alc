/**
 * generated by Xtext 2.25.0
 */
package edu.vanderbilt.isis.alc.btree.bTree.util;

import edu.vanderbilt.isis.alc.btree.bTree.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see edu.vanderbilt.isis.alc.btree.bTree.BTreePackage
 * @generated
 */
public class BTreeAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BTreePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BTreeAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BTreePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BTreeSwitch<Adapter> modelSwitch =
    new BTreeSwitch<Adapter>()
    {
      @Override
      public Adapter caseBehaviorModel(BehaviorModel object)
      {
        return createBehaviorModelAdapter();
      }
      @Override
      public Adapter caseSimpleType(SimpleType object)
      {
        return createSimpleTypeAdapter();
      }
      @Override
      public Adapter caseMessageType(MessageType object)
      {
        return createMessageTypeAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseTopic(Topic object)
      {
        return createTopicAdapter();
      }
      @Override
      public Adapter caseBBVar(BBVar object)
      {
        return createBBVarAdapter();
      }
      @Override
      public Adapter caseBBEvent(BBEvent object)
      {
        return createBBEventAdapter();
      }
      @Override
      public Adapter caseArg(Arg object)
      {
        return createArgAdapter();
      }
      @Override
      public Adapter caseDefaultType(DefaultType object)
      {
        return createDefaultTypeAdapter();
      }
      @Override
      public Adapter caseBaseArrayType(BaseArrayType object)
      {
        return createBaseArrayTypeAdapter();
      }
      @Override
      public Adapter caseBBNode(BBNode object)
      {
        return createBBNodeAdapter();
      }
      @Override
      public Adapter caseCheckNode(CheckNode object)
      {
        return createCheckNodeAdapter();
      }
      @Override
      public Adapter caseBehaviorNode(BehaviorNode object)
      {
        return createBehaviorNodeAdapter();
      }
      @Override
      public Adapter caseStdBehaviorNode(StdBehaviorNode object)
      {
        return createStdBehaviorNodeAdapter();
      }
      @Override
      public Adapter caseTaskNode(TaskNode object)
      {
        return createTaskNodeAdapter();
      }
      @Override
      public Adapter caseTopicArg(TopicArg object)
      {
        return createTopicArgAdapter();
      }
      @Override
      public Adapter caseBTree(BTree object)
      {
        return createBTreeAdapter();
      }
      @Override
      public Adapter caseBTreeNode(BTreeNode object)
      {
        return createBTreeNodeAdapter();
      }
      @Override
      public Adapter caseChildNode(ChildNode object)
      {
        return createChildNodeAdapter();
      }
      @Override
      public Adapter caseParBTNode(ParBTNode object)
      {
        return createParBTNodeAdapter();
      }
      @Override
      public Adapter caseSeqBTNode(SeqBTNode object)
      {
        return createSeqBTNodeAdapter();
      }
      @Override
      public Adapter caseSelBTNode(SelBTNode object)
      {
        return createSelBTNodeAdapter();
      }
      @Override
      public Adapter caseSIFBTNode(SIFBTNode object)
      {
        return createSIFBTNodeAdapter();
      }
      @Override
      public Adapter caseMonBTNode(MonBTNode object)
      {
        return createMonBTNodeAdapter();
      }
      @Override
      public Adapter caseTaskBTNode(TaskBTNode object)
      {
        return createTaskBTNodeAdapter();
      }
      @Override
      public Adapter caseTimerBTNode(TimerBTNode object)
      {
        return createTimerBTNodeAdapter();
      }
      @Override
      public Adapter caseCheckBTNode(CheckBTNode object)
      {
        return createCheckBTNodeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.BehaviorModel <em>Behavior Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.BehaviorModel
   * @generated
   */
  public Adapter createBehaviorModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.SimpleType <em>Simple Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.SimpleType
   * @generated
   */
  public Adapter createSimpleTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.MessageType <em>Message Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.MessageType
   * @generated
   */
  public Adapter createMessageTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.Topic <em>Topic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.Topic
   * @generated
   */
  public Adapter createTopicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.BBVar <em>BB Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.BBVar
   * @generated
   */
  public Adapter createBBVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.BBEvent <em>BB Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.BBEvent
   * @generated
   */
  public Adapter createBBEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.Arg <em>Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.Arg
   * @generated
   */
  public Adapter createArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.DefaultType <em>Default Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.DefaultType
   * @generated
   */
  public Adapter createDefaultTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.BaseArrayType <em>Base Array Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.BaseArrayType
   * @generated
   */
  public Adapter createBaseArrayTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.BBNode <em>BB Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.BBNode
   * @generated
   */
  public Adapter createBBNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.CheckNode <em>Check Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.CheckNode
   * @generated
   */
  public Adapter createCheckNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.BehaviorNode <em>Behavior Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.BehaviorNode
   * @generated
   */
  public Adapter createBehaviorNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.StdBehaviorNode <em>Std Behavior Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.StdBehaviorNode
   * @generated
   */
  public Adapter createStdBehaviorNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.TaskNode <em>Task Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.TaskNode
   * @generated
   */
  public Adapter createTaskNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.TopicArg <em>Topic Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.TopicArg
   * @generated
   */
  public Adapter createTopicArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.BTree <em>BTree</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.BTree
   * @generated
   */
  public Adapter createBTreeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.BTreeNode <em>Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.BTreeNode
   * @generated
   */
  public Adapter createBTreeNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.ChildNode <em>Child Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.ChildNode
   * @generated
   */
  public Adapter createChildNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.ParBTNode <em>Par BT Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.ParBTNode
   * @generated
   */
  public Adapter createParBTNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.SeqBTNode <em>Seq BT Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.SeqBTNode
   * @generated
   */
  public Adapter createSeqBTNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.SelBTNode <em>Sel BT Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.SelBTNode
   * @generated
   */
  public Adapter createSelBTNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.SIFBTNode <em>SIFBT Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.SIFBTNode
   * @generated
   */
  public Adapter createSIFBTNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.MonBTNode <em>Mon BT Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.MonBTNode
   * @generated
   */
  public Adapter createMonBTNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.TaskBTNode <em>Task BT Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.TaskBTNode
   * @generated
   */
  public Adapter createTaskBTNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.TimerBTNode <em>Timer BT Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.TimerBTNode
   * @generated
   */
  public Adapter createTimerBTNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.isis.alc.btree.bTree.CheckBTNode <em>Check BT Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.isis.alc.btree.bTree.CheckBTNode
   * @generated
   */
  public Adapter createCheckBTNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BTreeAdapterFactory
