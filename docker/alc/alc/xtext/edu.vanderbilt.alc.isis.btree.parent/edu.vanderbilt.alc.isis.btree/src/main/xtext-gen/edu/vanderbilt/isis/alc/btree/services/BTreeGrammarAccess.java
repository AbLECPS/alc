/*
 * generated by Xtext 2.25.0
 */
package edu.vanderbilt.isis.alc.btree.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BTreeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BehaviorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.BehaviorModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSimpleTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSimpleTypesSimpleTypeParserRuleCall_3_0 = (RuleCall)cSimpleTypesAssignment_3.eContents().get(0);
		private final Assignment cMessageTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMessageTypesMessageTypeParserRuleCall_4_0 = (RuleCall)cMessageTypesAssignment_4.eContents().get(0);
		private final Assignment cRosTopicsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRosTopicsTopicParserRuleCall_5_0 = (RuleCall)cRosTopicsAssignment_5.eContents().get(0);
		private final Assignment cBbVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBbVariablesBBVarParserRuleCall_6_0 = (RuleCall)cBbVariablesAssignment_6.eContents().get(0);
		private final Assignment cBbEventsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBbEventsBBEventParserRuleCall_7_0 = (RuleCall)cBbEventsAssignment_7.eContents().get(0);
		private final Assignment cBbNodesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBbNodesBBNodeParserRuleCall_8_0 = (RuleCall)cBbNodesAssignment_8.eContents().get(0);
		private final Assignment cCheckNodesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCheckNodesCheckNodeParserRuleCall_9_0 = (RuleCall)cCheckNodesAssignment_9.eContents().get(0);
		private final Assignment cTaskNodesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTaskNodesBehaviorNodeParserRuleCall_10_0 = (RuleCall)cTaskNodesAssignment_10.eContents().get(0);
		private final Keyword cTreeKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cUpdatetimeKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cEqualsSignKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cUpdatetimeAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cUpdatetimeFLOATParserRuleCall_15_0 = (RuleCall)cUpdatetimeAssignment_15.eContents().get(0);
		private final Keyword cCommaKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cTimeoutKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cEqualsSignKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Assignment cTimeoutAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cTimeoutFLOATParserRuleCall_19_0 = (RuleCall)cTimeoutAssignment_19.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Assignment cTreeAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cTreeBTreeParserRuleCall_21_0 = (RuleCall)cTreeAssignment_21.eContents().get(0);
		
		//BehaviorModel:
		//    'system' name=ID';'
		//    (simpleTypes += SimpleType)*
		//    (messageTypes += MessageType)*
		//    (rosTopics += Topic)*
		//    (bbVariables += BBVar)*
		//    (bbEvents += BBEvent)*
		//    (bbNodes += BBNode)*
		//    (checkNodes += CheckNode)*
		//    (taskNodes += BehaviorNode)*
		//    'tree' '(' 'updatetime' '=' updatetime=FLOAT ',' 'timeout' '=' timeout=FLOAT ')' tree=BTree
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID';'
		//(simpleTypes += SimpleType)*
		//(messageTypes += MessageType)*
		//(rosTopics += Topic)*
		//(bbVariables += BBVar)*
		//(bbEvents += BBEvent)*
		//(bbNodes += BBNode)*
		//(checkNodes += CheckNode)*
		//(taskNodes += BehaviorNode)*
		//'tree' '(' 'updatetime' '=' updatetime=FLOAT ',' 'timeout' '=' timeout=FLOAT ')' tree=BTree
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//(simpleTypes += SimpleType)*
		public Assignment getSimpleTypesAssignment_3() { return cSimpleTypesAssignment_3; }
		
		//SimpleType
		public RuleCall getSimpleTypesSimpleTypeParserRuleCall_3_0() { return cSimpleTypesSimpleTypeParserRuleCall_3_0; }
		
		//(messageTypes += MessageType)*
		public Assignment getMessageTypesAssignment_4() { return cMessageTypesAssignment_4; }
		
		//MessageType
		public RuleCall getMessageTypesMessageTypeParserRuleCall_4_0() { return cMessageTypesMessageTypeParserRuleCall_4_0; }
		
		//(rosTopics += Topic)*
		public Assignment getRosTopicsAssignment_5() { return cRosTopicsAssignment_5; }
		
		//Topic
		public RuleCall getRosTopicsTopicParserRuleCall_5_0() { return cRosTopicsTopicParserRuleCall_5_0; }
		
		//(bbVariables += BBVar)*
		public Assignment getBbVariablesAssignment_6() { return cBbVariablesAssignment_6; }
		
		//BBVar
		public RuleCall getBbVariablesBBVarParserRuleCall_6_0() { return cBbVariablesBBVarParserRuleCall_6_0; }
		
		//(bbEvents += BBEvent)*
		public Assignment getBbEventsAssignment_7() { return cBbEventsAssignment_7; }
		
		//BBEvent
		public RuleCall getBbEventsBBEventParserRuleCall_7_0() { return cBbEventsBBEventParserRuleCall_7_0; }
		
		//(bbNodes += BBNode)*
		public Assignment getBbNodesAssignment_8() { return cBbNodesAssignment_8; }
		
		//BBNode
		public RuleCall getBbNodesBBNodeParserRuleCall_8_0() { return cBbNodesBBNodeParserRuleCall_8_0; }
		
		//(checkNodes += CheckNode)*
		public Assignment getCheckNodesAssignment_9() { return cCheckNodesAssignment_9; }
		
		//CheckNode
		public RuleCall getCheckNodesCheckNodeParserRuleCall_9_0() { return cCheckNodesCheckNodeParserRuleCall_9_0; }
		
		//(taskNodes += BehaviorNode)*
		public Assignment getTaskNodesAssignment_10() { return cTaskNodesAssignment_10; }
		
		//BehaviorNode
		public RuleCall getTaskNodesBehaviorNodeParserRuleCall_10_0() { return cTaskNodesBehaviorNodeParserRuleCall_10_0; }
		
		//'tree'
		public Keyword getTreeKeyword_11() { return cTreeKeyword_11; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_12() { return cLeftParenthesisKeyword_12; }
		
		//'updatetime'
		public Keyword getUpdatetimeKeyword_13() { return cUpdatetimeKeyword_13; }
		
		//'='
		public Keyword getEqualsSignKeyword_14() { return cEqualsSignKeyword_14; }
		
		//updatetime=FLOAT
		public Assignment getUpdatetimeAssignment_15() { return cUpdatetimeAssignment_15; }
		
		//FLOAT
		public RuleCall getUpdatetimeFLOATParserRuleCall_15_0() { return cUpdatetimeFLOATParserRuleCall_15_0; }
		
		//','
		public Keyword getCommaKeyword_16() { return cCommaKeyword_16; }
		
		//'timeout'
		public Keyword getTimeoutKeyword_17() { return cTimeoutKeyword_17; }
		
		//'='
		public Keyword getEqualsSignKeyword_18() { return cEqualsSignKeyword_18; }
		
		//timeout=FLOAT
		public Assignment getTimeoutAssignment_19() { return cTimeoutAssignment_19; }
		
		//FLOAT
		public RuleCall getTimeoutFLOATParserRuleCall_19_0() { return cTimeoutFLOATParserRuleCall_19_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_20() { return cRightParenthesisKeyword_20; }
		
		//tree=BTree
		public Assignment getTreeAssignment_21() { return cTreeAssignment_21; }
		
		//BTree
		public RuleCall getTreeBTreeParserRuleCall_21_0() { return cTreeBTreeParserRuleCall_21_0; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.SimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SimpleType:
		//    'type' name=ID ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class MessageTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.MessageType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPackageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackageIDTerminalRuleCall_2_0 = (RuleCall)cPackageAssignment_2.eContents().get(0);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MessageType:
		//    'message' name=ID package=ID
		//          (fields += Field)*
		//    'end'(';')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'message' name=ID package=ID
		//      (fields += Field)*
		//'end'(';')?
		public Group getGroup() { return cGroup; }
		
		//'message'
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//package=ID
		public Assignment getPackageAssignment_2() { return cPackageAssignment_2; }
		
		//ID
		public RuleCall getPackageIDTerminalRuleCall_2_0() { return cPackageIDTerminalRuleCall_2_0; }
		
		//(fields += Field)*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_0() { return cFieldsFieldParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//(';')?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMessageTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:    SimpleType | MessageType
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleType | MessageType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0() { return cSimpleTypeParserRuleCall_0; }
		
		//MessageType
		public RuleCall getMessageTypeParserRuleCall_1() { return cMessageTypeParserRuleCall_1; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_1_0_0 = (Keyword)cArrayAssignment_1_0.eContents().get(0);
		private final Assignment cCountAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCountINTTerminalRuleCall_1_1_0 = (RuleCall)cCountAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Field:    type=[Type](array='['(count=INT)?']')?  name=ID ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Type](array='['(count=INT)?']')?  name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=[Type]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_0_1() { return cTypeTypeIDTerminalRuleCall_0_0_1; }
		
		//(array='['(count=INT)?']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//array='['
		public Assignment getArrayAssignment_1_0() { return cArrayAssignment_1_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_1_0_0() { return cArrayLeftSquareBracketKeyword_1_0_0; }
		
		//(count=INT)?
		public Assignment getCountAssignment_1_1() { return cCountAssignment_1_1; }
		
		//INT
		public RuleCall getCountINTTerminalRuleCall_1_1_0() { return cCountINTTerminalRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TopicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.Topic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTopicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeMessageTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeMessageTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeMessageTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTopic_stringAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTopic_stringSTRINGTerminalRuleCall_3_0 = (RuleCall)cTopic_stringAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Topic:    'topic' type=[MessageType] name=ID topic_string=STRING ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'topic' type=[MessageType] name=ID topic_string=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'topic'
		public Keyword getTopicKeyword_0() { return cTopicKeyword_0; }
		
		//type=[MessageType]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[MessageType]
		public CrossReference getTypeMessageTypeCrossReference_1_0() { return cTypeMessageTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeMessageTypeIDTerminalRuleCall_1_0_1() { return cTypeMessageTypeIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//topic_string=STRING
		public Assignment getTopic_stringAssignment_3() { return cTopic_stringAssignment_3; }
		
		//STRING
		public RuleCall getTopic_stringSTRINGTerminalRuleCall_3_0() { return cTopic_stringSTRINGTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class BBVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.BBVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultBASETYPEParserRuleCall_3_1_0 = (RuleCall)cDefaultAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BBVar:
		//    'var' type=[Type] name=ID ('=' default=BASETYPE)? ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' type=[Type] name=ID ('=' default=BASETYPE)? ';'
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('=' default=BASETYPE)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//default=BASETYPE
		public Assignment getDefaultAssignment_3_1() { return cDefaultAssignment_3_1; }
		
		//BASETYPE
		public RuleCall getDefaultBASETYPEParserRuleCall_3_1_0() { return cDefaultBASETYPEParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class BBEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.BBEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTopicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTopicTopicCrossReference_2_0 = (CrossReference)cTopicAssignment_2.eContents().get(0);
		private final RuleCall cTopicTopicIDTerminalRuleCall_2_0_1 = (RuleCall)cTopicTopicCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BBEvent:
		//    'event' name=ID topic=[Topic]';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID topic=[Topic]';'
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//topic=[Topic]
		public Assignment getTopicAssignment_2() { return cTopicAssignment_2; }
		
		//[Topic]
		public CrossReference getTopicTopicCrossReference_2_0() { return cTopicTopicCrossReference_2_0; }
		
		//ID
		public RuleCall getTopicTopicIDTerminalRuleCall_2_0_1() { return cTopicTopicIDTerminalRuleCall_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.Arg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArrayAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_2_0_0 = (Keyword)cArrayAssignment_2_0.eContents().get(0);
		private final Assignment cCountAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCountINTTerminalRuleCall_2_1_0 = (RuleCall)cCountAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultDefaultTypeParserRuleCall_4_1_0 = (RuleCall)cDefaultAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Arg:
		//    'arg' type=[Type](array='['(count=INT)?']')? name=ID ('=' default=DefaultType)? ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'arg' type=[Type](array='['(count=INT)?']')? name=ID ('=' default=DefaultType)? ';'
		public Group getGroup() { return cGroup; }
		
		//'arg'
		public Keyword getArgKeyword_0() { return cArgKeyword_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }
		
		//(array='['(count=INT)?']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//array='['
		public Assignment getArrayAssignment_2_0() { return cArrayAssignment_2_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_2_0_0() { return cArrayLeftSquareBracketKeyword_2_0_0; }
		
		//(count=INT)?
		public Assignment getCountAssignment_2_1() { return cCountAssignment_2_1; }
		
		//INT
		public RuleCall getCountINTTerminalRuleCall_2_1_0() { return cCountINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('=' default=DefaultType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//default=DefaultType
		public Assignment getDefaultAssignment_4_1() { return cDefaultAssignment_4_1; }
		
		//DefaultType
		public RuleCall getDefaultDefaultTypeParserRuleCall_4_1_0() { return cDefaultDefaultTypeParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class DefaultTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.DefaultType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDefaultTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cBASETYPEParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cBaseArrayTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DefaultType:
		//    {DefaultType} BASETYPE | BaseArrayType
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefaultType} BASETYPE | BaseArrayType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DefaultType} BASETYPE
		public Group getGroup_0() { return cGroup_0; }
		
		//{DefaultType}
		public Action getDefaultTypeAction_0_0() { return cDefaultTypeAction_0_0; }
		
		//BASETYPE
		public RuleCall getBASETYPEParserRuleCall_0_1() { return cBASETYPEParserRuleCall_0_1; }
		
		//BaseArrayType
		public RuleCall getBaseArrayTypeParserRuleCall_1() { return cBaseArrayTypeParserRuleCall_1; }
	}
	public class BaseArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.BaseArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesBASETYPEParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesBASETYPEParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BaseArrayType:
		//    '[' values+=BASETYPE (',' values+=BASETYPE)* ']'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' values+=BASETYPE (',' values+=BASETYPE)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//values+=BASETYPE
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//BASETYPE
		public RuleCall getValuesBASETYPEParserRuleCall_1_0() { return cValuesBASETYPEParserRuleCall_1_0; }
		
		//(',' values+=BASETYPE)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=BASETYPE
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//BASETYPE
		public RuleCall getValuesBASETYPEParserRuleCall_2_1_0() { return cValuesBASETYPEParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class BBNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.BBNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInput_topicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInput_topicTopicCrossReference_2_0 = (CrossReference)cInput_topicAssignment_2.eContents().get(0);
		private final RuleCall cInput_topicTopicIDTerminalRuleCall_2_0_1 = (RuleCall)cInput_topicTopicCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTopic_bbvarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTopic_bbvarBBVarCrossReference_4_0 = (CrossReference)cTopic_bbvarAssignment_4.eContents().get(0);
		private final RuleCall cTopic_bbvarBBVarIDTerminalRuleCall_4_0_1 = (RuleCall)cTopic_bbvarBBVarCrossReference_4_0.eContents().get(1);
		private final Assignment cBb_varsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBb_varsBBVarParserRuleCall_5_0 = (RuleCall)cBb_varsAssignment_5.eContents().get(0);
		private final Assignment cArgsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArgsArgParserRuleCall_6_0 = (RuleCall)cArgsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommentKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cCommentAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cCommentSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cCommentAssignment_7_1.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BBNode:
		//    'input' name=ID
		//         input_topic=[Topic] '->' topic_bbvar=[BBVar]
		//         (bb_vars += BBVar)*
		//         (args += Arg)*
		//         ('comment' comment=STRING)?
		//    'end'(';')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'input' name=ID
		//     input_topic=[Topic] '->' topic_bbvar=[BBVar]
		//     (bb_vars += BBVar)*
		//     (args += Arg)*
		//     ('comment' comment=STRING)?
		//'end'(';')?
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//input_topic=[Topic]
		public Assignment getInput_topicAssignment_2() { return cInput_topicAssignment_2; }
		
		//[Topic]
		public CrossReference getInput_topicTopicCrossReference_2_0() { return cInput_topicTopicCrossReference_2_0; }
		
		//ID
		public RuleCall getInput_topicTopicIDTerminalRuleCall_2_0_1() { return cInput_topicTopicIDTerminalRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//topic_bbvar=[BBVar]
		public Assignment getTopic_bbvarAssignment_4() { return cTopic_bbvarAssignment_4; }
		
		//[BBVar]
		public CrossReference getTopic_bbvarBBVarCrossReference_4_0() { return cTopic_bbvarBBVarCrossReference_4_0; }
		
		//ID
		public RuleCall getTopic_bbvarBBVarIDTerminalRuleCall_4_0_1() { return cTopic_bbvarBBVarIDTerminalRuleCall_4_0_1; }
		
		//(bb_vars += BBVar)*
		public Assignment getBb_varsAssignment_5() { return cBb_varsAssignment_5; }
		
		//BBVar
		public RuleCall getBb_varsBBVarParserRuleCall_5_0() { return cBb_varsBBVarParserRuleCall_5_0; }
		
		//(args += Arg)*
		public Assignment getArgsAssignment_6() { return cArgsAssignment_6; }
		
		//Arg
		public RuleCall getArgsArgParserRuleCall_6_0() { return cArgsArgParserRuleCall_6_0; }
		
		//('comment' comment=STRING)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'comment'
		public Keyword getCommentKeyword_7_0() { return cCommentKeyword_7_0; }
		
		//comment=STRING
		public Assignment getCommentAssignment_7_1() { return cCommentAssignment_7_1; }
		
		//STRING
		public RuleCall getCommentSTRINGTerminalRuleCall_7_1_0() { return cCommentSTRINGTerminalRuleCall_7_1_0; }
		
		//'end'
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
		
		//(';')?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class CheckNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.CheckNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBBVarAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCheckKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cBbvarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBbvarBBVarCrossReference_3_0 = (CrossReference)cBbvarAssignment_3.eContents().get(0);
		private final RuleCall cBbvarBBVarIDTerminalRuleCall_3_0_1 = (RuleCall)cBbvarBBVarCrossReference_3_0.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDefaultAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefaultBASETYPEParserRuleCall_5_0 = (RuleCall)cDefaultAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CheckNode:
		//    {BBVar} 'check' name=ID    bbvar=[BBVar] '==' default=BASETYPE ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BBVar} 'check' name=ID	bbvar=[BBVar] '==' default=BASETYPE ';'
		public Group getGroup() { return cGroup; }
		
		//{BBVar}
		public Action getBBVarAction_0() { return cBBVarAction_0; }
		
		//'check'
		public Keyword getCheckKeyword_1() { return cCheckKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//bbvar=[BBVar]
		public Assignment getBbvarAssignment_3() { return cBbvarAssignment_3; }
		
		//[BBVar]
		public CrossReference getBbvarBBVarCrossReference_3_0() { return cBbvarBBVarCrossReference_3_0; }
		
		//ID
		public RuleCall getBbvarBBVarIDTerminalRuleCall_3_0_1() { return cBbvarBBVarIDTerminalRuleCall_3_0_1; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }
		
		//default=BASETYPE
		public Assignment getDefaultAssignment_5() { return cDefaultAssignment_5; }
		
		//BASETYPE
		public RuleCall getDefaultBASETYPEParserRuleCall_5_0() { return cDefaultBASETYPEParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class BehaviorNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.BehaviorNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStdBehaviorNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BehaviorNode:
		//    StdBehaviorNode |
		//    TaskNode
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//StdBehaviorNode |
		//TaskNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StdBehaviorNode
		public RuleCall getStdBehaviorNodeParserRuleCall_0() { return cStdBehaviorNodeParserRuleCall_0; }
		
		//TaskNode
		public RuleCall getTaskNodeParserRuleCall_1() { return cTaskNodeParserRuleCall_1; }
	}
	public class StdBehaviorNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.StdBehaviorNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSTD_BEHAVIOR_TYPEParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StdBehaviorNode:
		//    type=STD_BEHAVIOR_TYPE name=ID ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//type=STD_BEHAVIOR_TYPE name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=STD_BEHAVIOR_TYPE
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//STD_BEHAVIOR_TYPE
		public RuleCall getTypeSTD_BEHAVIOR_TYPEParserRuleCall_0_0() { return cTypeSTD_BEHAVIOR_TYPEParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class STD_BEHAVIOR_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.STD_BEHAVIOR_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSuccessKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFailureKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRunningKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//STD_BEHAVIOR_TYPE:
		//    'success' | 'failure' | 'running'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'success' | 'failure' | 'running'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'success'
		public Keyword getSuccessKeyword_0() { return cSuccessKeyword_0; }
		
		//'failure'
		public Keyword getFailureKeyword_1() { return cFailureKeyword_1; }
		
		//'running'
		public Keyword getRunningKeyword_2() { return cRunningKeyword_2; }
	}
	public class TaskNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.TaskNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInput_topicsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInput_topicsTopicArgParserRuleCall_2_1_0 = (RuleCall)cInput_topicsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInput_topicsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInput_topicsTopicArgParserRuleCall_2_2_1_0 = (RuleCall)cInput_topicsAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutput_topicsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutput_topicsTopicArgParserRuleCall_3_1_0 = (RuleCall)cOutput_topicsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOutput_topicsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOutput_topicsTopicArgParserRuleCall_3_2_1_0 = (RuleCall)cOutput_topicsAssignment_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cBb_varsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBb_varsBBVarParserRuleCall_4_0 = (RuleCall)cBb_varsAssignment_4.eContents().get(0);
		private final Assignment cArgsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgsArgParserRuleCall_5_0 = (RuleCall)cArgsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommentKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCommentAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCommentSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cCommentAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//TaskNode:
		//    'task' name=ID
		//    ('in' input_topics+=TopicArg (','input_topics+=TopicArg)* ';')?
		//    ('out' output_topics+=TopicArg (','output_topics+=TopicArg)* ';')?
		//    (bb_vars+=BBVar*)
		//    (args+=Arg*)
		//    ('comment' comment=STRING (';')?)?
		//    'end'(';')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' name=ID
		//('in' input_topics+=TopicArg (','input_topics+=TopicArg)* ';')?
		//('out' output_topics+=TopicArg (','output_topics+=TopicArg)* ';')?
		//(bb_vars+=BBVar*)
		//(args+=Arg*)
		//('comment' comment=STRING (';')?)?
		//'end'(';')?
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('in' input_topics+=TopicArg (','input_topics+=TopicArg)* ';')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//input_topics+=TopicArg
		public Assignment getInput_topicsAssignment_2_1() { return cInput_topicsAssignment_2_1; }
		
		//TopicArg
		public RuleCall getInput_topicsTopicArgParserRuleCall_2_1_0() { return cInput_topicsTopicArgParserRuleCall_2_1_0; }
		
		//(','input_topics+=TopicArg)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//input_topics+=TopicArg
		public Assignment getInput_topicsAssignment_2_2_1() { return cInput_topicsAssignment_2_2_1; }
		
		//TopicArg
		public RuleCall getInput_topicsTopicArgParserRuleCall_2_2_1_0() { return cInput_topicsTopicArgParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
		
		//('out' output_topics+=TopicArg (','output_topics+=TopicArg)* ';')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'out'
		public Keyword getOutKeyword_3_0() { return cOutKeyword_3_0; }
		
		//output_topics+=TopicArg
		public Assignment getOutput_topicsAssignment_3_1() { return cOutput_topicsAssignment_3_1; }
		
		//TopicArg
		public RuleCall getOutput_topicsTopicArgParserRuleCall_3_1_0() { return cOutput_topicsTopicArgParserRuleCall_3_1_0; }
		
		//(','output_topics+=TopicArg)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//output_topics+=TopicArg
		public Assignment getOutput_topicsAssignment_3_2_1() { return cOutput_topicsAssignment_3_2_1; }
		
		//TopicArg
		public RuleCall getOutput_topicsTopicArgParserRuleCall_3_2_1_0() { return cOutput_topicsTopicArgParserRuleCall_3_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }
		
		//(bb_vars+=BBVar*)
		public Assignment getBb_varsAssignment_4() { return cBb_varsAssignment_4; }
		
		//BBVar
		public RuleCall getBb_varsBBVarParserRuleCall_4_0() { return cBb_varsBBVarParserRuleCall_4_0; }
		
		//(args+=Arg*)
		public Assignment getArgsAssignment_5() { return cArgsAssignment_5; }
		
		//Arg
		public RuleCall getArgsArgParserRuleCall_5_0() { return cArgsArgParserRuleCall_5_0; }
		
		//('comment' comment=STRING (';')?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'comment'
		public Keyword getCommentKeyword_6_0() { return cCommentKeyword_6_0; }
		
		//comment=STRING
		public Assignment getCommentAssignment_6_1() { return cCommentAssignment_6_1; }
		
		//STRING
		public RuleCall getCommentSTRINGTerminalRuleCall_6_1_0() { return cCommentSTRINGTerminalRuleCall_6_1_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_6_2() { return cSemicolonKeyword_6_2; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
		
		//(';')?
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class TopicArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.TopicArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTopicCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTopicIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeTopicCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TopicArg:
		//    type=[Topic] name=ID
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Topic] name=ID
		public Group getGroup() { return cGroup; }
		
		//type=[Topic]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Topic]
		public CrossReference getTypeTopicCrossReference_0_0() { return cTypeTopicCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeTopicIDTerminalRuleCall_0_0_1() { return cTypeTopicIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BTreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.BTree");
		private final Assignment cBtreeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBtreeBTreeNodeParserRuleCall_0 = (RuleCall)cBtreeAssignment.eContents().get(0);
		
		//BTree:    btree=BTreeNode
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//btree=BTreeNode
		public Assignment getBtreeAssignment() { return cBtreeAssignment; }
		
		//BTreeNode
		public RuleCall getBtreeBTreeNodeParserRuleCall_0() { return cBtreeBTreeNodeParserRuleCall_0; }
	}
	public class BTreeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.BTreeNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParBTNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSeqBTNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelBTNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSIFBTNodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMonBTNodeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTaskBTNodeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTimerBTNodeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCheckBTNodeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//BTreeNode:
		//    ParBTNode
		//    | SeqBTNode
		//    | SelBTNode
		//    | SIFBTNode
		//    | MonBTNode
		//    | TaskBTNode
		//    | TimerBTNode
		//    | CheckBTNode
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//ParBTNode
		//| SeqBTNode
		//| SelBTNode
		//| SIFBTNode
		//| MonBTNode
		//| TaskBTNode
		//| TimerBTNode
		//| CheckBTNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParBTNode
		public RuleCall getParBTNodeParserRuleCall_0() { return cParBTNodeParserRuleCall_0; }
		
		//SeqBTNode
		public RuleCall getSeqBTNodeParserRuleCall_1() { return cSeqBTNodeParserRuleCall_1; }
		
		//SelBTNode
		public RuleCall getSelBTNodeParserRuleCall_2() { return cSelBTNodeParserRuleCall_2; }
		
		//SIFBTNode
		public RuleCall getSIFBTNodeParserRuleCall_3() { return cSIFBTNodeParserRuleCall_3; }
		
		//MonBTNode
		public RuleCall getMonBTNodeParserRuleCall_4() { return cMonBTNodeParserRuleCall_4; }
		
		//TaskBTNode
		public RuleCall getTaskBTNodeParserRuleCall_5() { return cTaskBTNodeParserRuleCall_5; }
		
		//TimerBTNode
		public RuleCall getTimerBTNodeParserRuleCall_6() { return cTimerBTNodeParserRuleCall_6; }
		
		//CheckBTNode
		public RuleCall getCheckBTNodeParserRuleCall_7() { return cCheckBTNodeParserRuleCall_7; }
	}
	public class ChildNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.ChildNode");
		private final RuleCall cBTreeNodeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ChildNode:
		//    BTreeNode
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//BTreeNode
		public RuleCall getBTreeNodeParserRuleCall() { return cBTreeNodeParserRuleCall; }
	}
	public class ParBTNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.ParBTNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCondAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCondStatusParserRuleCall_2_1_0 = (RuleCall)cCondAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodesChildNodeParserRuleCall_4_0 = (RuleCall)cNodesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ParBTNode:
		//    'par' name=ID ('('cond=Status')')?'{'
		//          (nodes += ChildNode)*
		//     '}'
		//     ;
		@Override public ParserRule getRule() { return rule; }
		
		//'par' name=ID ('('cond=Status')')?'{'
		//      (nodes += ChildNode)*
		// '}'
		public Group getGroup() { return cGroup; }
		
		//'par'
		public Keyword getParKeyword_0() { return cParKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('('cond=Status')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//cond=Status
		public Assignment getCondAssignment_2_1() { return cCondAssignment_2_1; }
		
		//Status
		public RuleCall getCondStatusParserRuleCall_2_1_0() { return cCondStatusParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(nodes += ChildNode)*
		public Assignment getNodesAssignment_4() { return cNodesAssignment_4; }
		
		//ChildNode
		public RuleCall getNodesChildNodeParserRuleCall_4_0() { return cNodesChildNodeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SeqBTNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.SeqBTNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCondAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCondStatusParserRuleCall_2_1_0 = (RuleCall)cCondAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodesChildNodeParserRuleCall_4_0 = (RuleCall)cNodesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SeqBTNode:
		//    'seq' name=ID ('('cond=Status')')?'{'
		//          (nodes += ChildNode)*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'seq' name=ID ('('cond=Status')')?'{'
		//      (nodes += ChildNode)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'seq'
		public Keyword getSeqKeyword_0() { return cSeqKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('('cond=Status')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//cond=Status
		public Assignment getCondAssignment_2_1() { return cCondAssignment_2_1; }
		
		//Status
		public RuleCall getCondStatusParserRuleCall_2_1_0() { return cCondStatusParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(nodes += ChildNode)*
		public Assignment getNodesAssignment_4() { return cNodesAssignment_4; }
		
		//ChildNode
		public RuleCall getNodesChildNodeParserRuleCall_4_0() { return cNodesChildNodeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SelBTNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.SelBTNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCondAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCondStatusParserRuleCall_2_1_0 = (RuleCall)cCondAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodesChildNodeParserRuleCall_4_0 = (RuleCall)cNodesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SelBTNode:
		//    'sel' name=ID ('('cond=Status')')?'{'
		//          (nodes += ChildNode)*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'sel' name=ID ('('cond=Status')')?'{'
		//      (nodes += ChildNode)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'sel'
		public Keyword getSelKeyword_0() { return cSelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('('cond=Status')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//cond=Status
		public Assignment getCondAssignment_2_1() { return cCondAssignment_2_1; }
		
		//Status
		public RuleCall getCondStatusParserRuleCall_2_1_0() { return cCondStatusParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(nodes += ChildNode)*
		public Assignment getNodesAssignment_4() { return cNodesAssignment_4; }
		
		//ChildNode
		public RuleCall getNodesChildNodeParserRuleCall_4_0() { return cNodesChildNodeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SIFBTNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.SIFBTNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChecksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cChecksCheckNodeCrossReference_4_0 = (CrossReference)cChecksAssignment_4.eContents().get(0);
		private final RuleCall cChecksCheckNodeIDTerminalRuleCall_4_0_1 = (RuleCall)cChecksCheckNodeCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cChecksAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cChecksCheckNodeCrossReference_5_1_0 = (CrossReference)cChecksAssignment_5_1.eContents().get(0);
		private final RuleCall cChecksCheckNodeIDTerminalRuleCall_5_1_0_1 = (RuleCall)cChecksCheckNodeCrossReference_5_1_0.eContents().get(1);
		private final Keyword cThenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNodesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNodesChildNodeParserRuleCall_8_0 = (RuleCall)cNodesAssignment_8.eContents().get(0);
		private final Assignment cNodesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNodesChildNodeParserRuleCall_9_0 = (RuleCall)cNodesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//SIFBTNode:
		//    'do' name=ID '{'
		//           'if' checks+=[CheckNode] (',' checks+=[CheckNode])*
		//           'then' '{'
		//                (nodes += ChildNode) (nodes +=ChildNode)*
		//            '}'
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'do' name=ID '{'
		//       'if' checks+=[CheckNode] (',' checks+=[CheckNode])*
		//       'then' '{'
		//            (nodes += ChildNode) (nodes +=ChildNode)*
		//        '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'if'
		public Keyword getIfKeyword_3() { return cIfKeyword_3; }
		
		//checks+=[CheckNode]
		public Assignment getChecksAssignment_4() { return cChecksAssignment_4; }
		
		//[CheckNode]
		public CrossReference getChecksCheckNodeCrossReference_4_0() { return cChecksCheckNodeCrossReference_4_0; }
		
		//ID
		public RuleCall getChecksCheckNodeIDTerminalRuleCall_4_0_1() { return cChecksCheckNodeIDTerminalRuleCall_4_0_1; }
		
		//(',' checks+=[CheckNode])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//checks+=[CheckNode]
		public Assignment getChecksAssignment_5_1() { return cChecksAssignment_5_1; }
		
		//[CheckNode]
		public CrossReference getChecksCheckNodeCrossReference_5_1_0() { return cChecksCheckNodeCrossReference_5_1_0; }
		
		//ID
		public RuleCall getChecksCheckNodeIDTerminalRuleCall_5_1_0_1() { return cChecksCheckNodeIDTerminalRuleCall_5_1_0_1; }
		
		//'then'
		public Keyword getThenKeyword_6() { return cThenKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//(nodes += ChildNode)
		public Assignment getNodesAssignment_8() { return cNodesAssignment_8; }
		
		//ChildNode
		public RuleCall getNodesChildNodeParserRuleCall_8_0() { return cNodesChildNodeParserRuleCall_8_0; }
		
		//(nodes +=ChildNode)*
		public Assignment getNodesAssignment_9() { return cNodesAssignment_9; }
		
		//ChildNode
		public RuleCall getNodesChildNodeParserRuleCall_9_0() { return cNodesChildNodeParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class MonBTNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.MonBTNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMonBBNodeCrossReference_1_0 = (CrossReference)cMonAssignment_1.eContents().get(0);
		private final RuleCall cMonBBNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cMonBBNodeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMonAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cMonBBNodeCrossReference_2_1_0 = (CrossReference)cMonAssignment_2_1.eContents().get(0);
		private final RuleCall cMonBBNodeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cMonBBNodeCrossReference_2_1_0.eContents().get(1);
		
		//MonBTNode:
		//    'mon' mon+=[BBNode] (',' mon+=[BBNode])*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'mon' mon+=[BBNode] (',' mon+=[BBNode])*
		public Group getGroup() { return cGroup; }
		
		//'mon'
		public Keyword getMonKeyword_0() { return cMonKeyword_0; }
		
		//mon+=[BBNode]
		public Assignment getMonAssignment_1() { return cMonAssignment_1; }
		
		//[BBNode]
		public CrossReference getMonBBNodeCrossReference_1_0() { return cMonBBNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getMonBBNodeIDTerminalRuleCall_1_0_1() { return cMonBBNodeIDTerminalRuleCall_1_0_1; }
		
		//(',' mon+=[BBNode])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//mon+=[BBNode]
		public Assignment getMonAssignment_2_1() { return cMonAssignment_2_1; }
		
		//[BBNode]
		public CrossReference getMonBBNodeCrossReference_2_1_0() { return cMonBBNodeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getMonBBNodeIDTerminalRuleCall_2_1_0_1() { return cMonBBNodeIDTerminalRuleCall_2_1_0_1; }
	}
	public class TaskBTNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.TaskBTNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskBehaviorNodeCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskBehaviorNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cTaskBehaviorNodeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTaskAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTaskBehaviorNodeCrossReference_2_1_0 = (CrossReference)cTaskAssignment_2_1.eContents().get(0);
		private final RuleCall cTaskBehaviorNodeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTaskBehaviorNodeCrossReference_2_1_0.eContents().get(1);
		
		//TaskBTNode:
		//    'exec' task+=[BehaviorNode] (','task+=[BehaviorNode])*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'exec' task+=[BehaviorNode] (','task+=[BehaviorNode])*
		public Group getGroup() { return cGroup; }
		
		//'exec'
		public Keyword getExecKeyword_0() { return cExecKeyword_0; }
		
		//task+=[BehaviorNode]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }
		
		//[BehaviorNode]
		public CrossReference getTaskBehaviorNodeCrossReference_1_0() { return cTaskBehaviorNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getTaskBehaviorNodeIDTerminalRuleCall_1_0_1() { return cTaskBehaviorNodeIDTerminalRuleCall_1_0_1; }
		
		//(','task+=[BehaviorNode])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//task+=[BehaviorNode]
		public Assignment getTaskAssignment_2_1() { return cTaskAssignment_2_1; }
		
		//[BehaviorNode]
		public CrossReference getTaskBehaviorNodeCrossReference_2_1_0() { return cTaskBehaviorNodeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getTaskBehaviorNodeIDTerminalRuleCall_2_1_0_1() { return cTaskBehaviorNodeIDTerminalRuleCall_2_1_0_1; }
	}
	public class TimerBTNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.TimerBTNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDurationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDurationNUMBERParserRuleCall_3_0 = (RuleCall)cDurationAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TimerBTNode:
		//    'timer' name=ID '('duration=NUMBER')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'timer' name=ID '('duration=NUMBER')'
		public Group getGroup() { return cGroup; }
		
		//'timer'
		public Keyword getTimerKeyword_0() { return cTimerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//duration=NUMBER
		public Assignment getDurationAssignment_3() { return cDurationAssignment_3; }
		
		//NUMBER
		public RuleCall getDurationNUMBERParserRuleCall_3_0() { return cDurationNUMBERParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class CheckBTNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.CheckBTNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCheckCheckNodeCrossReference_1_0 = (CrossReference)cCheckAssignment_1.eContents().get(0);
		private final RuleCall cCheckCheckNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cCheckCheckNodeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCheckAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cCheckCheckNodeCrossReference_2_1_0 = (CrossReference)cCheckAssignment_2_1.eContents().get(0);
		private final RuleCall cCheckCheckNodeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cCheckCheckNodeCrossReference_2_1_0.eContents().get(1);
		
		//CheckBTNode:
		//    'chk' check+=[CheckNode] (',' check+=[CheckNode])*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'chk' check+=[CheckNode] (',' check+=[CheckNode])*
		public Group getGroup() { return cGroup; }
		
		//'chk'
		public Keyword getChkKeyword_0() { return cChkKeyword_0; }
		
		//check+=[CheckNode]
		public Assignment getCheckAssignment_1() { return cCheckAssignment_1; }
		
		//[CheckNode]
		public CrossReference getCheckCheckNodeCrossReference_1_0() { return cCheckCheckNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getCheckCheckNodeIDTerminalRuleCall_1_0_1() { return cCheckCheckNodeIDTerminalRuleCall_1_0_1; }
		
		//(',' check+=[CheckNode])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//check+=[CheckNode]
		public Assignment getCheckAssignment_2_1() { return cCheckAssignment_2_1; }
		
		//[CheckNode]
		public CrossReference getCheckCheckNodeCrossReference_2_1_0() { return cCheckCheckNodeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getCheckCheckNodeIDTerminalRuleCall_2_1_0_1() { return cCheckCheckNodeIDTerminalRuleCall_2_1_0_1; }
	}
	public class StatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.Status");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSuccessKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFailureKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRunningKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInvalidKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Status:
		//    'success' | 'failure' | 'running' | 'invalid'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'success' | 'failure' | 'running' | 'invalid'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'success'
		public Keyword getSuccessKeyword_0() { return cSuccessKeyword_0; }
		
		//'failure'
		public Keyword getFailureKeyword_1() { return cFailureKeyword_1; }
		
		//'running'
		public Keyword getRunningKeyword_2() { return cRunningKeyword_2; }
		
		//'invalid'
		public Keyword getInvalidKeyword_3() { return cInvalidKeyword_3; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FLOAT returns ecore::EFloat:
		//    '-'?INT'.'INT
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'?INT'.'INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class BASETYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.BASETYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOOLEANTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BASETYPE:
		//    STRING|FLOAT|INT|BOOLEAN
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING|FLOAT|INT|BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_1() { return cFLOATParserRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_3() { return cBOOLEANTerminalRuleCall_3; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOATParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NUMBER:
		//    FLOAT|INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT|INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_0() { return cFLOATParserRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.Comment");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Comment:
		//    ID
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final BehaviorModelElements pBehaviorModel;
	private final SimpleTypeElements pSimpleType;
	private final MessageTypeElements pMessageType;
	private final TypeElements pType;
	private final FieldElements pField;
	private final TopicElements pTopic;
	private final BBVarElements pBBVar;
	private final BBEventElements pBBEvent;
	private final ArgElements pArg;
	private final DefaultTypeElements pDefaultType;
	private final BaseArrayTypeElements pBaseArrayType;
	private final BBNodeElements pBBNode;
	private final CheckNodeElements pCheckNode;
	private final BehaviorNodeElements pBehaviorNode;
	private final StdBehaviorNodeElements pStdBehaviorNode;
	private final STD_BEHAVIOR_TYPEElements pSTD_BEHAVIOR_TYPE;
	private final TaskNodeElements pTaskNode;
	private final TopicArgElements pTopicArg;
	private final BTreeElements pBTree;
	private final BTreeNodeElements pBTreeNode;
	private final ChildNodeElements pChildNode;
	private final ParBTNodeElements pParBTNode;
	private final SeqBTNodeElements pSeqBTNode;
	private final SelBTNodeElements pSelBTNode;
	private final SIFBTNodeElements pSIFBTNode;
	private final MonBTNodeElements pMonBTNode;
	private final TaskBTNodeElements pTaskBTNode;
	private final TimerBTNodeElements pTimerBTNode;
	private final CheckBTNodeElements pCheckBTNode;
	private final StatusElements pStatus;
	private final FLOATElements pFLOAT;
	private final TerminalRule tBOOLEAN;
	private final BASETYPEElements pBASETYPE;
	private final NUMBERElements pNUMBER;
	private final CommentElements pComment;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BTreeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBehaviorModel = new BehaviorModelElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pMessageType = new MessageTypeElements();
		this.pType = new TypeElements();
		this.pField = new FieldElements();
		this.pTopic = new TopicElements();
		this.pBBVar = new BBVarElements();
		this.pBBEvent = new BBEventElements();
		this.pArg = new ArgElements();
		this.pDefaultType = new DefaultTypeElements();
		this.pBaseArrayType = new BaseArrayTypeElements();
		this.pBBNode = new BBNodeElements();
		this.pCheckNode = new CheckNodeElements();
		this.pBehaviorNode = new BehaviorNodeElements();
		this.pStdBehaviorNode = new StdBehaviorNodeElements();
		this.pSTD_BEHAVIOR_TYPE = new STD_BEHAVIOR_TYPEElements();
		this.pTaskNode = new TaskNodeElements();
		this.pTopicArg = new TopicArgElements();
		this.pBTree = new BTreeElements();
		this.pBTreeNode = new BTreeNodeElements();
		this.pChildNode = new ChildNodeElements();
		this.pParBTNode = new ParBTNodeElements();
		this.pSeqBTNode = new SeqBTNodeElements();
		this.pSelBTNode = new SelBTNodeElements();
		this.pSIFBTNode = new SIFBTNodeElements();
		this.pMonBTNode = new MonBTNodeElements();
		this.pTaskBTNode = new TaskBTNodeElements();
		this.pTimerBTNode = new TimerBTNodeElements();
		this.pCheckBTNode = new CheckBTNodeElements();
		this.pStatus = new StatusElements();
		this.pFLOAT = new FLOATElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.isis.alc.btree.BTree.BOOLEAN");
		this.pBASETYPE = new BASETYPEElements();
		this.pNUMBER = new NUMBERElements();
		this.pComment = new CommentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.vanderbilt.isis.alc.btree.BTree".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BehaviorModel:
	//    'system' name=ID';'
	//    (simpleTypes += SimpleType)*
	//    (messageTypes += MessageType)*
	//    (rosTopics += Topic)*
	//    (bbVariables += BBVar)*
	//    (bbEvents += BBEvent)*
	//    (bbNodes += BBNode)*
	//    (checkNodes += CheckNode)*
	//    (taskNodes += BehaviorNode)*
	//    'tree' '(' 'updatetime' '=' updatetime=FLOAT ',' 'timeout' '=' timeout=FLOAT ')' tree=BTree
	//;
	public BehaviorModelElements getBehaviorModelAccess() {
		return pBehaviorModel;
	}
	
	public ParserRule getBehaviorModelRule() {
		return getBehaviorModelAccess().getRule();
	}
	
	//SimpleType:
	//    'type' name=ID ';'
	//    ;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//MessageType:
	//    'message' name=ID package=ID
	//          (fields += Field)*
	//    'end'(';')?
	//    ;
	public MessageTypeElements getMessageTypeAccess() {
		return pMessageType;
	}
	
	public ParserRule getMessageTypeRule() {
		return getMessageTypeAccess().getRule();
	}
	
	//Type:    SimpleType | MessageType
	//    ;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Field:    type=[Type](array='['(count=INT)?']')?  name=ID ';'
	//    ;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Topic:    'topic' type=[MessageType] name=ID topic_string=STRING ';'
	//    ;
	public TopicElements getTopicAccess() {
		return pTopic;
	}
	
	public ParserRule getTopicRule() {
		return getTopicAccess().getRule();
	}
	
	//BBVar:
	//    'var' type=[Type] name=ID ('=' default=BASETYPE)? ';'
	//    ;
	public BBVarElements getBBVarAccess() {
		return pBBVar;
	}
	
	public ParserRule getBBVarRule() {
		return getBBVarAccess().getRule();
	}
	
	//BBEvent:
	//    'event' name=ID topic=[Topic]';'
	//    ;
	public BBEventElements getBBEventAccess() {
		return pBBEvent;
	}
	
	public ParserRule getBBEventRule() {
		return getBBEventAccess().getRule();
	}
	
	//Arg:
	//    'arg' type=[Type](array='['(count=INT)?']')? name=ID ('=' default=DefaultType)? ';'
	//    ;
	public ArgElements getArgAccess() {
		return pArg;
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}
	
	//DefaultType:
	//    {DefaultType} BASETYPE | BaseArrayType
	//    ;
	public DefaultTypeElements getDefaultTypeAccess() {
		return pDefaultType;
	}
	
	public ParserRule getDefaultTypeRule() {
		return getDefaultTypeAccess().getRule();
	}
	
	//BaseArrayType:
	//    '[' values+=BASETYPE (',' values+=BASETYPE)* ']'
	//    ;
	public BaseArrayTypeElements getBaseArrayTypeAccess() {
		return pBaseArrayType;
	}
	
	public ParserRule getBaseArrayTypeRule() {
		return getBaseArrayTypeAccess().getRule();
	}
	
	//BBNode:
	//    'input' name=ID
	//         input_topic=[Topic] '->' topic_bbvar=[BBVar]
	//         (bb_vars += BBVar)*
	//         (args += Arg)*
	//         ('comment' comment=STRING)?
	//    'end'(';')?
	//    ;
	public BBNodeElements getBBNodeAccess() {
		return pBBNode;
	}
	
	public ParserRule getBBNodeRule() {
		return getBBNodeAccess().getRule();
	}
	
	//CheckNode:
	//    {BBVar} 'check' name=ID    bbvar=[BBVar] '==' default=BASETYPE ';'
	//    ;
	public CheckNodeElements getCheckNodeAccess() {
		return pCheckNode;
	}
	
	public ParserRule getCheckNodeRule() {
		return getCheckNodeAccess().getRule();
	}
	
	//BehaviorNode:
	//    StdBehaviorNode |
	//    TaskNode
	//    ;
	public BehaviorNodeElements getBehaviorNodeAccess() {
		return pBehaviorNode;
	}
	
	public ParserRule getBehaviorNodeRule() {
		return getBehaviorNodeAccess().getRule();
	}
	
	//StdBehaviorNode:
	//    type=STD_BEHAVIOR_TYPE name=ID ';'
	//    ;
	public StdBehaviorNodeElements getStdBehaviorNodeAccess() {
		return pStdBehaviorNode;
	}
	
	public ParserRule getStdBehaviorNodeRule() {
		return getStdBehaviorNodeAccess().getRule();
	}
	
	//STD_BEHAVIOR_TYPE:
	//    'success' | 'failure' | 'running'
	//    ;
	public STD_BEHAVIOR_TYPEElements getSTD_BEHAVIOR_TYPEAccess() {
		return pSTD_BEHAVIOR_TYPE;
	}
	
	public ParserRule getSTD_BEHAVIOR_TYPERule() {
		return getSTD_BEHAVIOR_TYPEAccess().getRule();
	}
	
	//TaskNode:
	//    'task' name=ID
	//    ('in' input_topics+=TopicArg (','input_topics+=TopicArg)* ';')?
	//    ('out' output_topics+=TopicArg (','output_topics+=TopicArg)* ';')?
	//    (bb_vars+=BBVar*)
	//    (args+=Arg*)
	//    ('comment' comment=STRING (';')?)?
	//    'end'(';')?
	//    ;
	public TaskNodeElements getTaskNodeAccess() {
		return pTaskNode;
	}
	
	public ParserRule getTaskNodeRule() {
		return getTaskNodeAccess().getRule();
	}
	
	//TopicArg:
	//    type=[Topic] name=ID
	//    ;
	public TopicArgElements getTopicArgAccess() {
		return pTopicArg;
	}
	
	public ParserRule getTopicArgRule() {
		return getTopicArgAccess().getRule();
	}
	
	//BTree:    btree=BTreeNode
	//    ;
	public BTreeElements getBTreeAccess() {
		return pBTree;
	}
	
	public ParserRule getBTreeRule() {
		return getBTreeAccess().getRule();
	}
	
	//BTreeNode:
	//    ParBTNode
	//    | SeqBTNode
	//    | SelBTNode
	//    | SIFBTNode
	//    | MonBTNode
	//    | TaskBTNode
	//    | TimerBTNode
	//    | CheckBTNode
	//    ;
	public BTreeNodeElements getBTreeNodeAccess() {
		return pBTreeNode;
	}
	
	public ParserRule getBTreeNodeRule() {
		return getBTreeNodeAccess().getRule();
	}
	
	//ChildNode:
	//    BTreeNode
	//    ;
	public ChildNodeElements getChildNodeAccess() {
		return pChildNode;
	}
	
	public ParserRule getChildNodeRule() {
		return getChildNodeAccess().getRule();
	}
	
	//ParBTNode:
	//    'par' name=ID ('('cond=Status')')?'{'
	//          (nodes += ChildNode)*
	//     '}'
	//     ;
	public ParBTNodeElements getParBTNodeAccess() {
		return pParBTNode;
	}
	
	public ParserRule getParBTNodeRule() {
		return getParBTNodeAccess().getRule();
	}
	
	//SeqBTNode:
	//    'seq' name=ID ('('cond=Status')')?'{'
	//          (nodes += ChildNode)*
	//    '}'
	//    ;
	public SeqBTNodeElements getSeqBTNodeAccess() {
		return pSeqBTNode;
	}
	
	public ParserRule getSeqBTNodeRule() {
		return getSeqBTNodeAccess().getRule();
	}
	
	//SelBTNode:
	//    'sel' name=ID ('('cond=Status')')?'{'
	//          (nodes += ChildNode)*
	//    '}'
	//    ;
	public SelBTNodeElements getSelBTNodeAccess() {
		return pSelBTNode;
	}
	
	public ParserRule getSelBTNodeRule() {
		return getSelBTNodeAccess().getRule();
	}
	
	//SIFBTNode:
	//    'do' name=ID '{'
	//           'if' checks+=[CheckNode] (',' checks+=[CheckNode])*
	//           'then' '{'
	//                (nodes += ChildNode) (nodes +=ChildNode)*
	//            '}'
	//    '}'
	//    ;
	public SIFBTNodeElements getSIFBTNodeAccess() {
		return pSIFBTNode;
	}
	
	public ParserRule getSIFBTNodeRule() {
		return getSIFBTNodeAccess().getRule();
	}
	
	//MonBTNode:
	//    'mon' mon+=[BBNode] (',' mon+=[BBNode])*
	//    ;
	public MonBTNodeElements getMonBTNodeAccess() {
		return pMonBTNode;
	}
	
	public ParserRule getMonBTNodeRule() {
		return getMonBTNodeAccess().getRule();
	}
	
	//TaskBTNode:
	//    'exec' task+=[BehaviorNode] (','task+=[BehaviorNode])*
	//    ;
	public TaskBTNodeElements getTaskBTNodeAccess() {
		return pTaskBTNode;
	}
	
	public ParserRule getTaskBTNodeRule() {
		return getTaskBTNodeAccess().getRule();
	}
	
	//TimerBTNode:
	//    'timer' name=ID '('duration=NUMBER')'
	//    ;
	public TimerBTNodeElements getTimerBTNodeAccess() {
		return pTimerBTNode;
	}
	
	public ParserRule getTimerBTNodeRule() {
		return getTimerBTNodeAccess().getRule();
	}
	
	//CheckBTNode:
	//    'chk' check+=[CheckNode] (',' check+=[CheckNode])*
	//    ;
	public CheckBTNodeElements getCheckBTNodeAccess() {
		return pCheckBTNode;
	}
	
	public ParserRule getCheckBTNodeRule() {
		return getCheckBTNodeAccess().getRule();
	}
	
	//Status:
	//    'success' | 'failure' | 'running' | 'invalid'
	//    ;
	public StatusElements getStatusAccess() {
		return pStatus;
	}
	
	public ParserRule getStatusRule() {
		return getStatusAccess().getRule();
	}
	
	//FLOAT returns ecore::EFloat:
	//    '-'?INT'.'INT
	//    ;
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//terminal BOOLEAN:
	//    'True' | 'False'
	//;
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//BASETYPE:
	//    STRING|FLOAT|INT|BOOLEAN
	//;
	public BASETYPEElements getBASETYPEAccess() {
		return pBASETYPE;
	}
	
	public ParserRule getBASETYPERule() {
		return getBASETYPEAccess().getRule();
	}
	
	//NUMBER:
	//    FLOAT|INT
	//;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//Comment:
	//    ID
	//    ;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
