/*
 * generated by Xtext 2.25.0
 */
package edu.vanderbilt.isis.alc.btree.serializer;

import com.google.inject.Inject;
import edu.vanderbilt.isis.alc.btree.services.BTreeGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class BTreeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BTreeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BBNode_SemicolonKeyword_9_q;
	protected AbstractElementAlias match_MessageType_SemicolonKeyword_5_q;
	protected AbstractElementAlias match_TaskNode_SemicolonKeyword_6_2_q;
	protected AbstractElementAlias match_TaskNode_SemicolonKeyword_8_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BTreeGrammarAccess) access;
		match_BBNode_SemicolonKeyword_9_q = new TokenAlias(false, true, grammarAccess.getBBNodeAccess().getSemicolonKeyword_9());
		match_MessageType_SemicolonKeyword_5_q = new TokenAlias(false, true, grammarAccess.getMessageTypeAccess().getSemicolonKeyword_5());
		match_TaskNode_SemicolonKeyword_6_2_q = new TokenAlias(false, true, grammarAccess.getTaskNodeAccess().getSemicolonKeyword_6_2());
		match_TaskNode_SemicolonKeyword_8_q = new TokenAlias(false, true, grammarAccess.getTaskNodeAccess().getSemicolonKeyword_8());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBASETYPERule())
			return getBASETYPEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * BASETYPE:
	 * 	STRING|FLOAT|INT|BOOLEAN
	 * ;
	 */
	protected String getBASETYPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BBNode_SemicolonKeyword_9_q.equals(syntax))
				emit_BBNode_SemicolonKeyword_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MessageType_SemicolonKeyword_5_q.equals(syntax))
				emit_MessageType_SemicolonKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TaskNode_SemicolonKeyword_6_2_q.equals(syntax))
				emit_TaskNode_SemicolonKeyword_6_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TaskNode_SemicolonKeyword_8_q.equals(syntax))
				emit_TaskNode_SemicolonKeyword_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=Arg 'end' (ambiguity) (rule end)
	 *     bb_vars+=BBVar 'end' (ambiguity) (rule end)
	 *     comment=STRING 'end' (ambiguity) (rule end)
	 *     topic_bbvar=[BBVar|ID] 'end' (ambiguity) (rule end)
	 */
	protected void emit_BBNode_SemicolonKeyword_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     fields+=Field 'end' (ambiguity) (rule end)
	 *     package=ID 'end' (ambiguity) (rule end)
	 */
	protected void emit_MessageType_SemicolonKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     comment=STRING (ambiguity) 'end' ';'? (rule end)
	 */
	protected void emit_TaskNode_SemicolonKeyword_6_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=Arg 'end' (ambiguity) (rule end)
	 *     bb_vars+=BBVar 'end' (ambiguity) (rule end)
	 *     comment=STRING ';'? 'end' (ambiguity) (rule end)
	 *     input_topics+=TopicArg ';' 'end' (ambiguity) (rule end)
	 *     name=ID 'end' (ambiguity) (rule end)
	 *     output_topics+=TopicArg ';' 'end' (ambiguity) (rule end)
	 */
	protected void emit_TaskNode_SemicolonKeyword_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
