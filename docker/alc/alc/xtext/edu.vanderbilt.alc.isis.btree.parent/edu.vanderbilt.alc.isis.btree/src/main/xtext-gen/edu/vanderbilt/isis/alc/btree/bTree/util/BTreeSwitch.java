/**
 * generated by Xtext 2.25.0
 */
package edu.vanderbilt.isis.alc.btree.bTree.util;

import edu.vanderbilt.isis.alc.btree.bTree.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see edu.vanderbilt.isis.alc.btree.bTree.BTreePackage
 * @generated
 */
public class BTreeSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BTreePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BTreeSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = BTreePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case BTreePackage.BEHAVIOR_MODEL:
      {
        BehaviorModel behaviorModel = (BehaviorModel)theEObject;
        T result = caseBehaviorModel(behaviorModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.SIMPLE_TYPE:
      {
        SimpleType simpleType = (SimpleType)theEObject;
        T result = caseSimpleType(simpleType);
        if (result == null) result = caseType(simpleType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.MESSAGE_TYPE:
      {
        MessageType messageType = (MessageType)theEObject;
        T result = caseMessageType(messageType);
        if (result == null) result = caseType(messageType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.FIELD:
      {
        Field field = (Field)theEObject;
        T result = caseField(field);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.TOPIC:
      {
        Topic topic = (Topic)theEObject;
        T result = caseTopic(topic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.BB_VAR:
      {
        BBVar bbVar = (BBVar)theEObject;
        T result = caseBBVar(bbVar);
        if (result == null) result = caseCheckNode(bbVar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.BB_EVENT:
      {
        BBEvent bbEvent = (BBEvent)theEObject;
        T result = caseBBEvent(bbEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.ARG:
      {
        Arg arg = (Arg)theEObject;
        T result = caseArg(arg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.DEFAULT_TYPE:
      {
        DefaultType defaultType = (DefaultType)theEObject;
        T result = caseDefaultType(defaultType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.BASE_ARRAY_TYPE:
      {
        BaseArrayType baseArrayType = (BaseArrayType)theEObject;
        T result = caseBaseArrayType(baseArrayType);
        if (result == null) result = caseDefaultType(baseArrayType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.BB_NODE:
      {
        BBNode bbNode = (BBNode)theEObject;
        T result = caseBBNode(bbNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.CHECK_NODE:
      {
        CheckNode checkNode = (CheckNode)theEObject;
        T result = caseCheckNode(checkNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.BEHAVIOR_NODE:
      {
        BehaviorNode behaviorNode = (BehaviorNode)theEObject;
        T result = caseBehaviorNode(behaviorNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.STD_BEHAVIOR_NODE:
      {
        StdBehaviorNode stdBehaviorNode = (StdBehaviorNode)theEObject;
        T result = caseStdBehaviorNode(stdBehaviorNode);
        if (result == null) result = caseBehaviorNode(stdBehaviorNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.TASK_NODE:
      {
        TaskNode taskNode = (TaskNode)theEObject;
        T result = caseTaskNode(taskNode);
        if (result == null) result = caseBehaviorNode(taskNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.TOPIC_ARG:
      {
        TopicArg topicArg = (TopicArg)theEObject;
        T result = caseTopicArg(topicArg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.BTREE:
      {
        BTree bTree = (BTree)theEObject;
        T result = caseBTree(bTree);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.BTREE_NODE:
      {
        BTreeNode bTreeNode = (BTreeNode)theEObject;
        T result = caseBTreeNode(bTreeNode);
        if (result == null) result = caseChildNode(bTreeNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.CHILD_NODE:
      {
        ChildNode childNode = (ChildNode)theEObject;
        T result = caseChildNode(childNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.PAR_BT_NODE:
      {
        ParBTNode parBTNode = (ParBTNode)theEObject;
        T result = caseParBTNode(parBTNode);
        if (result == null) result = caseBTreeNode(parBTNode);
        if (result == null) result = caseChildNode(parBTNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.SEQ_BT_NODE:
      {
        SeqBTNode seqBTNode = (SeqBTNode)theEObject;
        T result = caseSeqBTNode(seqBTNode);
        if (result == null) result = caseBTreeNode(seqBTNode);
        if (result == null) result = caseChildNode(seqBTNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.SEL_BT_NODE:
      {
        SelBTNode selBTNode = (SelBTNode)theEObject;
        T result = caseSelBTNode(selBTNode);
        if (result == null) result = caseBTreeNode(selBTNode);
        if (result == null) result = caseChildNode(selBTNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.SIFBT_NODE:
      {
        SIFBTNode sifbtNode = (SIFBTNode)theEObject;
        T result = caseSIFBTNode(sifbtNode);
        if (result == null) result = caseBTreeNode(sifbtNode);
        if (result == null) result = caseChildNode(sifbtNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.MON_BT_NODE:
      {
        MonBTNode monBTNode = (MonBTNode)theEObject;
        T result = caseMonBTNode(monBTNode);
        if (result == null) result = caseBTreeNode(monBTNode);
        if (result == null) result = caseChildNode(monBTNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.TASK_BT_NODE:
      {
        TaskBTNode taskBTNode = (TaskBTNode)theEObject;
        T result = caseTaskBTNode(taskBTNode);
        if (result == null) result = caseBTreeNode(taskBTNode);
        if (result == null) result = caseChildNode(taskBTNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.TIMER_BT_NODE:
      {
        TimerBTNode timerBTNode = (TimerBTNode)theEObject;
        T result = caseTimerBTNode(timerBTNode);
        if (result == null) result = caseBTreeNode(timerBTNode);
        if (result == null) result = caseChildNode(timerBTNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BTreePackage.CHECK_BT_NODE:
      {
        CheckBTNode checkBTNode = (CheckBTNode)theEObject;
        T result = caseCheckBTNode(checkBTNode);
        if (result == null) result = caseBTreeNode(checkBTNode);
        if (result == null) result = caseChildNode(checkBTNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorModel(BehaviorModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleType(SimpleType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessageType(MessageType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseField(Field object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Topic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Topic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTopic(Topic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BB Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BB Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBBVar(BBVar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BB Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BB Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBBEvent(BBEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArg(Arg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Default Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Default Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefaultType(DefaultType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Base Array Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Base Array Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBaseArrayType(BaseArrayType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BB Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BB Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBBNode(BBNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Check Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Check Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCheckNode(CheckNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorNode(BehaviorNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Std Behavior Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Std Behavior Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStdBehaviorNode(StdBehaviorNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Task Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Task Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTaskNode(TaskNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Topic Arg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Topic Arg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTopicArg(TopicArg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BTree</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BTree</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBTree(BTree object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBTreeNode(BTreeNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Child Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Child Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChildNode(ChildNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Par BT Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Par BT Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParBTNode(ParBTNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Seq BT Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Seq BT Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSeqBTNode(SeqBTNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sel BT Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sel BT Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelBTNode(SelBTNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SIFBT Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SIFBT Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSIFBTNode(SIFBTNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mon BT Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mon BT Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMonBTNode(MonBTNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Task BT Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Task BT Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTaskBTNode(TaskBTNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timer BT Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timer BT Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimerBTNode(TimerBTNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Check BT Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Check BT Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCheckBTNode(CheckBTNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //BTreeSwitch
