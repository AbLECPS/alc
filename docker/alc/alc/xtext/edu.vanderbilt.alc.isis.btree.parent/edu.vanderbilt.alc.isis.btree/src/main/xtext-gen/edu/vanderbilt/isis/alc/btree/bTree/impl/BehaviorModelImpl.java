/**
 * generated by Xtext 2.25.0
 */
package edu.vanderbilt.isis.alc.btree.bTree.impl;

import edu.vanderbilt.isis.alc.btree.bTree.BBEvent;
import edu.vanderbilt.isis.alc.btree.bTree.BBNode;
import edu.vanderbilt.isis.alc.btree.bTree.BBVar;
import edu.vanderbilt.isis.alc.btree.bTree.BTree;
import edu.vanderbilt.isis.alc.btree.bTree.BTreePackage;
import edu.vanderbilt.isis.alc.btree.bTree.BehaviorModel;
import edu.vanderbilt.isis.alc.btree.bTree.BehaviorNode;
import edu.vanderbilt.isis.alc.btree.bTree.CheckNode;
import edu.vanderbilt.isis.alc.btree.bTree.MessageType;
import edu.vanderbilt.isis.alc.btree.bTree.SimpleType;
import edu.vanderbilt.isis.alc.btree.bTree.Topic;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Behavior Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getName <em>Name</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getSimpleTypes <em>Simple Types</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getMessageTypes <em>Message Types</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getRosTopics <em>Ros Topics</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getBbVariables <em>Bb Variables</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getBbEvents <em>Bb Events</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getBbNodes <em>Bb Nodes</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getCheckNodes <em>Check Nodes</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getTaskNodes <em>Task Nodes</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getUpdatetime <em>Updatetime</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getTimeout <em>Timeout</em>}</li>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BehaviorModelImpl#getTree <em>Tree</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BehaviorModelImpl extends MinimalEObjectImpl.Container implements BehaviorModel
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSimpleTypes() <em>Simple Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleTypes()
   * @generated
   * @ordered
   */
  protected EList<SimpleType> simpleTypes;

  /**
   * The cached value of the '{@link #getMessageTypes() <em>Message Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessageTypes()
   * @generated
   * @ordered
   */
  protected EList<MessageType> messageTypes;

  /**
   * The cached value of the '{@link #getRosTopics() <em>Ros Topics</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRosTopics()
   * @generated
   * @ordered
   */
  protected EList<Topic> rosTopics;

  /**
   * The cached value of the '{@link #getBbVariables() <em>Bb Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBbVariables()
   * @generated
   * @ordered
   */
  protected EList<BBVar> bbVariables;

  /**
   * The cached value of the '{@link #getBbEvents() <em>Bb Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBbEvents()
   * @generated
   * @ordered
   */
  protected EList<BBEvent> bbEvents;

  /**
   * The cached value of the '{@link #getBbNodes() <em>Bb Nodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBbNodes()
   * @generated
   * @ordered
   */
  protected EList<BBNode> bbNodes;

  /**
   * The cached value of the '{@link #getCheckNodes() <em>Check Nodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCheckNodes()
   * @generated
   * @ordered
   */
  protected EList<CheckNode> checkNodes;

  /**
   * The cached value of the '{@link #getTaskNodes() <em>Task Nodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskNodes()
   * @generated
   * @ordered
   */
  protected EList<BehaviorNode> taskNodes;

  /**
   * The default value of the '{@link #getUpdatetime() <em>Updatetime</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpdatetime()
   * @generated
   * @ordered
   */
  protected static final float UPDATETIME_EDEFAULT = 0.0F;

  /**
   * The cached value of the '{@link #getUpdatetime() <em>Updatetime</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpdatetime()
   * @generated
   * @ordered
   */
  protected float updatetime = UPDATETIME_EDEFAULT;

  /**
   * The default value of the '{@link #getTimeout() <em>Timeout</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeout()
   * @generated
   * @ordered
   */
  protected static final float TIMEOUT_EDEFAULT = 0.0F;

  /**
   * The cached value of the '{@link #getTimeout() <em>Timeout</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeout()
   * @generated
   * @ordered
   */
  protected float timeout = TIMEOUT_EDEFAULT;

  /**
   * The cached value of the '{@link #getTree() <em>Tree</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTree()
   * @generated
   * @ordered
   */
  protected BTree tree;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BehaviorModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BTreePackage.Literals.BEHAVIOR_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BTreePackage.BEHAVIOR_MODEL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SimpleType> getSimpleTypes()
  {
    if (simpleTypes == null)
    {
      simpleTypes = new EObjectContainmentEList<SimpleType>(SimpleType.class, this, BTreePackage.BEHAVIOR_MODEL__SIMPLE_TYPES);
    }
    return simpleTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MessageType> getMessageTypes()
  {
    if (messageTypes == null)
    {
      messageTypes = new EObjectContainmentEList<MessageType>(MessageType.class, this, BTreePackage.BEHAVIOR_MODEL__MESSAGE_TYPES);
    }
    return messageTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Topic> getRosTopics()
  {
    if (rosTopics == null)
    {
      rosTopics = new EObjectContainmentEList<Topic>(Topic.class, this, BTreePackage.BEHAVIOR_MODEL__ROS_TOPICS);
    }
    return rosTopics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BBVar> getBbVariables()
  {
    if (bbVariables == null)
    {
      bbVariables = new EObjectContainmentEList<BBVar>(BBVar.class, this, BTreePackage.BEHAVIOR_MODEL__BB_VARIABLES);
    }
    return bbVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BBEvent> getBbEvents()
  {
    if (bbEvents == null)
    {
      bbEvents = new EObjectContainmentEList<BBEvent>(BBEvent.class, this, BTreePackage.BEHAVIOR_MODEL__BB_EVENTS);
    }
    return bbEvents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BBNode> getBbNodes()
  {
    if (bbNodes == null)
    {
      bbNodes = new EObjectContainmentEList<BBNode>(BBNode.class, this, BTreePackage.BEHAVIOR_MODEL__BB_NODES);
    }
    return bbNodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CheckNode> getCheckNodes()
  {
    if (checkNodes == null)
    {
      checkNodes = new EObjectContainmentEList<CheckNode>(CheckNode.class, this, BTreePackage.BEHAVIOR_MODEL__CHECK_NODES);
    }
    return checkNodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BehaviorNode> getTaskNodes()
  {
    if (taskNodes == null)
    {
      taskNodes = new EObjectContainmentEList<BehaviorNode>(BehaviorNode.class, this, BTreePackage.BEHAVIOR_MODEL__TASK_NODES);
    }
    return taskNodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public float getUpdatetime()
  {
    return updatetime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUpdatetime(float newUpdatetime)
  {
    float oldUpdatetime = updatetime;
    updatetime = newUpdatetime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BTreePackage.BEHAVIOR_MODEL__UPDATETIME, oldUpdatetime, updatetime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public float getTimeout()
  {
    return timeout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeout(float newTimeout)
  {
    float oldTimeout = timeout;
    timeout = newTimeout;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BTreePackage.BEHAVIOR_MODEL__TIMEOUT, oldTimeout, timeout));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BTree getTree()
  {
    return tree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTree(BTree newTree, NotificationChain msgs)
  {
    BTree oldTree = tree;
    tree = newTree;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BTreePackage.BEHAVIOR_MODEL__TREE, oldTree, newTree);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTree(BTree newTree)
  {
    if (newTree != tree)
    {
      NotificationChain msgs = null;
      if (tree != null)
        msgs = ((InternalEObject)tree).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BTreePackage.BEHAVIOR_MODEL__TREE, null, msgs);
      if (newTree != null)
        msgs = ((InternalEObject)newTree).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BTreePackage.BEHAVIOR_MODEL__TREE, null, msgs);
      msgs = basicSetTree(newTree, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BTreePackage.BEHAVIOR_MODEL__TREE, newTree, newTree));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BTreePackage.BEHAVIOR_MODEL__SIMPLE_TYPES:
        return ((InternalEList<?>)getSimpleTypes()).basicRemove(otherEnd, msgs);
      case BTreePackage.BEHAVIOR_MODEL__MESSAGE_TYPES:
        return ((InternalEList<?>)getMessageTypes()).basicRemove(otherEnd, msgs);
      case BTreePackage.BEHAVIOR_MODEL__ROS_TOPICS:
        return ((InternalEList<?>)getRosTopics()).basicRemove(otherEnd, msgs);
      case BTreePackage.BEHAVIOR_MODEL__BB_VARIABLES:
        return ((InternalEList<?>)getBbVariables()).basicRemove(otherEnd, msgs);
      case BTreePackage.BEHAVIOR_MODEL__BB_EVENTS:
        return ((InternalEList<?>)getBbEvents()).basicRemove(otherEnd, msgs);
      case BTreePackage.BEHAVIOR_MODEL__BB_NODES:
        return ((InternalEList<?>)getBbNodes()).basicRemove(otherEnd, msgs);
      case BTreePackage.BEHAVIOR_MODEL__CHECK_NODES:
        return ((InternalEList<?>)getCheckNodes()).basicRemove(otherEnd, msgs);
      case BTreePackage.BEHAVIOR_MODEL__TASK_NODES:
        return ((InternalEList<?>)getTaskNodes()).basicRemove(otherEnd, msgs);
      case BTreePackage.BEHAVIOR_MODEL__TREE:
        return basicSetTree(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BTreePackage.BEHAVIOR_MODEL__NAME:
        return getName();
      case BTreePackage.BEHAVIOR_MODEL__SIMPLE_TYPES:
        return getSimpleTypes();
      case BTreePackage.BEHAVIOR_MODEL__MESSAGE_TYPES:
        return getMessageTypes();
      case BTreePackage.BEHAVIOR_MODEL__ROS_TOPICS:
        return getRosTopics();
      case BTreePackage.BEHAVIOR_MODEL__BB_VARIABLES:
        return getBbVariables();
      case BTreePackage.BEHAVIOR_MODEL__BB_EVENTS:
        return getBbEvents();
      case BTreePackage.BEHAVIOR_MODEL__BB_NODES:
        return getBbNodes();
      case BTreePackage.BEHAVIOR_MODEL__CHECK_NODES:
        return getCheckNodes();
      case BTreePackage.BEHAVIOR_MODEL__TASK_NODES:
        return getTaskNodes();
      case BTreePackage.BEHAVIOR_MODEL__UPDATETIME:
        return getUpdatetime();
      case BTreePackage.BEHAVIOR_MODEL__TIMEOUT:
        return getTimeout();
      case BTreePackage.BEHAVIOR_MODEL__TREE:
        return getTree();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BTreePackage.BEHAVIOR_MODEL__NAME:
        setName((String)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__SIMPLE_TYPES:
        getSimpleTypes().clear();
        getSimpleTypes().addAll((Collection<? extends SimpleType>)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__MESSAGE_TYPES:
        getMessageTypes().clear();
        getMessageTypes().addAll((Collection<? extends MessageType>)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__ROS_TOPICS:
        getRosTopics().clear();
        getRosTopics().addAll((Collection<? extends Topic>)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__BB_VARIABLES:
        getBbVariables().clear();
        getBbVariables().addAll((Collection<? extends BBVar>)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__BB_EVENTS:
        getBbEvents().clear();
        getBbEvents().addAll((Collection<? extends BBEvent>)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__BB_NODES:
        getBbNodes().clear();
        getBbNodes().addAll((Collection<? extends BBNode>)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__CHECK_NODES:
        getCheckNodes().clear();
        getCheckNodes().addAll((Collection<? extends CheckNode>)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__TASK_NODES:
        getTaskNodes().clear();
        getTaskNodes().addAll((Collection<? extends BehaviorNode>)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__UPDATETIME:
        setUpdatetime((Float)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__TIMEOUT:
        setTimeout((Float)newValue);
        return;
      case BTreePackage.BEHAVIOR_MODEL__TREE:
        setTree((BTree)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BTreePackage.BEHAVIOR_MODEL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case BTreePackage.BEHAVIOR_MODEL__SIMPLE_TYPES:
        getSimpleTypes().clear();
        return;
      case BTreePackage.BEHAVIOR_MODEL__MESSAGE_TYPES:
        getMessageTypes().clear();
        return;
      case BTreePackage.BEHAVIOR_MODEL__ROS_TOPICS:
        getRosTopics().clear();
        return;
      case BTreePackage.BEHAVIOR_MODEL__BB_VARIABLES:
        getBbVariables().clear();
        return;
      case BTreePackage.BEHAVIOR_MODEL__BB_EVENTS:
        getBbEvents().clear();
        return;
      case BTreePackage.BEHAVIOR_MODEL__BB_NODES:
        getBbNodes().clear();
        return;
      case BTreePackage.BEHAVIOR_MODEL__CHECK_NODES:
        getCheckNodes().clear();
        return;
      case BTreePackage.BEHAVIOR_MODEL__TASK_NODES:
        getTaskNodes().clear();
        return;
      case BTreePackage.BEHAVIOR_MODEL__UPDATETIME:
        setUpdatetime(UPDATETIME_EDEFAULT);
        return;
      case BTreePackage.BEHAVIOR_MODEL__TIMEOUT:
        setTimeout(TIMEOUT_EDEFAULT);
        return;
      case BTreePackage.BEHAVIOR_MODEL__TREE:
        setTree((BTree)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BTreePackage.BEHAVIOR_MODEL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case BTreePackage.BEHAVIOR_MODEL__SIMPLE_TYPES:
        return simpleTypes != null && !simpleTypes.isEmpty();
      case BTreePackage.BEHAVIOR_MODEL__MESSAGE_TYPES:
        return messageTypes != null && !messageTypes.isEmpty();
      case BTreePackage.BEHAVIOR_MODEL__ROS_TOPICS:
        return rosTopics != null && !rosTopics.isEmpty();
      case BTreePackage.BEHAVIOR_MODEL__BB_VARIABLES:
        return bbVariables != null && !bbVariables.isEmpty();
      case BTreePackage.BEHAVIOR_MODEL__BB_EVENTS:
        return bbEvents != null && !bbEvents.isEmpty();
      case BTreePackage.BEHAVIOR_MODEL__BB_NODES:
        return bbNodes != null && !bbNodes.isEmpty();
      case BTreePackage.BEHAVIOR_MODEL__CHECK_NODES:
        return checkNodes != null && !checkNodes.isEmpty();
      case BTreePackage.BEHAVIOR_MODEL__TASK_NODES:
        return taskNodes != null && !taskNodes.isEmpty();
      case BTreePackage.BEHAVIOR_MODEL__UPDATETIME:
        return updatetime != UPDATETIME_EDEFAULT;
      case BTreePackage.BEHAVIOR_MODEL__TIMEOUT:
        return timeout != TIMEOUT_EDEFAULT;
      case BTreePackage.BEHAVIOR_MODEL__TREE:
        return tree != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", updatetime: ");
    result.append(updatetime);
    result.append(", timeout: ");
    result.append(timeout);
    result.append(')');
    return result.toString();
  }

} //BehaviorModelImpl
