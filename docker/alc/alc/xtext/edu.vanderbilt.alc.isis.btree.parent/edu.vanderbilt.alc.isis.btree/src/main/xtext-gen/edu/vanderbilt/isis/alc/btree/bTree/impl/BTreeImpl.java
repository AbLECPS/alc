/**
 * generated by Xtext 2.25.0
 */
package edu.vanderbilt.isis.alc.btree.bTree.impl;

import edu.vanderbilt.isis.alc.btree.bTree.BTree;
import edu.vanderbilt.isis.alc.btree.bTree.BTreeNode;
import edu.vanderbilt.isis.alc.btree.bTree.BTreePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>BTree</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.vanderbilt.isis.alc.btree.bTree.impl.BTreeImpl#getBtree <em>Btree</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BTreeImpl extends MinimalEObjectImpl.Container implements BTree
{
  /**
   * The cached value of the '{@link #getBtree() <em>Btree</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBtree()
   * @generated
   * @ordered
   */
  protected BTreeNode btree;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BTreeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BTreePackage.Literals.BTREE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BTreeNode getBtree()
  {
    return btree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBtree(BTreeNode newBtree, NotificationChain msgs)
  {
    BTreeNode oldBtree = btree;
    btree = newBtree;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BTreePackage.BTREE__BTREE, oldBtree, newBtree);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBtree(BTreeNode newBtree)
  {
    if (newBtree != btree)
    {
      NotificationChain msgs = null;
      if (btree != null)
        msgs = ((InternalEObject)btree).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BTreePackage.BTREE__BTREE, null, msgs);
      if (newBtree != null)
        msgs = ((InternalEObject)newBtree).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BTreePackage.BTREE__BTREE, null, msgs);
      msgs = basicSetBtree(newBtree, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BTreePackage.BTREE__BTREE, newBtree, newBtree));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BTreePackage.BTREE__BTREE:
        return basicSetBtree(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BTreePackage.BTREE__BTREE:
        return getBtree();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BTreePackage.BTREE__BTREE:
        setBtree((BTreeNode)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BTreePackage.BTREE__BTREE:
        setBtree((BTreeNode)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BTreePackage.BTREE__BTREE:
        return btree != null;
    }
    return super.eIsSet(featureID);
  }

} //BTreeImpl
